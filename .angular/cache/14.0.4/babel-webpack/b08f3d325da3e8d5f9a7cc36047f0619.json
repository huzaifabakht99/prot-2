{"ast":null,"code":"import { Version, InjectionToken, isDevMode, NgModule, Optional, Inject, inject, LOCALE_ID, Injectable, ɵɵdefineInjectable, Directive, ElementRef, NgZone, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, EventEmitter, ChangeDetectorRef, Output } from '@angular/core';\nimport { HighContrastModeDetector, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { VERSION as VERSION$2 } from '@angular/cdk';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { coerceBooleanProperty, coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Subject, Observable } from 'rxjs';\nimport { Platform, PlatformModule, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Current version of Angular Material. */\n\nconst VERSION = new Version('11.2.13');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\nclass AnimationCurves {}\n\nAnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\nAnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\nAnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\nAnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n/** @docs-private */\n\nclass AnimationDurations {}\n\nAnimationDurations.COMPLEX = '375ms';\nAnimationDurations.ENTERING = '225ms';\nAnimationDurations.EXITING = '195ms';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\n\nconst VERSION$1 = new Version('11.2.13');\n/** @docs-private */\n\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\n  return true;\n}\n/** Injection token that configures whether the Material sanity checks are enabled. */\n\n\nconst MATERIAL_SANITY_CHECKS = new InjectionToken('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY\n});\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n\nclass MatCommonModule {\n  constructor(highContrastModeDetector, sanityChecks, document) {\n    /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n    this._hasDoneGlobalChecks = false;\n    this._document = document; // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n    // in MatCommonModule.\n\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses(); // Note that `_sanityChecks` is typed to `any`, because AoT\n    // throws an error if we use the `SanityChecks` type directly.\n\n\n    this._sanityChecks = sanityChecks;\n\n    if (!this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n\n      this._checkThemeIsPresent();\n\n      this._checkCdkVersionMatch();\n\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n  _getWindow() {\n    const win = this._document.defaultView || window;\n    return typeof win === 'object' && win ? win : null;\n  }\n  /** Whether any sanity checks are enabled. */\n\n\n  _checksAreEnabled() {\n    // TODO(crisbeto): we can't use `ngDevMode` here yet, because ViewEngine apps might not support\n    // it. Since these checks can have performance implications and they aren't tree shakeable\n    // in their current form, we can leave the `isDevMode` check in for now.\n    // tslint:disable-next-line:ban\n    return isDevMode() && !this._isTestEnv();\n  }\n  /** Whether the code is running in tests. */\n\n\n  _isTestEnv() {\n    const window = this._getWindow();\n\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  _checkDoctypeIsDefined() {\n    const isEnabled = this._checksAreEnabled() && (this._sanityChecks === true || this._sanityChecks.doctype);\n\n    if (isEnabled && !this._document.doctype) {\n      console.warn('Current document does not have a doctype. This may cause ' + 'some Angular Material components not to behave as expected.');\n    }\n  }\n\n  _checkThemeIsPresent() {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    const isDisabled = !this._checksAreEnabled() || this._sanityChecks === false || !this._sanityChecks.theme;\n\n    if (isDisabled || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement); // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn('Could not find Angular Material core theme. Most Material ' + 'components may not work as expected. For more info refer ' + 'to the theming guide: https://material.angular.io/guide/theming');\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n  /** Checks whether the material version matches the cdk version */\n\n\n  _checkCdkVersionMatch() {\n    const isEnabled = this._checksAreEnabled() && (this._sanityChecks === true || this._sanityChecks.version);\n\n    if (isEnabled && VERSION$1.full !== VERSION$2.full) {\n      console.warn('The Angular Material version (' + VERSION$1.full + ') does not match ' + 'the Angular CDK version (' + VERSION$2.full + ').\\n' + 'Please ensure the versions of these two packages exactly match.');\n    }\n  }\n\n}\n\nMatCommonModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [BidiModule],\n    exports: [BidiModule]\n  }]\n}];\n\nMatCommonModule.ctorParameters = () => [{\n  type: HighContrastModeDetector\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MATERIAL_SANITY_CHECKS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Mixin to augment a directive with a `disabled` property. */\n\n\nfunction mixinDisabled(base) {\n  return class extends base {\n    constructor(...args) {\n      super(...args);\n      this._disabled = false;\n    }\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Mixin to augment a directive with a `color` property. */\n\n\nfunction mixinColor(base, defaultColor) {\n  return class extends base {\n    constructor(...args) {\n      super(...args);\n      this.defaultColor = defaultColor; // Set the default color that can be specified from the mixin.\n\n      this.color = defaultColor;\n    }\n\n    get color() {\n      return this._color;\n    }\n\n    set color(value) {\n      const colorPalette = value || this.defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Mixin to augment a directive with a `disableRipple` property. */\n\n\nfunction mixinDisableRipple(base) {\n  class Mixin extends base {\n    constructor(...args) {\n      super(...args);\n      this._disableRipple = false;\n    }\n    /** Whether the ripple effect is disabled or not. */\n\n\n    get disableRipple() {\n      return this._disableRipple;\n    }\n\n    set disableRipple(value) {\n      this._disableRipple = coerceBooleanProperty(value);\n    }\n\n  } // Since we don't directly extend from `base` with it's original types, and we instruct\n  // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.\n  // This is a limitation in TS as abstract classes cannot be typed properly dynamically.\n\n\n  return Mixin;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Mixin to augment a directive with a `tabIndex` property. */\n\n\nfunction mixinTabIndex(base, defaultTabIndex = 0) {\n  // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,\n  // but given we `extend` it from another class, we can assume a constructor being accessible.\n  class Mixin extends base {\n    constructor(...args) {\n      super(...args);\n      this._tabIndex = defaultTabIndex;\n      this.defaultTabIndex = defaultTabIndex;\n    }\n\n    get tabIndex() {\n      return this.disabled ? -1 : this._tabIndex;\n    }\n\n    set tabIndex(value) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;\n    }\n\n  } // Since we don't directly extend from `base` with it's original types, and we instruct\n  // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.\n  // This is a limitation in TS as abstract classes cannot be typed properly dynamically.\n\n\n  return Mixin;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\n\n\nfunction mixinErrorState(base) {\n  return class extends base {\n    constructor(...args) {\n      super(...args);\n      /** Whether the component is in an error state. */\n\n      this.errorState = false;\n      /**\n       * Stream that emits whenever the state of the input changes such that the wrapping\n       * `MatFormField` needs to run change detection.\n       */\n\n      this.stateChanges = new Subject();\n    }\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\n\n\nfunction mixinInitialized(base) {\n  return class extends base {\n    constructor(...args) {\n      super(...args);\n      /** Whether this directive has been marked as initialized. */\n\n      this._isInitialized = false;\n      /**\n       * List of subscribers that subscribed before the directive was initialized. Should be notified\n       * during _markInitialized. Set to null after pending subscribers are notified, and should\n       * not expect to be populated after.\n       */\n\n      this._pendingSubscribers = [];\n      /**\n       * Observable stream that emits when the directive initializes. If already initialized, the\n       * subscriber is stored to be notified once _markInitialized is called.\n       */\n\n      this.initialized = new Observable(subscriber => {\n        // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n        // when _markInitialized is called.\n        if (this._isInitialized) {\n          this._notifySubscriber(subscriber);\n        } else {\n          this._pendingSubscribers.push(subscriber);\n        }\n      });\n    }\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n\n\n    _markInitialized() {\n      if (this._isInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('This directive has already been marked as initialized and ' + 'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers.forEach(this._notifySubscriber);\n\n      this._pendingSubscribers = null;\n    }\n    /** Emits and completes the subscriber stream (should only emit once). */\n\n\n    _notifySubscriber(subscriber) {\n      subscriber.next();\n      subscriber.complete();\n    }\n\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\n\n\nconst MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_DATE_LOCALE_FACTORY() {\n  return inject(LOCALE_ID);\n}\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\n\n\nclass DateAdapter {\n  constructor() {\n    this._localeChanges = new Subject();\n    /** A stream that emits when the locale changes. */\n\n    this.localeChanges = this._localeChanges;\n  }\n  /**\n   * Given a potential date object, returns that same date object if it is\n   * a valid date, or `null` if it's not a valid date.\n   * @param obj The object to check.\n   * @returns A date or `null`.\n   */\n\n\n  getValidDateOrNull(obj) {\n    return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\n  }\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n\n\n  deserialize(value) {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n\n    return this.invalid();\n  }\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n\n\n  setLocale(locale) {\n    this.locale = locale;\n\n    this._localeChanges.next();\n  }\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n\n\n  compareDate(first, second) {\n    return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);\n  }\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n\n\n  sameDate(first, second) {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n\n      return firstValid == secondValid;\n    }\n\n    return first == second;\n  }\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n\n\n  clampDate(date, min, max) {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n\n    return date;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(mmalerba): Remove when we no longer support safari 9.\n\n/** Whether the browser supports the Intl API. */\n\nlet SUPPORTS_INTL_API; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\n\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch (_a) {\n  SUPPORTS_INTL_API = false;\n}\n/** The default month names to use if Intl API is not available. */\n\n\nconst DEFAULT_MONTH_NAMES = {\n  'long': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\nconst ɵ0 = i => String(i + 1);\n/** The default date names to use if Intl API is not available. */\n\n\nconst DEFAULT_DATE_NAMES = range(31, ɵ0);\n/** The default day of the week names to use if Intl API is not available. */\n\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\n\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/** Creates an array and fills it with values. */\n\nfunction range(length, valueFunction) {\n  const valuesArray = Array(length);\n\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n\n  return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n\n\nclass NativeDateAdapter extends DateAdapter {\n  constructor(matDateLocale, platform) {\n    super();\n    /**\n     * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n     * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n     * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n     * will produce `'8/13/1800'`.\n     *\n     * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n     * getting the string representation of a Date object from its utc representation. We're keeping\n     * it here for sometime, just for precaution, in case we decide to revert some of these changes\n     * though.\n     */\n\n    this.useUtcForDisplay = true;\n    super.setLocale(matDateLocale); // IE does its own time zone correction, so we disable this on IE.\n\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date) {\n    return date.getFullYear();\n  }\n\n  getMonth(date) {\n    return date.getMonth();\n  }\n\n  getDate(date) {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date) {\n    return date.getDay();\n  }\n\n  getMonthNames(style) {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        month: style,\n        timeZone: 'utc'\n      });\n      return range(12, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames() {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        day: 'numeric',\n        timeZone: 'utc'\n      });\n      return range(31, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style) {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        weekday: style,\n        timeZone: 'utc'\n      });\n      return range(7, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date) {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        year: 'numeric',\n        timeZone: 'utc'\n      });\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek() {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date) {\n    return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date) {\n    return new Date(date.getTime());\n  }\n\n  createDate(year, month, date) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Check for invalid month and date (except upper bound on date which we have to check after\n      // creating the Date).\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n\n    let result = this._createDateWithOverflow(year, month, date); // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n\n\n    if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today() {\n    return new Date();\n  }\n\n  parse(value) {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date, displayFormat) {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = Object.assign(Object.assign({}, displayFormat), {\n        timeZone: 'utc'\n      });\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date, years) {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date, months) {\n    let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date)); // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n\n\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date, days) {\n    return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date) {\n    return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');\n  }\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n\n\n  deserialize(value) {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      } // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n\n\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj) {\n    return obj instanceof Date;\n  }\n\n  isValid(date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid() {\n    return new Date(NaN);\n  }\n  /** Creates a date but allows the month and date to overflow. */\n\n\n  _createDateWithOverflow(year, month, date) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setFullYear` and `setHours` instead.\n    const d = new Date();\n    d.setFullYear(year, month, date);\n    d.setHours(0, 0, 0, 0);\n    return d;\n  }\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n\n\n  _2digit(n) {\n    return ('00' + n).slice(-2);\n  }\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n\n\n  _stripDirectionalityCharacters(str) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n\n\n  _format(dtf, date) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n    const d = new Date();\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    return dtf.format(d);\n  }\n\n}\n\nNativeDateAdapter.decorators = [{\n  type: Injectable\n}];\n\nNativeDateAdapter.ctorParameters = () => [{\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DATE_LOCALE]\n  }]\n}, {\n  type: Platform\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MAT_NATIVE_DATE_FORMATS = {\n  parse: {\n    dateInput: null\n  },\n  display: {\n    dateInput: {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    },\n    monthYearLabel: {\n      year: 'numeric',\n      month: 'short'\n    },\n    dateA11yLabel: {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    },\n    monthYearA11yLabel: {\n      year: 'numeric',\n      month: 'long'\n    }\n  }\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass NativeDateModule {}\n\nNativeDateModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [PlatformModule],\n    providers: [{\n      provide: DateAdapter,\n      useClass: NativeDateAdapter\n    }]\n  }]\n}];\nconst ɵ0$1 = MAT_NATIVE_DATE_FORMATS;\n\nclass MatNativeDateModule {}\n\nMatNativeDateModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [NativeDateModule],\n    providers: [{\n      provide: MAT_DATE_FORMATS,\n      useValue: ɵ0$1\n    }]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n\nclass ShowOnDirtyErrorStateMatcher {\n  isErrorState(control, form) {\n    return !!(control && control.invalid && (control.dirty || form && form.submitted));\n  }\n\n}\n\nShowOnDirtyErrorStateMatcher.decorators = [{\n  type: Injectable\n}];\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n\nclass ErrorStateMatcher {\n  isErrorState(control, form) {\n    return !!(control && control.invalid && (control.touched || form && form.submitted));\n  }\n\n}\n\nErrorStateMatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function ErrorStateMatcher_Factory() {\n    return new ErrorStateMatcher();\n  },\n  token: ErrorStateMatcher,\n  providedIn: \"root\"\n});\nErrorStateMatcher.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n\nclass MatLine {}\n\nMatLine.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[mat-line], [matLine]',\n    host: {\n      'class': 'mat-line'\n    }\n  }]\n}];\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\n\nfunction setLines(lines, element, prefix = 'mat') {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({\n    length\n  }) => {\n    setClass(element, `${prefix}-2-line`, false);\n    setClass(element, `${prefix}-3-line`, false);\n    setClass(element, `${prefix}-multi-line`, false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `${prefix}-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `${prefix}-multi-line`, true);\n    }\n  });\n}\n/** Adds or removes a class from an element. */\n\n\nfunction setClass(element, className, isAdd) {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\nclass MatLineModule {}\n\nMatLineModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatCommonModule],\n    exports: [MatLine, MatCommonModule],\n    declarations: [MatLine]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to a previously launched ripple element.\n */\n\nclass RippleRef {\n  constructor(_renderer,\n  /** Reference to the ripple HTML element. */\n  element,\n  /** Ripple configuration used for the ripple. */\n  config) {\n    this._renderer = _renderer;\n    this.element = element;\n    this.config = config;\n    /** Current state of the ripple. */\n\n    this.state = 3\n    /* HIDDEN */\n    ;\n  }\n  /** Fades out the ripple element. */\n\n\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n\n}\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\n\n\nconst defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\n\nconst ignoreMouseEventsTimeout = 800;\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\n\nconst passiveEventOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/** Events that signal that the pointer is down. */\n\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n/** Events that signal that the pointer is up. */\n\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\n\nclass RippleRenderer {\n  constructor(_target, _ngZone, elementOrElementRef, platform) {\n    this._target = _target;\n    this._ngZone = _ngZone;\n    /** Whether the pointer is currently down or not. */\n\n    this._isPointerDown = false;\n    /** Set of currently active ripple references. */\n\n    this._activeRipples = new Set();\n    /** Whether pointer-up event listeners have been registered. */\n\n    this._pointerUpEventsRegistered = false; // Only do anything if we're on the browser.\n\n    if (platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n    }\n  }\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n\n\n  fadeInRipple(x, y, config = {}) {\n    const containerRect = this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect();\n\n    const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), config.animation);\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`; // If a custom color has been specified, set it as inline style. If no color is\n    // set, the default color will be applied through the ripple theme styles.\n\n    if (config.color != null) {\n      ripple.style.backgroundColor = config.color;\n    }\n\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple); // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n\n\n    enforceStyleRecalculation(ripple);\n    ripple.style.transform = 'scale(1)'; // Exposed reference to the ripple that will be returned.\n\n    const rippleRef = new RippleRef(this, ripple, config);\n    rippleRef.state = 0\n    /* FADING_IN */\n    ; // Add the ripple reference to the list of all active ripples.\n\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    } // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n\n\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n      rippleRef.state = 1\n      /* VISIBLE */\n      ; // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n  /** Fades out a ripple reference. */\n\n\n  fadeOutRipple(rippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    } // Clear out the cached bounding rect if we have no more ripples.\n\n\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    } // For ripples that are not active anymore, don't re-run the fade-out animation.\n\n\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), rippleRef.config.animation);\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = 2\n    /* FADING_OUT */\n    ; // Once the ripple faded out, the ripple can be safely removed from the DOM.\n\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = 3\n      /* HIDDEN */\n      ;\n      rippleEl.parentNode.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n  /** Fades out all currently active ripples. */\n\n\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n  /** Fades out all currently active non-persistent ripples. */\n\n\n  fadeOutAllNonPersistent() {\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent) {\n        ripple.fadeOut();\n      }\n    });\n  }\n  /** Sets up the trigger event listeners */\n\n\n  setupTriggerEvents(elementOrElementRef) {\n    const element = coerceElement(elementOrElementRef);\n\n    if (!element || element === this._triggerElement) {\n      return;\n    } // Remove all previously registered event listeners from the trigger element.\n\n\n    this._removeTriggerEvents();\n\n    this._triggerElement = element;\n\n    this._registerEvents(pointerDownEvents);\n  }\n  /**\n   * Handles all registered events.\n   * @docs-private\n   */\n\n\n  handleEvent(event) {\n    if (event.type === 'mousedown') {\n      this._onMousedown(event);\n    } else if (event.type === 'touchstart') {\n      this._onTouchStart(event);\n    } else {\n      this._onPointerUp();\n    } // If pointer-up events haven't been registered yet, do so now.\n    // We do this on-demand in order to reduce the total number of event listeners\n    // registered by the ripples, which speeds up the rendering time for large UIs.\n\n\n    if (!this._pointerUpEventsRegistered) {\n      this._registerEvents(pointerUpEvents);\n\n      this._pointerUpEventsRegistered = true;\n    }\n  }\n  /** Function being called whenever the trigger is being pressed using mouse. */\n\n\n  _onMousedown(event) {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n  /** Function being called whenever the trigger is being pressed using touch. */\n\n\n  _onTouchStart(event) {\n    if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true; // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n  /** Function being called whenever the trigger is being released. */\n\n\n  _onPointerUp() {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false; // Fade-out all ripples that are visible and not persistent.\n\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === 1\n      /* VISIBLE */\n      || ripple.config.terminateOnPointerUp && ripple.state === 0\n      /* FADING_IN */\n      ;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n\n\n  _runTimeoutOutsideZone(fn, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n  /** Registers event listeners for a given list of events. */\n\n\n  _registerEvents(eventTypes) {\n    this._ngZone.runOutsideAngular(() => {\n      eventTypes.forEach(type => {\n        this._triggerElement.addEventListener(type, this, passiveEventOptions);\n      });\n    });\n  }\n  /** Removes previously registered event listeners from the trigger element. */\n\n\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      pointerDownEvents.forEach(type => {\n        this._triggerElement.removeEventListener(type, this, passiveEventOptions);\n      });\n\n      if (this._pointerUpEventsRegistered) {\n        pointerUpEvents.forEach(type => {\n          this._triggerElement.removeEventListener(type, this, passiveEventOptions);\n        });\n      }\n    }\n  }\n\n}\n/** Enforces a style recalculation of a DOM element by computing its styles. */\n\n\nfunction enforceStyleRecalculation(element) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\n\n\nfunction distanceToFurthestCorner(x, y, rect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to specify the global ripple options. */\n\n\nconst MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken('mat-ripple-global-options');\n\nclass MatRipple {\n  constructor(_elementRef, ngZone, platform, globalOptions, _animationMode) {\n    this._elementRef = _elementRef;\n    this._animationMode = _animationMode;\n    /**\n     * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n     * will be the distance from the center of the ripple to the furthest corner of the host element's\n     * bounding rectangle.\n     */\n\n    this.radius = 0;\n    this._disabled = false;\n    /** Whether ripple directive is initialized and the input bindings are set. */\n\n    this._isInitialized = false;\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    if (value) {\n      this.fadeOutAllNonPersistent();\n    }\n\n    this._disabled = value;\n\n    this._setupTriggerEventsIfEnabled();\n  }\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n\n\n  get trigger() {\n    return this._trigger || this._elementRef.nativeElement;\n  }\n\n  set trigger(trigger) {\n    this._trigger = trigger;\n\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n  /** Fades out all currently showing ripple elements. */\n\n\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n  /** Fades out all currently showing non-persistent ripple elements. */\n\n\n  fadeOutAllNonPersistent() {\n    this._rippleRenderer.fadeOutAllNonPersistent();\n  }\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n\n\n  get rippleConfig() {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: Object.assign(Object.assign(Object.assign({}, this._globalOptions.animation), this._animationMode === 'NoopAnimations' ? {\n        enterDuration: 0,\n        exitDuration: 0\n      } : {}), this.animation),\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp\n    };\n  }\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n\n\n  get rippleDisabled() {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n  /** Sets up the trigger event listeners if ripples are enabled. */\n\n\n  _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n\n\n  launch(configOrX, y = 0, config) {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign(Object.assign({}, this.rippleConfig), config));\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, Object.assign(Object.assign({}, this.rippleConfig), configOrX));\n    }\n  }\n\n}\n\nMatRipple.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[mat-ripple], [matRipple]',\n    exportAs: 'matRipple',\n    host: {\n      'class': 'mat-ripple',\n      '[class.mat-ripple-unbounded]': 'unbounded'\n    }\n  }]\n}];\n\nMatRipple.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\nMatRipple.propDecorators = {\n  color: [{\n    type: Input,\n    args: ['matRippleColor']\n  }],\n  unbounded: [{\n    type: Input,\n    args: ['matRippleUnbounded']\n  }],\n  centered: [{\n    type: Input,\n    args: ['matRippleCentered']\n  }],\n  radius: [{\n    type: Input,\n    args: ['matRippleRadius']\n  }],\n  animation: [{\n    type: Input,\n    args: ['matRippleAnimation']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['matRippleDisabled']\n  }],\n  trigger: [{\n    type: Input,\n    args: ['matRippleTrigger']\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass MatRippleModule {}\n\nMatRippleModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatCommonModule, PlatformModule],\n    exports: [MatRipple, MatCommonModule],\n    declarations: [MatRipple]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n\nclass MatPseudoCheckbox {\n  constructor(_animationMode) {\n    this._animationMode = _animationMode;\n    /** Display state of the checkbox. */\n\n    this.state = 'unchecked';\n    /** Whether the checkbox is disabled. */\n\n    this.disabled = false;\n  }\n\n}\n\nMatPseudoCheckbox.decorators = [{\n  type: Component,\n  args: [{\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mat-pseudo-checkbox',\n    template: '',\n    host: {\n      'class': 'mat-pseudo-checkbox',\n      '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n      '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n      '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n    },\n    styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\\n\"]\n  }]\n}];\n\nMatPseudoCheckbox.ctorParameters = () => [{\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\nMatPseudoCheckbox.propDecorators = {\n  state: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass MatPseudoCheckboxModule {}\n\nMatPseudoCheckboxModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatCommonModule],\n    exports: [MatPseudoCheckbox],\n    declarations: [MatPseudoCheckbox]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide the parent component to options.\n */\n\nconst MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n// Boilerplate for applying mixins to MatOptgroup.\n\n/** @docs-private */\n\nclass MatOptgroupBase {}\n\nconst _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase); // Counter for unique group ids.\n\n\nlet _uniqueOptgroupIdCounter = 0;\n\nclass _MatOptgroupBase extends _MatOptgroupMixinBase {\n  constructor(parent) {\n    var _a;\n\n    super();\n    /** Unique id for the underlying label. */\n\n    this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n    this._inert = (_a = parent === null || parent === void 0 ? void 0 : parent.inertGroups) !== null && _a !== void 0 ? _a : false;\n  }\n\n}\n\n_MatOptgroupBase.decorators = [{\n  type: Directive\n}];\n\n_MatOptgroupBase.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_OPTION_PARENT_COMPONENT]\n  }, {\n    type: Optional\n  }]\n}];\n\n_MatOptgroupBase.propDecorators = {\n  label: [{\n    type: Input\n  }]\n};\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\n\nconst MAT_OPTGROUP = new InjectionToken('MatOptgroup');\n/**\n * Component that is used to group instances of `mat-option`.\n */\n\nclass MatOptgroup extends _MatOptgroupBase {}\n\nMatOptgroup.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-optgroup',\n    exportAs: 'matOptgroup',\n    template: \"<span class=\\\"mat-optgroup-label\\\" aria-hidden=\\\"true\\\" [id]=\\\"_labelId\\\">{{ label }} <ng-content></ng-content></span>\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n      'class': 'mat-optgroup',\n      '[attr.role]': '_inert ? null : \"group\"',\n      '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n      '[attr.aria-labelledby]': '_inert ? null : _labelId',\n      '[class.mat-optgroup-disabled]': 'disabled'\n    },\n    providers: [{\n      provide: MAT_OPTGROUP,\n      useExisting: MatOptgroup\n    }],\n    styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\\n\"]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\n\nlet _uniqueIdCounter = 0;\n/** Event object emitted by MatOption when selected or deselected. */\n\nclass MatOptionSelectionChange {\n  constructor(\n  /** Reference to the option that emitted the event. */\n  source,\n  /** Whether the change in the option's value was a result of a user action. */\n  isUserInput = false) {\n    this.source = source;\n    this.isUserInput = isUserInput;\n  }\n\n}\n\nclass _MatOptionBase {\n  constructor(_element, _changeDetectorRef, _parent, group) {\n    this._element = _element;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._parent = _parent;\n    this.group = group;\n    this._selected = false;\n    this._active = false;\n    this._disabled = false;\n    this._mostRecentViewValue = '';\n    /** The unique ID of the option. */\n\n    this.id = `mat-option-${_uniqueIdCounter++}`;\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onSelectionChange = new EventEmitter();\n    /** Emits when the state of the option changes and any parents have to be notified. */\n\n    this._stateChanges = new Subject();\n  }\n  /** Whether the wrapping component is in multiple selection mode. */\n\n\n  get multiple() {\n    return this._parent && this._parent.multiple;\n  }\n  /** Whether or not the option is currently selected. */\n\n\n  get selected() {\n    return this._selected;\n  }\n  /** Whether the option is disabled. */\n\n\n  get disabled() {\n    return this.group && this.group.disabled || this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Whether ripples for the option are disabled. */\n\n\n  get disableRipple() {\n    return this._parent && this._parent.disableRipple;\n  }\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n\n\n  get active() {\n    return this._active;\n  }\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n\n\n  get viewValue() {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n  /** Selects the option. */\n\n\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n\n      this._changeDetectorRef.markForCheck();\n\n      this._emitSelectionChangeEvent();\n    }\n  }\n  /** Deselects the option. */\n\n\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n\n      this._changeDetectorRef.markForCheck();\n\n      this._emitSelectionChangeEvent();\n    }\n  }\n  /** Sets focus onto this option. */\n\n\n  focus(_origin, options) {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n\n\n  setActiveStyles() {\n    if (!this._active) {\n      this._active = true;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n\n\n  setInactiveStyles() {\n    if (this._active) {\n      this._active = false;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Gets the label to be used when determining whether the option should be focused. */\n\n\n  getLabel() {\n    return this.viewValue;\n  }\n  /** Ensures the option is selected when activated from the keyboard. */\n\n\n  _handleKeydown(event) {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction(); // Prevent the page from scrolling down and form submits.\n\n\n      event.preventDefault();\n    }\n  }\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n\n\n  _selectViaInteraction() {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n\n      this._changeDetectorRef.markForCheck();\n\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n\n\n  _getAriaSelected() {\n    return this.selected || (this.multiple ? false : null);\n  }\n  /** Returns the correct tabindex for the option depending on disabled state. */\n\n\n  _getTabIndex() {\n    return this.disabled ? '-1' : '0';\n  }\n  /** Gets the host DOM element. */\n\n\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n  /** Emits the selection change event. */\n\n\n  _emitSelectionChangeEvent(isUserInput = false) {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n}\n\n_MatOptionBase.decorators = [{\n  type: Directive\n}];\n\n_MatOptionBase.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined\n}, {\n  type: _MatOptgroupBase\n}];\n\n_MatOptionBase.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  onSelectionChange: [{\n    type: Output\n  }]\n};\n/**\n * Single option inside of a `<mat-select>` element.\n */\n\nclass MatOption extends _MatOptionBase {\n  constructor(element, changeDetectorRef, parent, group) {\n    super(element, changeDetectorRef, parent, group);\n  }\n\n}\n\nMatOption.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-option',\n    exportAs: 'matOption',\n    host: {\n      'role': 'option',\n      '[attr.tabindex]': '_getTabIndex()',\n      '[class.mat-selected]': 'selected',\n      '[class.mat-option-multiple]': 'multiple',\n      '[class.mat-active]': 'active',\n      '[id]': 'id',\n      '[attr.aria-selected]': '_getAriaSelected()',\n      '[attr.aria-disabled]': 'disabled.toString()',\n      '[class.mat-option-disabled]': 'disabled',\n      '(click)': '_selectViaInteraction()',\n      '(keydown)': '_handleKeydown($event)',\n      'class': 'mat-option mat-focus-indicator'\n    },\n    template: \"<mat-pseudo-checkbox *ngIf=\\\"multiple\\\" class=\\\"mat-option-pseudo-checkbox\\\"\\n    [state]=\\\"selected ? 'checked' : 'unchecked'\\\" [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox>\\n\\n<span class=\\\"mat-option-text\\\"><ng-content></ng-content></span>\\n\\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\\n<span class=\\\"cdk-visually-hidden\\\" *ngIf=\\\"group && group._inert\\\">({{ group.label }})</span>\\n\\n<div class=\\\"mat-option-ripple\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"\\n     [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.cdk-high-contrast-active .mat-option[aria-disabled=true]{opacity:.5}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\\n\"]\n  }]\n}];\n\nMatOption.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_OPTION_PARENT_COMPONENT]\n  }]\n}, {\n  type: MatOptgroup,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_OPTGROUP]\n  }]\n}];\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\n\n\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\n\n\nfunction _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatOptionModule {}\n\nMatOptionModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatRippleModule, CommonModule, MatCommonModule, MatPseudoCheckboxModule],\n    exports: [MatOption, MatOptgroup],\n    declarations: [MatOption, MatOptgroup]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationCurves, AnimationDurations, DateAdapter, ErrorStateMatcher, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_NATIVE_DATE_FORMATS, MAT_OPTGROUP, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatLine, MatLineModule, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleModule, NativeDateAdapter, NativeDateModule, RippleRef, RippleRenderer, ShowOnDirtyErrorStateMatcher, VERSION, _MatOptgroupBase, _MatOptionBase, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, mixinColor, mixinDisableRipple, mixinDisabled, mixinErrorState, mixinInitialized, mixinTabIndex, setLines, ɵ0$1 as ɵ0, MATERIAL_SANITY_CHECKS_FACTORY as ɵangular_material_src_material_core_core_a };","map":{"version":3,"names":["Version","InjectionToken","isDevMode","NgModule","Optional","Inject","inject","LOCALE_ID","Injectable","ɵɵdefineInjectable","Directive","ElementRef","NgZone","Input","Component","ViewEncapsulation","ChangeDetectionStrategy","EventEmitter","ChangeDetectorRef","Output","HighContrastModeDetector","isFakeMousedownFromScreenReader","isFakeTouchstartFromScreenReader","BidiModule","VERSION","VERSION$2","DOCUMENT","CommonModule","coerceBooleanProperty","coerceNumberProperty","coerceElement","Subject","Observable","Platform","PlatformModule","normalizePassiveListenerOptions","startWith","ANIMATION_MODULE_TYPE","ENTER","SPACE","hasModifierKey","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","ACCELERATION_CURVE","SHARP_CURVE","AnimationDurations","COMPLEX","ENTERING","EXITING","VERSION$1","MATERIAL_SANITY_CHECKS_FACTORY","MATERIAL_SANITY_CHECKS","providedIn","factory","MatCommonModule","constructor","highContrastModeDetector","sanityChecks","document","_hasDoneGlobalChecks","_document","_applyBodyHighContrastModeCssClasses","_sanityChecks","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","_getWindow","win","defaultView","window","_checksAreEnabled","_isTestEnv","__karma__","jasmine","isEnabled","doctype","console","warn","isDisabled","theme","body","getComputedStyle","testElement","createElement","classList","add","appendChild","computedStyle","display","removeChild","version","full","decorators","type","args","imports","exports","ctorParameters","undefined","mixinDisabled","base","_disabled","disabled","value","mixinColor","defaultColor","color","_color","colorPalette","_elementRef","nativeElement","remove","mixinDisableRipple","Mixin","_disableRipple","disableRipple","mixinTabIndex","defaultTabIndex","_tabIndex","tabIndex","mixinErrorState","errorState","stateChanges","updateErrorState","oldState","parent","_parentFormGroup","_parentForm","matcher","errorStateMatcher","_defaultErrorStateMatcher","control","ngControl","newState","isErrorState","next","mixinInitialized","_isInitialized","_pendingSubscribers","initialized","subscriber","_notifySubscriber","push","_markInitialized","ngDevMode","Error","forEach","complete","MAT_DATE_LOCALE","MAT_DATE_LOCALE_FACTORY","DateAdapter","_localeChanges","localeChanges","getValidDateOrNull","obj","isDateInstance","isValid","deserialize","invalid","setLocale","locale","compareDate","first","second","getYear","getMonth","getDate","sameDate","firstValid","secondValid","clampDate","date","min","max","MAT_DATE_FORMATS","SUPPORTS_INTL_API","Intl","_a","DEFAULT_MONTH_NAMES","ɵ0","i","String","DEFAULT_DATE_NAMES","range","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","length","valueFunction","valuesArray","Array","NativeDateAdapter","matDateLocale","platform","useUtcForDisplay","TRIDENT","_clampDate","EDGE","getFullYear","getDayOfWeek","getDay","getMonthNames","style","dtf","DateTimeFormat","month","timeZone","_stripDirectionalityCharacters","_format","Date","getDateNames","day","getDayOfWeekNames","weekday","getYearName","year","getFirstDayOfWeek","getNumDaysInMonth","_createDateWithOverflow","clone","getTime","createDate","result","today","parse","format","displayFormat","setFullYear","Math","Object","assign","toDateString","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","isNaN","NaN","d","setHours","n","slice","str","replace","setUTCFullYear","setUTCHours","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","dateInput","monthYearLabel","dateA11yLabel","monthYearA11yLabel","NativeDateModule","providers","provide","useClass","ɵ0$1","MatNativeDateModule","useValue","ShowOnDirtyErrorStateMatcher","form","dirty","submitted","ErrorStateMatcher","touched","ɵprov","ErrorStateMatcher_Factory","token","MatLine","selector","host","setLines","lines","element","prefix","changes","pipe","subscribe","setClass","className","isAdd","MatLineModule","declarations","RippleRef","_renderer","config","state","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","passive","pointerDownEvents","pointerUpEvents","RippleRenderer","_target","_ngZone","elementOrElementRef","_isPointerDown","_activeRipples","Set","_pointerUpEventsRegistered","isBrowser","_containerElement","fadeInRipple","x","y","containerRect","_containerRect","getBoundingClientRect","animationConfig","animation","centered","left","width","top","height","radius","distanceToFurthestCorner","offsetX","offsetY","duration","ripple","backgroundColor","transitionDuration","enforceStyleRecalculation","transform","rippleRef","persistent","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","delete","size","rippleEl","opacity","parentNode","fadeOutAll","fadeOutAllNonPersistent","setupTriggerEvents","_triggerElement","_removeTriggerEvents","_registerEvents","handleEvent","event","_onMousedown","_onTouchStart","_onPointerUp","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","clientX","clientY","rippleConfig","touches","changedTouches","isVisible","terminateOnPointerUp","fn","delay","runOutsideAngular","setTimeout","eventTypes","addEventListener","removeEventListener","getPropertyValue","rect","distX","abs","right","distY","bottom","sqrt","MAT_RIPPLE_GLOBAL_OPTIONS","MatRipple","ngZone","globalOptions","_animationMode","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","trigger","_trigger","ngOnInit","ngOnDestroy","launch","configOrX","exportAs","propDecorators","unbounded","MatRippleModule","MatPseudoCheckbox","encapsulation","None","changeDetection","OnPush","template","styles","MatPseudoCheckboxModule","MAT_OPTION_PARENT_COMPONENT","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_MatOptgroupBase","_labelId","_inert","inertGroups","label","MAT_OPTGROUP","MatOptgroup","inputs","useExisting","_uniqueIdCounter","MatOptionSelectionChange","source","isUserInput","_MatOptionBase","_element","_changeDetectorRef","_parent","group","_selected","_active","_mostRecentViewValue","id","onSelectionChange","_stateChanges","multiple","selected","active","viewValue","_getHostElement","textContent","trim","select","markForCheck","_emitSelectionChangeEvent","deselect","focus","_origin","options","setActiveStyles","setInactiveStyles","getLabel","_handleKeydown","keyCode","_selectViaInteraction","preventDefault","_getAriaSelected","_getTabIndex","ngAfterViewChecked","emit","MatOption","changeDetectorRef","_countGroupLabelsBeforeOption","optionIndex","optionGroups","optionsArray","toArray","groups","groupCounter","_getOptionScrollPosition","optionOffset","optionHeight","currentScrollPosition","panelHeight","MatOptionModule","ɵangular_material_src_material_core_core_a"],"sources":["/Users/qisstpay/Documents/GitHub/prot-2/node_modules/@angular/material/fesm2015/core.js"],"sourcesContent":["import { Version, InjectionToken, isDevMode, NgModule, Optional, Inject, inject, LOCALE_ID, Injectable, ɵɵdefineInjectable, Directive, ElementRef, NgZone, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, EventEmitter, ChangeDetectorRef, Output } from '@angular/core';\nimport { HighContrastModeDetector, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { VERSION as VERSION$2 } from '@angular/cdk';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { coerceBooleanProperty, coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Subject, Observable } from 'rxjs';\nimport { Platform, PlatformModule, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Current version of Angular Material. */\nconst VERSION = new Version('11.2.13');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nclass AnimationCurves {\n}\nAnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\nAnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\nAnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\nAnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n/** @docs-private */\nclass AnimationDurations {\n}\nAnimationDurations.COMPLEX = '375ms';\nAnimationDurations.ENTERING = '225ms';\nAnimationDurations.EXITING = '195ms';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION$1 = new Version('11.2.13');\n/** @docs-private */\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\n    return true;\n}\n/** Injection token that configures whether the Material sanity checks are enabled. */\nconst MATERIAL_SANITY_CHECKS = new InjectionToken('mat-sanity-checks', {\n    providedIn: 'root',\n    factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nclass MatCommonModule {\n    constructor(highContrastModeDetector, sanityChecks, document) {\n        /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n        this._hasDoneGlobalChecks = false;\n        this._document = document;\n        // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n        // in MatCommonModule.\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n        // Note that `_sanityChecks` is typed to `any`, because AoT\n        // throws an error if we use the `SanityChecks` type directly.\n        this._sanityChecks = sanityChecks;\n        if (!this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._checkCdkVersionMatch();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const win = this._document.defaultView || window;\n        return typeof win === 'object' && win ? win : null;\n    }\n    /** Whether any sanity checks are enabled. */\n    _checksAreEnabled() {\n        // TODO(crisbeto): we can't use `ngDevMode` here yet, because ViewEngine apps might not support\n        // it. Since these checks can have performance implications and they aren't tree shakeable\n        // in their current form, we can leave the `isDevMode` check in for now.\n        // tslint:disable-next-line:ban\n        return isDevMode() && !this._isTestEnv();\n    }\n    /** Whether the code is running in tests. */\n    _isTestEnv() {\n        const window = this._getWindow();\n        return window && (window.__karma__ || window.jasmine);\n    }\n    _checkDoctypeIsDefined() {\n        const isEnabled = this._checksAreEnabled() &&\n            (this._sanityChecks === true || this._sanityChecks.doctype);\n        if (isEnabled && !this._document.doctype) {\n            console.warn('Current document does not have a doctype. This may cause ' +\n                'some Angular Material components not to behave as expected.');\n        }\n    }\n    _checkThemeIsPresent() {\n        // We need to assert that the `body` is defined, because these checks run very early\n        // and the `body` won't be defined if the consumer put their scripts in the `head`.\n        const isDisabled = !this._checksAreEnabled() ||\n            (this._sanityChecks === false || !this._sanityChecks.theme);\n        if (isDisabled || !this._document.body || typeof getComputedStyle !== 'function') {\n            return;\n        }\n        const testElement = this._document.createElement('div');\n        testElement.classList.add('mat-theme-loaded-marker');\n        this._document.body.appendChild(testElement);\n        const computedStyle = getComputedStyle(testElement);\n        // In some situations the computed style of the test element can be null. For example in\n        // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n        if (computedStyle && computedStyle.display !== 'none') {\n            console.warn('Could not find Angular Material core theme. Most Material ' +\n                'components may not work as expected. For more info refer ' +\n                'to the theming guide: https://material.angular.io/guide/theming');\n        }\n        this._document.body.removeChild(testElement);\n    }\n    /** Checks whether the material version matches the cdk version */\n    _checkCdkVersionMatch() {\n        const isEnabled = this._checksAreEnabled() &&\n            (this._sanityChecks === true || this._sanityChecks.version);\n        if (isEnabled && VERSION$1.full !== VERSION$2.full) {\n            console.warn('The Angular Material version (' + VERSION$1.full + ') does not match ' +\n                'the Angular CDK version (' + VERSION$2.full + ').\\n' +\n                'Please ensure the versions of these two packages exactly match.');\n        }\n    }\n}\nMatCommonModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BidiModule],\n                exports: [BidiModule],\n            },] }\n];\nMatCommonModule.ctorParameters = () => [\n    { type: HighContrastModeDetector },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `disabled` property. */\nfunction mixinDisabled(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._disabled = false;\n        }\n        get disabled() { return this._disabled; }\n        set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `color` property. */\nfunction mixinColor(base, defaultColor) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this.defaultColor = defaultColor;\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n        get color() { return this._color; }\n        set color(value) {\n            const colorPalette = value || this.defaultColor;\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n                }\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n                }\n                this._color = colorPalette;\n            }\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `disableRipple` property. */\nfunction mixinDisableRipple(base) {\n    class Mixin extends base {\n        constructor(...args) {\n            super(...args);\n            this._disableRipple = false;\n        }\n        /** Whether the ripple effect is disabled or not. */\n        get disableRipple() { return this._disableRipple; }\n        set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n    }\n    // Since we don't directly extend from `base` with it's original types, and we instruct\n    // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.\n    // This is a limitation in TS as abstract classes cannot be typed properly dynamically.\n    return Mixin;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `tabIndex` property. */\nfunction mixinTabIndex(base, defaultTabIndex = 0) {\n    // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,\n    // but given we `extend` it from another class, we can assume a constructor being accessible.\n    class Mixin extends base {\n        constructor(...args) {\n            super(...args);\n            this._tabIndex = defaultTabIndex;\n            this.defaultTabIndex = defaultTabIndex;\n        }\n        get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n        set tabIndex(value) {\n            // If the specified tabIndex value is null or undefined, fall back to the default value.\n            this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;\n        }\n    }\n    // Since we don't directly extend from `base` with it's original types, and we instruct\n    // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.\n    // This is a limitation in TS as abstract classes cannot be typed properly dynamically.\n    return Mixin;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nfunction mixinErrorState(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            /** Whether the component is in an error state. */\n            this.errorState = false;\n            /**\n             * Stream that emits whenever the state of the input changes such that the wrapping\n             * `MatFormField` needs to run change detection.\n             */\n            this.stateChanges = new Subject();\n        }\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control : null;\n            const newState = matcher.isErrorState(control, parent);\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nfunction mixinInitialized(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            /** Whether this directive has been marked as initialized. */\n            this._isInitialized = false;\n            /**\n             * List of subscribers that subscribed before the directive was initialized. Should be notified\n             * during _markInitialized. Set to null after pending subscribers are notified, and should\n             * not expect to be populated after.\n             */\n            this._pendingSubscribers = [];\n            /**\n             * Observable stream that emits when the directive initializes. If already initialized, the\n             * subscriber is stored to be notified once _markInitialized is called.\n             */\n            this.initialized = new Observable(subscriber => {\n                // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n                // when _markInitialized is called.\n                if (this._isInitialized) {\n                    this._notifySubscriber(subscriber);\n                }\n                else {\n                    this._pendingSubscribers.push(subscriber);\n                }\n            });\n        }\n        /**\n         * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n         * of ngOnInit.\n         * @docs-private\n         */\n        _markInitialized() {\n            if (this._isInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('This directive has already been marked as initialized and ' +\n                    'should not be called twice.');\n            }\n            this._isInitialized = true;\n            this._pendingSubscribers.forEach(this._notifySubscriber);\n            this._pendingSubscribers = null;\n        }\n        /** Emits and completes the subscriber stream (should only emit once). */\n        _notifySubscriber(subscriber) {\n            subscriber.next();\n            subscriber.complete();\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** InjectionToken for datepicker that can be used to override default locale code. */\nconst MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {\n    providedIn: 'root',\n    factory: MAT_DATE_LOCALE_FACTORY,\n});\n/** @docs-private */\nfunction MAT_DATE_LOCALE_FACTORY() {\n    return inject(LOCALE_ID);\n}\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nclass DateAdapter {\n    constructor() {\n        this._localeChanges = new Subject();\n        /** A stream that emits when the locale changes. */\n        this.localeChanges = this._localeChanges;\n    }\n    /**\n     * Given a potential date object, returns that same date object if it is\n     * a valid date, or `null` if it's not a valid date.\n     * @param obj The object to check.\n     * @returns A date or `null`.\n     */\n    getValidDateOrNull(obj) {\n        return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\n    }\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param value The value to be deserialized into a date object.\n     * @returns The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n    deserialize(value) {\n        if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n            return value;\n        }\n        return this.invalid();\n    }\n    /**\n     * Sets the locale used for all dates.\n     * @param locale The new locale.\n     */\n    setLocale(locale) {\n        this.locale = locale;\n        this._localeChanges.next();\n    }\n    /**\n     * Compares two dates.\n     * @param first The first date to compare.\n     * @param second The second date to compare.\n     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    compareDate(first, second) {\n        return this.getYear(first) - this.getYear(second) ||\n            this.getMonth(first) - this.getMonth(second) ||\n            this.getDate(first) - this.getDate(second);\n    }\n    /**\n     * Checks if two dates are equal.\n     * @param first The first date to check.\n     * @param second The second date to check.\n     * @returns Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameDate(first, second) {\n        if (first && second) {\n            let firstValid = this.isValid(first);\n            let secondValid = this.isValid(second);\n            if (firstValid && secondValid) {\n                return !this.compareDate(first, second);\n            }\n            return firstValid == secondValid;\n        }\n        return first == second;\n    }\n    /**\n     * Clamp the given date between min and max dates.\n     * @param date The date to clamp.\n     * @param min The minimum value to allow. If null or omitted no min is enforced.\n     * @param max The maximum value to allow. If null or omitted no max is enforced.\n     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    clampDate(date, min, max) {\n        if (min && this.compareDate(date, min) < 0) {\n            return min;\n        }\n        if (max && this.compareDate(date, max) > 0) {\n            return max;\n        }\n        return date;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    SUPPORTS_INTL_API = typeof Intl != 'undefined';\n}\ncatch (_a) {\n    SUPPORTS_INTL_API = false;\n}\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n    'long': [\n        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n        'October', 'November', 'December'\n    ],\n    'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\nconst ɵ0 = i => String(i + 1);\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, ɵ0);\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n    'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nclass NativeDateAdapter extends DateAdapter {\n    constructor(matDateLocale, platform) {\n        super();\n        /**\n         * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n         * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n         * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n         * will produce `'8/13/1800'`.\n         *\n         * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n         * getting the string representation of a Date object from its utc representation. We're keeping\n         * it here for sometime, just for precaution, in case we decide to revert some of these changes\n         * though.\n         */\n        this.useUtcForDisplay = true;\n        super.setLocale(matDateLocale);\n        // IE does its own time zone correction, so we disable this on IE.\n        this.useUtcForDisplay = !platform.TRIDENT;\n        this._clampDate = platform.TRIDENT || platform.EDGE;\n    }\n    getYear(date) {\n        return date.getFullYear();\n    }\n    getMonth(date) {\n        return date.getMonth();\n    }\n    getDate(date) {\n        return date.getDate();\n    }\n    getDayOfWeek(date) {\n        return date.getDay();\n    }\n    getMonthNames(style) {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\n            return range(12, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n        }\n        return DEFAULT_MONTH_NAMES[style];\n    }\n    getDateNames() {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\n            return range(31, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n        }\n        return DEFAULT_DATE_NAMES;\n    }\n    getDayOfWeekNames(style) {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\n            return range(7, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n        }\n        return DEFAULT_DAY_OF_WEEK_NAMES[style];\n    }\n    getYearName(date) {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\n        }\n        return String(this.getYear(date));\n    }\n    getFirstDayOfWeek() {\n        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n        return 0;\n    }\n    getNumDaysInMonth(date) {\n        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    }\n    clone(date) {\n        return new Date(date.getTime());\n    }\n    createDate(year, month, date) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Check for invalid month and date (except upper bound on date which we have to check after\n            // creating the Date).\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n        }\n        let result = this._createDateWithOverflow(year, month, date);\n        // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n        if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return new Date();\n    }\n    parse(value) {\n        // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n        // parameters.\n        if (typeof value == 'number') {\n            return new Date(value);\n        }\n        return value ? new Date(Date.parse(value)) : null;\n    }\n    format(date, displayFormat) {\n        if (!this.isValid(date)) {\n            throw Error('NativeDateAdapter: Cannot format invalid date.');\n        }\n        if (SUPPORTS_INTL_API) {\n            // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n            // if we attempt to format a date whose year is less than 1 or greater than 9999.\n            if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n                date = this.clone(date);\n                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n            }\n            displayFormat = Object.assign(Object.assign({}, displayFormat), { timeZone: 'utc' });\n            const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\n        }\n        return this._stripDirectionalityCharacters(date.toDateString());\n    }\n    addCalendarYears(date, years) {\n        return this.addCalendarMonths(date, years * 12);\n    }\n    addCalendarMonths(date, months) {\n        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n        // It's possible to wind up in the wrong month if the original month has more days than the new\n        // month. In this case we want to go to the last day of the desired month.\n        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n        // guarantee this.\n        if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n        }\n        return newDate;\n    }\n    addCalendarDays(date, days) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n    }\n    toIso8601(date) {\n        return [\n            date.getUTCFullYear(),\n            this._2digit(date.getUTCMonth() + 1),\n            this._2digit(date.getUTCDate())\n        ].join('-');\n    }\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value) {\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n            // string is the right format first.\n            if (ISO_8601_REGEX.test(value)) {\n                let date = new Date(value);\n                if (this.isValid(date)) {\n                    return date;\n                }\n            }\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return obj instanceof Date;\n    }\n    isValid(date) {\n        return !isNaN(date.getTime());\n    }\n    invalid() {\n        return new Date(NaN);\n    }\n    /** Creates a date but allows the month and date to overflow. */\n    _createDateWithOverflow(year, month, date) {\n        // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n        // To work around this we use `setFullYear` and `setHours` instead.\n        const d = new Date();\n        d.setFullYear(year, month, date);\n        d.setHours(0, 0, 0, 0);\n        return d;\n    }\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    _2digit(n) {\n        return ('00' + n).slice(-2);\n    }\n    /**\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n     * other browsers do not. We remove them to make output consistent and because they interfere with\n     * date parsing.\n     * @param str The string to strip direction characters from.\n     * @returns The stripped string.\n     */\n    _stripDirectionalityCharacters(str) {\n        return str.replace(/[\\u200e\\u200f]/g, '');\n    }\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    _format(dtf, date) {\n        // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n        // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n        const d = new Date();\n        d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n        d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n        return dtf.format(d);\n    }\n}\nNativeDateAdapter.decorators = [\n    { type: Injectable }\n];\nNativeDateAdapter.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },\n    { type: Platform }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_NATIVE_DATE_FORMATS = {\n    parse: {\n        dateInput: null,\n    },\n    display: {\n        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },\n        monthYearLabel: { year: 'numeric', month: 'short' },\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\n    }\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass NativeDateModule {\n}\nNativeDateModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [PlatformModule],\n                providers: [\n                    { provide: DateAdapter, useClass: NativeDateAdapter },\n                ],\n            },] }\n];\nconst ɵ0$1 = MAT_NATIVE_DATE_FORMATS;\nclass MatNativeDateModule {\n}\nMatNativeDateModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [NativeDateModule],\n                providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\nShowOnDirtyErrorStateMatcher.decorators = [\n    { type: Injectable }\n];\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\nErrorStateMatcher.ɵprov = ɵɵdefineInjectable({ factory: function ErrorStateMatcher_Factory() { return new ErrorStateMatcher(); }, token: ErrorStateMatcher, providedIn: \"root\" });\nErrorStateMatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nclass MatLine {\n}\nMatLine.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-line], [matLine]',\n                host: { 'class': 'mat-line' }\n            },] }\n];\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nfunction setLines(lines, element, prefix = 'mat') {\n    // Note: doesn't need to unsubscribe, because `changes`\n    // gets completed by Angular when the view is destroyed.\n    lines.changes.pipe(startWith(lines)).subscribe(({ length }) => {\n        setClass(element, `${prefix}-2-line`, false);\n        setClass(element, `${prefix}-3-line`, false);\n        setClass(element, `${prefix}-multi-line`, false);\n        if (length === 2 || length === 3) {\n            setClass(element, `${prefix}-${length}-line`, true);\n        }\n        else if (length > 3) {\n            setClass(element, `${prefix}-multi-line`, true);\n        }\n    });\n}\n/** Adds or removes a class from an element. */\nfunction setClass(element, className, isAdd) {\n    const classList = element.nativeElement.classList;\n    isAdd ? classList.add(className) : classList.remove(className);\n}\nclass MatLineModule {\n}\nMatLineModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [MatLine, MatCommonModule],\n                declarations: [MatLine],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a previously launched ripple element.\n */\nclass RippleRef {\n    constructor(_renderer, \n    /** Reference to the ripple HTML element. */\n    element, \n    /** Ripple configuration used for the ripple. */\n    config) {\n        this._renderer = _renderer;\n        this.element = element;\n        this.config = config;\n        /** Current state of the ripple. */\n        this.state = 3 /* HIDDEN */;\n    }\n    /** Fades out the ripple element. */\n    fadeOut() {\n        this._renderer.fadeOutRipple(this);\n    }\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nconst defaultRippleAnimationConfig = {\n    enterDuration: 450,\n    exitDuration: 400\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({ passive: true });\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nclass RippleRenderer {\n    constructor(_target, _ngZone, elementOrElementRef, platform) {\n        this._target = _target;\n        this._ngZone = _ngZone;\n        /** Whether the pointer is currently down or not. */\n        this._isPointerDown = false;\n        /** Set of currently active ripple references. */\n        this._activeRipples = new Set();\n        /** Whether pointer-up event listeners have been registered. */\n        this._pointerUpEventsRegistered = false;\n        // Only do anything if we're on the browser.\n        if (platform.isBrowser) {\n            this._containerElement = coerceElement(elementOrElementRef);\n        }\n    }\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param x Coordinate within the element, along the X axis at which to start the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n     * @param config Extra ripple options.\n     */\n    fadeInRipple(x, y, config = {}) {\n        const containerRect = this._containerRect =\n            this._containerRect || this._containerElement.getBoundingClientRect();\n        const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), config.animation);\n        if (config.centered) {\n            x = containerRect.left + containerRect.width / 2;\n            y = containerRect.top + containerRect.height / 2;\n        }\n        const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n        const offsetX = x - containerRect.left;\n        const offsetY = y - containerRect.top;\n        const duration = animationConfig.enterDuration;\n        const ripple = document.createElement('div');\n        ripple.classList.add('mat-ripple-element');\n        ripple.style.left = `${offsetX - radius}px`;\n        ripple.style.top = `${offsetY - radius}px`;\n        ripple.style.height = `${radius * 2}px`;\n        ripple.style.width = `${radius * 2}px`;\n        // If a custom color has been specified, set it as inline style. If no color is\n        // set, the default color will be applied through the ripple theme styles.\n        if (config.color != null) {\n            ripple.style.backgroundColor = config.color;\n        }\n        ripple.style.transitionDuration = `${duration}ms`;\n        this._containerElement.appendChild(ripple);\n        // By default the browser does not recalculate the styles of dynamically created\n        // ripple elements. This is critical because then the `scale` would not animate properly.\n        enforceStyleRecalculation(ripple);\n        ripple.style.transform = 'scale(1)';\n        // Exposed reference to the ripple that will be returned.\n        const rippleRef = new RippleRef(this, ripple, config);\n        rippleRef.state = 0 /* FADING_IN */;\n        // Add the ripple reference to the list of all active ripples.\n        this._activeRipples.add(rippleRef);\n        if (!config.persistent) {\n            this._mostRecentTransientRipple = rippleRef;\n        }\n        // Wait for the ripple element to be completely faded in.\n        // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n        this._runTimeoutOutsideZone(() => {\n            const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n            rippleRef.state = 1 /* VISIBLE */;\n            // When the timer runs out while the user has kept their pointer down, we want to\n            // keep only the persistent ripples and the latest transient ripple. We do this,\n            // because we don't want stacked transient ripples to appear after their enter\n            // animation has finished.\n            if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n                rippleRef.fadeOut();\n            }\n        }, duration);\n        return rippleRef;\n    }\n    /** Fades out a ripple reference. */\n    fadeOutRipple(rippleRef) {\n        const wasActive = this._activeRipples.delete(rippleRef);\n        if (rippleRef === this._mostRecentTransientRipple) {\n            this._mostRecentTransientRipple = null;\n        }\n        // Clear out the cached bounding rect if we have no more ripples.\n        if (!this._activeRipples.size) {\n            this._containerRect = null;\n        }\n        // For ripples that are not active anymore, don't re-run the fade-out animation.\n        if (!wasActive) {\n            return;\n        }\n        const rippleEl = rippleRef.element;\n        const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), rippleRef.config.animation);\n        rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n        rippleEl.style.opacity = '0';\n        rippleRef.state = 2 /* FADING_OUT */;\n        // Once the ripple faded out, the ripple can be safely removed from the DOM.\n        this._runTimeoutOutsideZone(() => {\n            rippleRef.state = 3 /* HIDDEN */;\n            rippleEl.parentNode.removeChild(rippleEl);\n        }, animationConfig.exitDuration);\n    }\n    /** Fades out all currently active ripples. */\n    fadeOutAll() {\n        this._activeRipples.forEach(ripple => ripple.fadeOut());\n    }\n    /** Fades out all currently active non-persistent ripples. */\n    fadeOutAllNonPersistent() {\n        this._activeRipples.forEach(ripple => {\n            if (!ripple.config.persistent) {\n                ripple.fadeOut();\n            }\n        });\n    }\n    /** Sets up the trigger event listeners */\n    setupTriggerEvents(elementOrElementRef) {\n        const element = coerceElement(elementOrElementRef);\n        if (!element || element === this._triggerElement) {\n            return;\n        }\n        // Remove all previously registered event listeners from the trigger element.\n        this._removeTriggerEvents();\n        this._triggerElement = element;\n        this._registerEvents(pointerDownEvents);\n    }\n    /**\n     * Handles all registered events.\n     * @docs-private\n     */\n    handleEvent(event) {\n        if (event.type === 'mousedown') {\n            this._onMousedown(event);\n        }\n        else if (event.type === 'touchstart') {\n            this._onTouchStart(event);\n        }\n        else {\n            this._onPointerUp();\n        }\n        // If pointer-up events haven't been registered yet, do so now.\n        // We do this on-demand in order to reduce the total number of event listeners\n        // registered by the ripples, which speeds up the rendering time for large UIs.\n        if (!this._pointerUpEventsRegistered) {\n            this._registerEvents(pointerUpEvents);\n            this._pointerUpEventsRegistered = true;\n        }\n    }\n    /** Function being called whenever the trigger is being pressed using mouse. */\n    _onMousedown(event) {\n        // Screen readers will fire fake mouse events for space/enter. Skip launching a\n        // ripple in this case for consistency with the non-screen-reader experience.\n        const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n        const isSyntheticEvent = this._lastTouchStartEvent &&\n            Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n        if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n            this._isPointerDown = true;\n            this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n        }\n    }\n    /** Function being called whenever the trigger is being pressed using touch. */\n    _onTouchStart(event) {\n        if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n            // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n            // events will launch a second ripple if we don't ignore mouse events for a specific\n            // time after a touchstart event.\n            this._lastTouchStartEvent = Date.now();\n            this._isPointerDown = true;\n            // Use `changedTouches` so we skip any touches where the user put\n            // their finger down, but used another finger to tap the element again.\n            const touches = event.changedTouches;\n            for (let i = 0; i < touches.length; i++) {\n                this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n            }\n        }\n    }\n    /** Function being called whenever the trigger is being released. */\n    _onPointerUp() {\n        if (!this._isPointerDown) {\n            return;\n        }\n        this._isPointerDown = false;\n        // Fade-out all ripples that are visible and not persistent.\n        this._activeRipples.forEach(ripple => {\n            // By default, only ripples that are completely visible will fade out on pointer release.\n            // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n            const isVisible = ripple.state === 1 /* VISIBLE */ ||\n                ripple.config.terminateOnPointerUp && ripple.state === 0 /* FADING_IN */;\n            if (!ripple.config.persistent && isVisible) {\n                ripple.fadeOut();\n            }\n        });\n    }\n    /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n    _runTimeoutOutsideZone(fn, delay = 0) {\n        this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n    }\n    /** Registers event listeners for a given list of events. */\n    _registerEvents(eventTypes) {\n        this._ngZone.runOutsideAngular(() => {\n            eventTypes.forEach((type) => {\n                this._triggerElement.addEventListener(type, this, passiveEventOptions);\n            });\n        });\n    }\n    /** Removes previously registered event listeners from the trigger element. */\n    _removeTriggerEvents() {\n        if (this._triggerElement) {\n            pointerDownEvents.forEach((type) => {\n                this._triggerElement.removeEventListener(type, this, passiveEventOptions);\n            });\n            if (this._pointerUpEventsRegistered) {\n                pointerUpEvents.forEach((type) => {\n                    this._triggerElement.removeEventListener(type, this, passiveEventOptions);\n                });\n            }\n        }\n    }\n}\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element) {\n    // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n    // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n    const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n    const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n    return Math.sqrt(distX * distX + distY * distY);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify the global ripple options. */\nconst MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken('mat-ripple-global-options');\nclass MatRipple {\n    constructor(_elementRef, ngZone, platform, globalOptions, _animationMode) {\n        this._elementRef = _elementRef;\n        this._animationMode = _animationMode;\n        /**\n         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n         * will be the distance from the center of the ripple to the furthest corner of the host element's\n         * bounding rectangle.\n         */\n        this.radius = 0;\n        this._disabled = false;\n        /** Whether ripple directive is initialized and the input bindings are set. */\n        this._isInitialized = false;\n        this._globalOptions = globalOptions || {};\n        this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n    }\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        if (value) {\n            this.fadeOutAllNonPersistent();\n        }\n        this._disabled = value;\n        this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     */\n    get trigger() { return this._trigger || this._elementRef.nativeElement; }\n    set trigger(trigger) {\n        this._trigger = trigger;\n        this._setupTriggerEventsIfEnabled();\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n        this._setupTriggerEventsIfEnabled();\n    }\n    ngOnDestroy() {\n        this._rippleRenderer._removeTriggerEvents();\n    }\n    /** Fades out all currently showing ripple elements. */\n    fadeOutAll() {\n        this._rippleRenderer.fadeOutAll();\n    }\n    /** Fades out all currently showing non-persistent ripple elements. */\n    fadeOutAllNonPersistent() {\n        this._rippleRenderer.fadeOutAllNonPersistent();\n    }\n    /**\n     * Ripple configuration from the directive's input values.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleConfig() {\n        return {\n            centered: this.centered,\n            radius: this.radius,\n            color: this.color,\n            animation: Object.assign(Object.assign(Object.assign({}, this._globalOptions.animation), (this._animationMode === 'NoopAnimations' ? { enterDuration: 0, exitDuration: 0 } : {})), this.animation),\n            terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n        };\n    }\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleDisabled() {\n        return this.disabled || !!this._globalOptions.disabled;\n    }\n    /** Sets up the trigger event listeners if ripples are enabled. */\n    _setupTriggerEventsIfEnabled() {\n        if (!this.disabled && this._isInitialized) {\n            this._rippleRenderer.setupTriggerEvents(this.trigger);\n        }\n    }\n    /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n    launch(configOrX, y = 0, config) {\n        if (typeof configOrX === 'number') {\n            return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign(Object.assign({}, this.rippleConfig), config));\n        }\n        else {\n            return this._rippleRenderer.fadeInRipple(0, 0, Object.assign(Object.assign({}, this.rippleConfig), configOrX));\n        }\n    }\n}\nMatRipple.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-ripple], [matRipple]',\n                exportAs: 'matRipple',\n                host: {\n                    'class': 'mat-ripple',\n                    '[class.mat-ripple-unbounded]': 'unbounded'\n                }\n            },] }\n];\nMatRipple.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatRipple.propDecorators = {\n    color: [{ type: Input, args: ['matRippleColor',] }],\n    unbounded: [{ type: Input, args: ['matRippleUnbounded',] }],\n    centered: [{ type: Input, args: ['matRippleCentered',] }],\n    radius: [{ type: Input, args: ['matRippleRadius',] }],\n    animation: [{ type: Input, args: ['matRippleAnimation',] }],\n    disabled: [{ type: Input, args: ['matRippleDisabled',] }],\n    trigger: [{ type: Input, args: ['matRippleTrigger',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRippleModule {\n}\nMatRippleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule, PlatformModule],\n                exports: [MatRipple, MatCommonModule],\n                declarations: [MatRipple],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nclass MatPseudoCheckbox {\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n        /** Display state of the checkbox. */\n        this.state = 'unchecked';\n        /** Whether the checkbox is disabled. */\n        this.disabled = false;\n    }\n}\nMatPseudoCheckbox.decorators = [\n    { type: Component, args: [{\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                selector: 'mat-pseudo-checkbox',\n                template: '',\n                host: {\n                    'class': 'mat-pseudo-checkbox',\n                    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n                    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n                    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\\n\"]\n            },] }\n];\nMatPseudoCheckbox.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatPseudoCheckbox.propDecorators = {\n    state: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPseudoCheckboxModule {\n}\nMatPseudoCheckboxModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [MatPseudoCheckbox],\n                declarations: [MatPseudoCheckbox]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent component to options.\n */\nconst MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase {\n}\nconst _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\nclass _MatOptgroupBase extends _MatOptgroupMixinBase {\n    constructor(parent) {\n        var _a;\n        super();\n        /** Unique id for the underlying label. */\n        this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n        this._inert = (_a = parent === null || parent === void 0 ? void 0 : parent.inertGroups) !== null && _a !== void 0 ? _a : false;\n    }\n}\n_MatOptgroupBase.decorators = [\n    { type: Directive }\n];\n_MatOptgroupBase.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_OPTION_PARENT_COMPONENT,] }, { type: Optional }] }\n];\n_MatOptgroupBase.propDecorators = {\n    label: [{ type: Input }]\n};\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_OPTGROUP = new InjectionToken('MatOptgroup');\n/**\n * Component that is used to group instances of `mat-option`.\n */\nclass MatOptgroup extends _MatOptgroupBase {\n}\nMatOptgroup.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-optgroup',\n                exportAs: 'matOptgroup',\n                template: \"<span class=\\\"mat-optgroup-label\\\" aria-hidden=\\\"true\\\" [id]=\\\"_labelId\\\">{{ label }} <ng-content></ng-content></span>\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                host: {\n                    'class': 'mat-optgroup',\n                    '[attr.role]': '_inert ? null : \"group\"',\n                    '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n                    '[attr.aria-labelledby]': '_inert ? null : _labelId',\n                    '[class.mat-optgroup-disabled]': 'disabled',\n                },\n                providers: [{ provide: MAT_OPTGROUP, useExisting: MatOptgroup }],\n                styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\\n\"]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/** Event object emitted by MatOption when selected or deselected. */\nclass MatOptionSelectionChange {\n    constructor(\n    /** Reference to the option that emitted the event. */\n    source, \n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput = false) {\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n}\nclass _MatOptionBase {\n    constructor(_element, _changeDetectorRef, _parent, group) {\n        this._element = _element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parent = _parent;\n        this.group = group;\n        this._selected = false;\n        this._active = false;\n        this._disabled = false;\n        this._mostRecentViewValue = '';\n        /** The unique ID of the option. */\n        this.id = `mat-option-${_uniqueIdCounter++}`;\n        /** Event emitted when the option is selected or deselected. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onSelectionChange = new EventEmitter();\n        /** Emits when the state of the option changes and any parents have to be notified. */\n        this._stateChanges = new Subject();\n    }\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() { return this._parent && this._parent.multiple; }\n    /** Whether or not the option is currently selected. */\n    get selected() { return this._selected; }\n    /** Whether the option is disabled. */\n    get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() { return this._parent && this._parent.disableRipple; }\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active() {\n        return this._active;\n    }\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue() {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n    }\n    /** Selects the option. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n    /** Deselects the option. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n    /** Sets focus onto this option. */\n    focus(_origin, options) {\n        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n        // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n        const element = this._getHostElement();\n        if (typeof element.focus === 'function') {\n            element.focus(options);\n        }\n    }\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles() {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles() {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        return this.viewValue;\n    }\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event) {\n        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n            this._selectViaInteraction();\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction() {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n    /**\n     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n     * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n     * attributes adds a significant amount of noise to screen-reader users without providing useful\n     * information.\n     */\n    _getAriaSelected() {\n        return this.selected || (this.multiple ? false : null);\n    }\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Gets the host DOM element. */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /** Emits the selection change event. */\n    _emitSelectionChangeEvent(isUserInput = false) {\n        this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n    }\n}\n_MatOptionBase.decorators = [\n    { type: Directive }\n];\n_MatOptionBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined },\n    { type: _MatOptgroupBase }\n];\n_MatOptionBase.propDecorators = {\n    value: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }],\n    onSelectionChange: [{ type: Output }]\n};\n/**\n * Single option inside of a `<mat-select>` element.\n */\nclass MatOption extends _MatOptionBase {\n    constructor(element, changeDetectorRef, parent, group) {\n        super(element, changeDetectorRef, parent, group);\n    }\n}\nMatOption.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-option',\n                exportAs: 'matOption',\n                host: {\n                    'role': 'option',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[class.mat-selected]': 'selected',\n                    '[class.mat-option-multiple]': 'multiple',\n                    '[class.mat-active]': 'active',\n                    '[id]': 'id',\n                    '[attr.aria-selected]': '_getAriaSelected()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[class.mat-option-disabled]': 'disabled',\n                    '(click)': '_selectViaInteraction()',\n                    '(keydown)': '_handleKeydown($event)',\n                    'class': 'mat-option mat-focus-indicator',\n                },\n                template: \"<mat-pseudo-checkbox *ngIf=\\\"multiple\\\" class=\\\"mat-option-pseudo-checkbox\\\"\\n    [state]=\\\"selected ? 'checked' : 'unchecked'\\\" [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox>\\n\\n<span class=\\\"mat-option-text\\\"><ng-content></ng-content></span>\\n\\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\\n<span class=\\\"cdk-visually-hidden\\\" *ngIf=\\\"group && group._inert\\\">({{ group.label }})</span>\\n\\n<div class=\\\"mat-option-ripple\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"\\n     [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.cdk-high-contrast-active .mat-option[aria-disabled=true]{opacity:.5}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\\n\"]\n            },] }\n];\nMatOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_OPTION_PARENT_COMPONENT,] }] },\n    { type: MatOptgroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_OPTGROUP,] }] }\n];\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n    if (optionGroups.length) {\n        let optionsArray = options.toArray();\n        let groups = optionGroups.toArray();\n        let groupCounter = 0;\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n        return groupCounter;\n    }\n    return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {\n    if (optionOffset < currentScrollPosition) {\n        return optionOffset;\n    }\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n    return currentScrollPosition;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatOptionModule {\n}\nMatOptionModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatRippleModule, CommonModule, MatCommonModule, MatPseudoCheckboxModule],\n                exports: [MatOption, MatOptgroup],\n                declarations: [MatOption, MatOptgroup]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationCurves, AnimationDurations, DateAdapter, ErrorStateMatcher, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_NATIVE_DATE_FORMATS, MAT_OPTGROUP, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatLine, MatLineModule, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleModule, NativeDateAdapter, NativeDateModule, RippleRef, RippleRenderer, ShowOnDirtyErrorStateMatcher, VERSION, _MatOptgroupBase, _MatOptionBase, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, mixinColor, mixinDisableRipple, mixinDisabled, mixinErrorState, mixinInitialized, mixinTabIndex, setLines, ɵ0$1 as ɵ0, MATERIAL_SANITY_CHECKS_FACTORY as ɵangular_material_src_material_core_core_a };\n"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,cAAlB,EAAkCC,SAAlC,EAA6CC,QAA7C,EAAuDC,QAAvD,EAAiEC,MAAjE,EAAyEC,MAAzE,EAAiFC,SAAjF,EAA4FC,UAA5F,EAAwGC,kBAAxG,EAA4HC,SAA5H,EAAuIC,UAAvI,EAAmJC,MAAnJ,EAA2JC,KAA3J,EAAkKC,SAAlK,EAA6KC,iBAA7K,EAAgMC,uBAAhM,EAAyNC,YAAzN,EAAuOC,iBAAvO,EAA0PC,MAA1P,QAAwQ,eAAxQ;AACA,SAASC,wBAAT,EAAmCC,+BAAnC,EAAoEC,gCAApE,QAA4G,mBAA5G;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,cAArC;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,iBAAvC;AACA,SAASC,qBAAT,EAAgCC,oBAAhC,EAAsDC,aAAtD,QAA2E,uBAA3E;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,MAApC;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,+BAAnC,QAA0E,uBAA1E;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,cAAvB,QAA6C,uBAA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,MAAMhB,OAAO,GAAG,IAAIxB,OAAJ,CAAY,SAAZ,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,MAAMyC,eAAN,CAAsB;;AAEtBA,eAAe,CAACC,cAAhB,GAAiC,6BAAjC;AACAD,eAAe,CAACE,kBAAhB,GAAqC,6BAArC;AACAF,eAAe,CAACG,kBAAhB,GAAqC,2BAArC;AACAH,eAAe,CAACI,WAAhB,GAA8B,6BAA9B;AACA;;AACA,MAAMC,kBAAN,CAAyB;;AAEzBA,kBAAkB,CAACC,OAAnB,GAA6B,OAA7B;AACAD,kBAAkB,CAACE,QAAnB,GAA8B,OAA9B;AACAF,kBAAkB,CAACG,OAAnB,GAA6B,OAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG,IAAIlD,OAAJ,CAAY,SAAZ,CAAlB;AACA;;AACA,SAASmD,8BAAT,GAA0C;EACtC,OAAO,IAAP;AACH;AACD;;;AACA,MAAMC,sBAAsB,GAAG,IAAInD,cAAJ,CAAmB,mBAAnB,EAAwC;EACnEoD,UAAU,EAAE,MADuD;EAEnEC,OAAO,EAAEH;AAF0D,CAAxC,CAA/B;AAIA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMI,eAAN,CAAsB;EAClBC,WAAW,CAACC,wBAAD,EAA2BC,YAA3B,EAAyCC,QAAzC,EAAmD;IAC1D;IACA,KAAKC,oBAAL,GAA4B,KAA5B;IACA,KAAKC,SAAL,GAAiBF,QAAjB,CAH0D,CAI1D;IACA;;IACAF,wBAAwB,CAACK,oCAAzB,GAN0D,CAO1D;IACA;;;IACA,KAAKC,aAAL,GAAqBL,YAArB;;IACA,IAAI,CAAC,KAAKE,oBAAV,EAAgC;MAC5B,KAAKI,sBAAL;;MACA,KAAKC,oBAAL;;MACA,KAAKC,qBAAL;;MACA,KAAKN,oBAAL,GAA4B,IAA5B;IACH;EACJ;EACD;;;EACAO,UAAU,GAAG;IACT,MAAMC,GAAG,GAAG,KAAKP,SAAL,CAAeQ,WAAf,IAA8BC,MAA1C;IACA,OAAO,OAAOF,GAAP,KAAe,QAAf,IAA2BA,GAA3B,GAAiCA,GAAjC,GAAuC,IAA9C;EACH;EACD;;;EACAG,iBAAiB,GAAG;IAChB;IACA;IACA;IACA;IACA,OAAOrE,SAAS,MAAM,CAAC,KAAKsE,UAAL,EAAvB;EACH;EACD;;;EACAA,UAAU,GAAG;IACT,MAAMF,MAAM,GAAG,KAAKH,UAAL,EAAf;;IACA,OAAOG,MAAM,KAAKA,MAAM,CAACG,SAAP,IAAoBH,MAAM,CAACI,OAAhC,CAAb;EACH;;EACDV,sBAAsB,GAAG;IACrB,MAAMW,SAAS,GAAG,KAAKJ,iBAAL,OACb,KAAKR,aAAL,KAAuB,IAAvB,IAA+B,KAAKA,aAAL,CAAmBa,OADrC,CAAlB;;IAEA,IAAID,SAAS,IAAI,CAAC,KAAKd,SAAL,CAAee,OAAjC,EAA0C;MACtCC,OAAO,CAACC,IAAR,CAAa,8DACT,6DADJ;IAEH;EACJ;;EACDb,oBAAoB,GAAG;IACnB;IACA;IACA,MAAMc,UAAU,GAAG,CAAC,KAAKR,iBAAL,EAAD,IACd,KAAKR,aAAL,KAAuB,KAAvB,IAAgC,CAAC,KAAKA,aAAL,CAAmBiB,KADzD;;IAEA,IAAID,UAAU,IAAI,CAAC,KAAKlB,SAAL,CAAeoB,IAA9B,IAAsC,OAAOC,gBAAP,KAA4B,UAAtE,EAAkF;MAC9E;IACH;;IACD,MAAMC,WAAW,GAAG,KAAKtB,SAAL,CAAeuB,aAAf,CAA6B,KAA7B,CAApB;;IACAD,WAAW,CAACE,SAAZ,CAAsBC,GAAtB,CAA0B,yBAA1B;;IACA,KAAKzB,SAAL,CAAeoB,IAAf,CAAoBM,WAApB,CAAgCJ,WAAhC;;IACA,MAAMK,aAAa,GAAGN,gBAAgB,CAACC,WAAD,CAAtC,CAXmB,CAYnB;IACA;IACA;;IACA,IAAIK,aAAa,IAAIA,aAAa,CAACC,OAAd,KAA0B,MAA/C,EAAuD;MACnDZ,OAAO,CAACC,IAAR,CAAa,+DACT,2DADS,GAET,iEAFJ;IAGH;;IACD,KAAKjB,SAAL,CAAeoB,IAAf,CAAoBS,WAApB,CAAgCP,WAAhC;EACH;EACD;;;EACAjB,qBAAqB,GAAG;IACpB,MAAMS,SAAS,GAAG,KAAKJ,iBAAL,OACb,KAAKR,aAAL,KAAuB,IAAvB,IAA+B,KAAKA,aAAL,CAAmB4B,OADrC,CAAlB;;IAEA,IAAIhB,SAAS,IAAIzB,SAAS,CAAC0C,IAAV,KAAmBnE,SAAS,CAACmE,IAA9C,EAAoD;MAChDf,OAAO,CAACC,IAAR,CAAa,mCAAmC5B,SAAS,CAAC0C,IAA7C,GAAoD,mBAApD,GACT,2BADS,GACqBnE,SAAS,CAACmE,IAD/B,GACsC,MADtC,GAET,iEAFJ;IAGH;EACJ;;AA3EiB;;AA6EtBrC,eAAe,CAACsC,UAAhB,GAA6B,CACzB;EAAEC,IAAI,EAAE3F,QAAR;EAAkB4F,IAAI,EAAE,CAAC;IACbC,OAAO,EAAE,CAACzE,UAAD,CADI;IAEb0E,OAAO,EAAE,CAAC1E,UAAD;EAFI,CAAD;AAAxB,CADyB,CAA7B;;AAMAgC,eAAe,CAAC2C,cAAhB,GAAiC,MAAM,CACnC;EAAEJ,IAAI,EAAE1E;AAAR,CADmC,EAEnC;EAAE0E,IAAI,EAAEK,SAAR;EAAmBN,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1F;EAAR,CAAD,EAAqB;IAAE0F,IAAI,EAAEzF,MAAR;IAAgB0F,IAAI,EAAE,CAAC3C,sBAAD;EAAtB,CAArB;AAA/B,CAFmC,EAGnC;EAAE0C,IAAI,EAAEK,SAAR;EAAmBN,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEzF,MAAR;IAAgB0F,IAAI,EAAE,CAACrE,QAAD;EAAtB,CAAD;AAA/B,CAHmC,CAAvC;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAAS0E,aAAT,CAAuBC,IAAvB,EAA6B;EACzB,OAAO,cAAcA,IAAd,CAAmB;IACtB7C,WAAW,CAAC,GAAGuC,IAAJ,EAAU;MACjB,MAAM,GAAGA,IAAT;MACA,KAAKO,SAAL,GAAiB,KAAjB;IACH;;IACW,IAARC,QAAQ,GAAG;MAAE,OAAO,KAAKD,SAAZ;IAAwB;;IAC7B,IAARC,QAAQ,CAACC,KAAD,EAAQ;MAAE,KAAKF,SAAL,GAAiB1E,qBAAqB,CAAC4E,KAAD,CAAtC;IAAgD;;EANhD,CAA1B;AAQH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASC,UAAT,CAAoBJ,IAApB,EAA0BK,YAA1B,EAAwC;EACpC,OAAO,cAAcL,IAAd,CAAmB;IACtB7C,WAAW,CAAC,GAAGuC,IAAJ,EAAU;MACjB,MAAM,GAAGA,IAAT;MACA,KAAKW,YAAL,GAAoBA,YAApB,CAFiB,CAGjB;;MACA,KAAKC,KAAL,GAAaD,YAAb;IACH;;IACQ,IAALC,KAAK,GAAG;MAAE,OAAO,KAAKC,MAAZ;IAAqB;;IAC1B,IAALD,KAAK,CAACH,KAAD,EAAQ;MACb,MAAMK,YAAY,GAAGL,KAAK,IAAI,KAAKE,YAAnC;;MACA,IAAIG,YAAY,KAAK,KAAKD,MAA1B,EAAkC;QAC9B,IAAI,KAAKA,MAAT,EAAiB;UACb,KAAKE,WAAL,CAAiBC,aAAjB,CAA+B1B,SAA/B,CAAyC2B,MAAzC,CAAiD,OAAM,KAAKJ,MAAO,EAAnE;QACH;;QACD,IAAIC,YAAJ,EAAkB;UACd,KAAKC,WAAL,CAAiBC,aAAjB,CAA+B1B,SAA/B,CAAyCC,GAAzC,CAA8C,OAAMuB,YAAa,EAAjE;QACH;;QACD,KAAKD,MAAL,GAAcC,YAAd;MACH;IACJ;;EAnBqB,CAA1B;AAqBH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASI,kBAAT,CAA4BZ,IAA5B,EAAkC;EAC9B,MAAMa,KAAN,SAAoBb,IAApB,CAAyB;IACrB7C,WAAW,CAAC,GAAGuC,IAAJ,EAAU;MACjB,MAAM,GAAGA,IAAT;MACA,KAAKoB,cAAL,GAAsB,KAAtB;IACH;IACD;;;IACiB,IAAbC,aAAa,GAAG;MAAE,OAAO,KAAKD,cAAZ;IAA6B;;IAClC,IAAbC,aAAa,CAACZ,KAAD,EAAQ;MAAE,KAAKW,cAAL,GAAsBvF,qBAAqB,CAAC4E,KAAD,CAA3C;IAAqD;;EAP3D,CADK,CAU9B;EACA;EACA;;;EACA,OAAOU,KAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASG,aAAT,CAAuBhB,IAAvB,EAA6BiB,eAAe,GAAG,CAA/C,EAAkD;EAC9C;EACA;EACA,MAAMJ,KAAN,SAAoBb,IAApB,CAAyB;IACrB7C,WAAW,CAAC,GAAGuC,IAAJ,EAAU;MACjB,MAAM,GAAGA,IAAT;MACA,KAAKwB,SAAL,GAAiBD,eAAjB;MACA,KAAKA,eAAL,GAAuBA,eAAvB;IACH;;IACW,IAARE,QAAQ,GAAG;MAAE,OAAO,KAAKjB,QAAL,GAAgB,CAAC,CAAjB,GAAqB,KAAKgB,SAAjC;IAA6C;;IAClD,IAARC,QAAQ,CAAChB,KAAD,EAAQ;MAChB;MACA,KAAKe,SAAL,GAAiBf,KAAK,IAAI,IAAT,GAAgB3E,oBAAoB,CAAC2E,KAAD,CAApC,GAA8C,KAAKc,eAApE;IACH;;EAVoB,CAHqB,CAe9C;EACA;EACA;;;EACA,OAAOJ,KAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASO,eAAT,CAAyBpB,IAAzB,EAA+B;EAC3B,OAAO,cAAcA,IAAd,CAAmB;IACtB7C,WAAW,CAAC,GAAGuC,IAAJ,EAAU;MACjB,MAAM,GAAGA,IAAT;MACA;;MACA,KAAK2B,UAAL,GAAkB,KAAlB;MACA;AACZ;AACA;AACA;;MACY,KAAKC,YAAL,GAAoB,IAAI5F,OAAJ,EAApB;IACH;;IACD6F,gBAAgB,GAAG;MACf,MAAMC,QAAQ,GAAG,KAAKH,UAAtB;MACA,MAAMI,MAAM,GAAG,KAAKC,gBAAL,IAAyB,KAAKC,WAA7C;MACA,MAAMC,OAAO,GAAG,KAAKC,iBAAL,IAA0B,KAAKC,yBAA/C;MACA,MAAMC,OAAO,GAAG,KAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,OAAhC,GAA0C,IAA1D;MACA,MAAME,QAAQ,GAAGL,OAAO,CAACM,YAAR,CAAqBH,OAArB,EAA8BN,MAA9B,CAAjB;;MACA,IAAIQ,QAAQ,KAAKT,QAAjB,EAA2B;QACvB,KAAKH,UAAL,GAAkBY,QAAlB;QACA,KAAKX,YAAL,CAAkBa,IAAlB;MACH;IACJ;;EArBqB,CAA1B;AAuBH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASC,gBAAT,CAA0BpC,IAA1B,EAAgC;EAC5B,OAAO,cAAcA,IAAd,CAAmB;IACtB7C,WAAW,CAAC,GAAGuC,IAAJ,EAAU;MACjB,MAAM,GAAGA,IAAT;MACA;;MACA,KAAK2C,cAAL,GAAsB,KAAtB;MACA;AACZ;AACA;AACA;AACA;;MACY,KAAKC,mBAAL,GAA2B,EAA3B;MACA;AACZ;AACA;AACA;;MACY,KAAKC,WAAL,GAAmB,IAAI5G,UAAJ,CAAe6G,UAAU,IAAI;QAC5C;QACA;QACA,IAAI,KAAKH,cAAT,EAAyB;UACrB,KAAKI,iBAAL,CAAuBD,UAAvB;QACH,CAFD,MAGK;UACD,KAAKF,mBAAL,CAAyBI,IAAzB,CAA8BF,UAA9B;QACH;MACJ,CATkB,CAAnB;IAUH;IACD;AACR;AACA;AACA;AACA;;;IACQG,gBAAgB,GAAG;MACf,IAAI,KAAKN,cAAL,KAAwB,OAAOO,SAAP,KAAqB,WAArB,IAAoCA,SAA5D,CAAJ,EAA4E;QACxE,MAAMC,KAAK,CAAC,+DACR,6BADO,CAAX;MAEH;;MACD,KAAKR,cAAL,GAAsB,IAAtB;;MACA,KAAKC,mBAAL,CAAyBQ,OAAzB,CAAiC,KAAKL,iBAAtC;;MACA,KAAKH,mBAAL,GAA2B,IAA3B;IACH;IACD;;;IACAG,iBAAiB,CAACD,UAAD,EAAa;MAC1BA,UAAU,CAACL,IAAX;MACAK,UAAU,CAACO,QAAX;IACH;;EA5CqB,CAA1B;AA8CH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMC,eAAe,GAAG,IAAIpJ,cAAJ,CAAmB,iBAAnB,EAAsC;EAC1DoD,UAAU,EAAE,MAD8C;EAE1DC,OAAO,EAAEgG;AAFiD,CAAtC,CAAxB;AAIA;;AACA,SAASA,uBAAT,GAAmC;EAC/B,OAAOhJ,MAAM,CAACC,SAAD,CAAb;AACH;AACD;;;AACA,MAAMgJ,WAAN,CAAkB;EACd/F,WAAW,GAAG;IACV,KAAKgG,cAAL,GAAsB,IAAIzH,OAAJ,EAAtB;IACA;;IACA,KAAK0H,aAAL,GAAqB,KAAKD,cAA1B;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIE,kBAAkB,CAACC,GAAD,EAAM;IACpB,OAAO,KAAKC,cAAL,CAAoBD,GAApB,KAA4B,KAAKE,OAAL,CAAaF,GAAb,CAA5B,GAAgDA,GAAhD,GAAsD,IAA7D;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIG,WAAW,CAACtD,KAAD,EAAQ;IACf,IAAIA,KAAK,IAAI,IAAT,IAAiB,KAAKoD,cAAL,CAAoBpD,KAApB,KAA8B,KAAKqD,OAAL,CAAarD,KAAb,CAAnD,EAAwE;MACpE,OAAOA,KAAP;IACH;;IACD,OAAO,KAAKuD,OAAL,EAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIC,SAAS,CAACC,MAAD,EAAS;IACd,KAAKA,MAAL,GAAcA,MAAd;;IACA,KAAKT,cAAL,CAAoBhB,IAApB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI0B,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;IACvB,OAAO,KAAKC,OAAL,CAAaF,KAAb,IAAsB,KAAKE,OAAL,CAAaD,MAAb,CAAtB,IACH,KAAKE,QAAL,CAAcH,KAAd,IAAuB,KAAKG,QAAL,CAAcF,MAAd,CADpB,IAEH,KAAKG,OAAL,CAAaJ,KAAb,IAAsB,KAAKI,OAAL,CAAaH,MAAb,CAF1B;EAGH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACII,QAAQ,CAACL,KAAD,EAAQC,MAAR,EAAgB;IACpB,IAAID,KAAK,IAAIC,MAAb,EAAqB;MACjB,IAAIK,UAAU,GAAG,KAAKZ,OAAL,CAAaM,KAAb,CAAjB;MACA,IAAIO,WAAW,GAAG,KAAKb,OAAL,CAAaO,MAAb,CAAlB;;MACA,IAAIK,UAAU,IAAIC,WAAlB,EAA+B;QAC3B,OAAO,CAAC,KAAKR,WAAL,CAAiBC,KAAjB,EAAwBC,MAAxB,CAAR;MACH;;MACD,OAAOK,UAAU,IAAIC,WAArB;IACH;;IACD,OAAOP,KAAK,IAAIC,MAAhB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIO,SAAS,CAACC,IAAD,EAAOC,GAAP,EAAYC,GAAZ,EAAiB;IACtB,IAAID,GAAG,IAAI,KAAKX,WAAL,CAAiBU,IAAjB,EAAuBC,GAAvB,IAA8B,CAAzC,EAA4C;MACxC,OAAOA,GAAP;IACH;;IACD,IAAIC,GAAG,IAAI,KAAKZ,WAAL,CAAiBU,IAAjB,EAAuBE,GAAvB,IAA8B,CAAzC,EAA4C;MACxC,OAAOA,GAAP;IACH;;IACD,OAAOF,IAAP;EACH;;AAvFa;AA0FlB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,gBAAgB,GAAG,IAAI9K,cAAJ,CAAmB,kBAAnB,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,IAAI+K,iBAAJ,C,CACA;AACA;AACA;AACA;AACA;;AACA,IAAI;EACAA,iBAAiB,GAAG,OAAOC,IAAP,IAAe,WAAnC;AACH,CAFD,CAGA,OAAOC,EAAP,EAAW;EACPF,iBAAiB,GAAG,KAApB;AACH;AACD;;;AACA,MAAMG,mBAAmB,GAAG;EACxB,QAAQ,CACJ,SADI,EACO,UADP,EACmB,OADnB,EAC4B,OAD5B,EACqC,KADrC,EAC4C,MAD5C,EACoD,MADpD,EAC4D,QAD5D,EACsE,WADtE,EAEJ,SAFI,EAEO,UAFP,EAEmB,UAFnB,CADgB;EAKxB,SAAS,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CALe;EAMxB,UAAU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD;AANc,CAA5B;;AAQA,MAAMC,EAAE,GAAGC,CAAC,IAAIC,MAAM,CAACD,CAAC,GAAG,CAAL,CAAtB;AACA;;;AACA,MAAME,kBAAkB,GAAGC,KAAK,CAAC,EAAD,EAAKJ,EAAL,CAAhC;AACA;;AACA,MAAMK,yBAAyB,GAAG;EAC9B,QAAQ,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CADsB;EAE9B,SAAS,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAFqB;EAG9B,UAAU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B;AAHoB,CAAlC;AAKA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,oFAAvB;AACA;;AACA,SAASF,KAAT,CAAeG,MAAf,EAAuBC,aAAvB,EAAsC;EAClC,MAAMC,WAAW,GAAGC,KAAK,CAACH,MAAD,CAAzB;;EACA,KAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,MAApB,EAA4BN,CAAC,EAA7B,EAAiC;IAC7BQ,WAAW,CAACR,CAAD,CAAX,GAAiBO,aAAa,CAACP,CAAD,CAA9B;EACH;;EACD,OAAOQ,WAAP;AACH;AACD;;;AACA,MAAME,iBAAN,SAAgCxC,WAAhC,CAA4C;EACxC/F,WAAW,CAACwI,aAAD,EAAgBC,QAAhB,EAA0B;IACjC;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKC,gBAAL,GAAwB,IAAxB;IACA,MAAMlC,SAAN,CAAgBgC,aAAhB,EAdiC,CAejC;;IACA,KAAKE,gBAAL,GAAwB,CAACD,QAAQ,CAACE,OAAlC;IACA,KAAKC,UAAL,GAAkBH,QAAQ,CAACE,OAAT,IAAoBF,QAAQ,CAACI,IAA/C;EACH;;EACDhC,OAAO,CAACO,IAAD,EAAO;IACV,OAAOA,IAAI,CAAC0B,WAAL,EAAP;EACH;;EACDhC,QAAQ,CAACM,IAAD,EAAO;IACX,OAAOA,IAAI,CAACN,QAAL,EAAP;EACH;;EACDC,OAAO,CAACK,IAAD,EAAO;IACV,OAAOA,IAAI,CAACL,OAAL,EAAP;EACH;;EACDgC,YAAY,CAAC3B,IAAD,EAAO;IACf,OAAOA,IAAI,CAAC4B,MAAL,EAAP;EACH;;EACDC,aAAa,CAACC,KAAD,EAAQ;IACjB,IAAI1B,iBAAJ,EAAuB;MACnB,MAAM2B,GAAG,GAAG,IAAI1B,IAAI,CAAC2B,cAAT,CAAwB,KAAK3C,MAA7B,EAAqC;QAAE4C,KAAK,EAAEH,KAAT;QAAgBI,QAAQ,EAAE;MAA1B,CAArC,CAAZ;MACA,OAAOtB,KAAK,CAAC,EAAD,EAAKH,CAAC,IAAI,KAAK0B,8BAAL,CAAoC,KAAKC,OAAL,CAAaL,GAAb,EAAkB,IAAIM,IAAJ,CAAS,IAAT,EAAe5B,CAAf,EAAkB,CAAlB,CAAlB,CAApC,CAAV,CAAZ;IACH;;IACD,OAAOF,mBAAmB,CAACuB,KAAD,CAA1B;EACH;;EACDQ,YAAY,GAAG;IACX,IAAIlC,iBAAJ,EAAuB;MACnB,MAAM2B,GAAG,GAAG,IAAI1B,IAAI,CAAC2B,cAAT,CAAwB,KAAK3C,MAA7B,EAAqC;QAAEkD,GAAG,EAAE,SAAP;QAAkBL,QAAQ,EAAE;MAA5B,CAArC,CAAZ;MACA,OAAOtB,KAAK,CAAC,EAAD,EAAKH,CAAC,IAAI,KAAK0B,8BAAL,CAAoC,KAAKC,OAAL,CAAaL,GAAb,EAAkB,IAAIM,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB5B,CAAC,GAAG,CAAtB,CAAlB,CAApC,CAAV,CAAZ;IACH;;IACD,OAAOE,kBAAP;EACH;;EACD6B,iBAAiB,CAACV,KAAD,EAAQ;IACrB,IAAI1B,iBAAJ,EAAuB;MACnB,MAAM2B,GAAG,GAAG,IAAI1B,IAAI,CAAC2B,cAAT,CAAwB,KAAK3C,MAA7B,EAAqC;QAAEoD,OAAO,EAAEX,KAAX;QAAkBI,QAAQ,EAAE;MAA5B,CAArC,CAAZ;MACA,OAAOtB,KAAK,CAAC,CAAD,EAAIH,CAAC,IAAI,KAAK0B,8BAAL,CAAoC,KAAKC,OAAL,CAAaL,GAAb,EAAkB,IAAIM,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB5B,CAAC,GAAG,CAAtB,CAAlB,CAApC,CAAT,CAAZ;IACH;;IACD,OAAOI,yBAAyB,CAACiB,KAAD,CAAhC;EACH;;EACDY,WAAW,CAAC1C,IAAD,EAAO;IACd,IAAII,iBAAJ,EAAuB;MACnB,MAAM2B,GAAG,GAAG,IAAI1B,IAAI,CAAC2B,cAAT,CAAwB,KAAK3C,MAA7B,EAAqC;QAAEsD,IAAI,EAAE,SAAR;QAAmBT,QAAQ,EAAE;MAA7B,CAArC,CAAZ;MACA,OAAO,KAAKC,8BAAL,CAAoC,KAAKC,OAAL,CAAaL,GAAb,EAAkB/B,IAAlB,CAApC,CAAP;IACH;;IACD,OAAOU,MAAM,CAAC,KAAKjB,OAAL,CAAaO,IAAb,CAAD,CAAb;EACH;;EACD4C,iBAAiB,GAAG;IAChB;IACA,OAAO,CAAP;EACH;;EACDC,iBAAiB,CAAC7C,IAAD,EAAO;IACpB,OAAO,KAAKL,OAAL,CAAa,KAAKmD,uBAAL,CAA6B,KAAKrD,OAAL,CAAaO,IAAb,CAA7B,EAAiD,KAAKN,QAAL,CAAcM,IAAd,IAAsB,CAAvE,EAA0E,CAA1E,CAAb,CAAP;EACH;;EACD+C,KAAK,CAAC/C,IAAD,EAAO;IACR,OAAO,IAAIqC,IAAJ,CAASrC,IAAI,CAACgD,OAAL,EAAT,CAAP;EACH;;EACDC,UAAU,CAACN,IAAD,EAAOV,KAAP,EAAcjC,IAAd,EAAoB;IAC1B,IAAI,OAAO3B,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;MAC/C;MACA;MACA,IAAI4D,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAAzB,EAA6B;QACzB,MAAM3D,KAAK,CAAE,wBAAuB2D,KAAM,4CAA/B,CAAX;MACH;;MACD,IAAIjC,IAAI,GAAG,CAAX,EAAc;QACV,MAAM1B,KAAK,CAAE,iBAAgB0B,IAAK,mCAAvB,CAAX;MACH;IACJ;;IACD,IAAIkD,MAAM,GAAG,KAAKJ,uBAAL,CAA6BH,IAA7B,EAAmCV,KAAnC,EAA0CjC,IAA1C,CAAb,CAX0B,CAY1B;;;IACA,IAAIkD,MAAM,CAACxD,QAAP,MAAqBuC,KAArB,KAA+B,OAAO5D,SAAP,KAAqB,WAArB,IAAoCA,SAAnE,CAAJ,EAAmF;MAC/E,MAAMC,KAAK,CAAE,iBAAgB0B,IAAK,2BAA0BiC,KAAM,IAAvD,CAAX;IACH;;IACD,OAAOiB,MAAP;EACH;;EACDC,KAAK,GAAG;IACJ,OAAO,IAAId,IAAJ,EAAP;EACH;;EACDe,KAAK,CAACxH,KAAD,EAAQ;IACT;IACA;IACA,IAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;MAC1B,OAAO,IAAIyG,IAAJ,CAASzG,KAAT,CAAP;IACH;;IACD,OAAOA,KAAK,GAAG,IAAIyG,IAAJ,CAASA,IAAI,CAACe,KAAL,CAAWxH,KAAX,CAAT,CAAH,GAAiC,IAA7C;EACH;;EACDyH,MAAM,CAACrD,IAAD,EAAOsD,aAAP,EAAsB;IACxB,IAAI,CAAC,KAAKrE,OAAL,CAAae,IAAb,CAAL,EAAyB;MACrB,MAAM1B,KAAK,CAAC,gDAAD,CAAX;IACH;;IACD,IAAI8B,iBAAJ,EAAuB;MACnB;MACA;MACA,IAAI,KAAKoB,UAAL,KAAoBxB,IAAI,CAAC0B,WAAL,KAAqB,CAArB,IAA0B1B,IAAI,CAAC0B,WAAL,KAAqB,IAAnE,CAAJ,EAA8E;QAC1E1B,IAAI,GAAG,KAAK+C,KAAL,CAAW/C,IAAX,CAAP;QACAA,IAAI,CAACuD,WAAL,CAAiBC,IAAI,CAACtD,GAAL,CAAS,CAAT,EAAYsD,IAAI,CAACvD,GAAL,CAAS,IAAT,EAAeD,IAAI,CAAC0B,WAAL,EAAf,CAAZ,CAAjB;MACH;;MACD4B,aAAa,GAAGG,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,aAAlB,CAAd,EAAgD;QAAEpB,QAAQ,EAAE;MAAZ,CAAhD,CAAhB;MACA,MAAMH,GAAG,GAAG,IAAI1B,IAAI,CAAC2B,cAAT,CAAwB,KAAK3C,MAA7B,EAAqCiE,aAArC,CAAZ;MACA,OAAO,KAAKnB,8BAAL,CAAoC,KAAKC,OAAL,CAAaL,GAAb,EAAkB/B,IAAlB,CAApC,CAAP;IACH;;IACD,OAAO,KAAKmC,8BAAL,CAAoCnC,IAAI,CAAC2D,YAAL,EAApC,CAAP;EACH;;EACDC,gBAAgB,CAAC5D,IAAD,EAAO6D,KAAP,EAAc;IAC1B,OAAO,KAAKC,iBAAL,CAAuB9D,IAAvB,EAA6B6D,KAAK,GAAG,EAArC,CAAP;EACH;;EACDC,iBAAiB,CAAC9D,IAAD,EAAO+D,MAAP,EAAe;IAC5B,IAAIC,OAAO,GAAG,KAAKlB,uBAAL,CAA6B,KAAKrD,OAAL,CAAaO,IAAb,CAA7B,EAAiD,KAAKN,QAAL,CAAcM,IAAd,IAAsB+D,MAAvE,EAA+E,KAAKpE,OAAL,CAAaK,IAAb,CAA/E,CAAd,CAD4B,CAE5B;IACA;IACA;IACA;;;IACA,IAAI,KAAKN,QAAL,CAAcsE,OAAd,KAA0B,CAAC,CAAC,KAAKtE,QAAL,CAAcM,IAAd,IAAsB+D,MAAvB,IAAiC,EAAjC,GAAsC,EAAvC,IAA6C,EAA3E,EAA+E;MAC3EC,OAAO,GAAG,KAAKlB,uBAAL,CAA6B,KAAKrD,OAAL,CAAauE,OAAb,CAA7B,EAAoD,KAAKtE,QAAL,CAAcsE,OAAd,CAApD,EAA4E,CAA5E,CAAV;IACH;;IACD,OAAOA,OAAP;EACH;;EACDC,eAAe,CAACjE,IAAD,EAAOkE,IAAP,EAAa;IACxB,OAAO,KAAKpB,uBAAL,CAA6B,KAAKrD,OAAL,CAAaO,IAAb,CAA7B,EAAiD,KAAKN,QAAL,CAAcM,IAAd,CAAjD,EAAsE,KAAKL,OAAL,CAAaK,IAAb,IAAqBkE,IAA3F,CAAP;EACH;;EACDC,SAAS,CAACnE,IAAD,EAAO;IACZ,OAAO,CACHA,IAAI,CAACoE,cAAL,EADG,EAEH,KAAKC,OAAL,CAAarE,IAAI,CAACsE,WAAL,KAAqB,CAAlC,CAFG,EAGH,KAAKD,OAAL,CAAarE,IAAI,CAACuE,UAAL,EAAb,CAHG,EAILC,IAJK,CAIA,GAJA,CAAP;EAKH;EACD;AACJ;AACA;AACA;AACA;;;EACItF,WAAW,CAACtD,KAAD,EAAQ;IACf,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC3B,IAAI,CAACA,KAAL,EAAY;QACR,OAAO,IAAP;MACH,CAH0B,CAI3B;MACA;;;MACA,IAAIkF,cAAc,CAAC2D,IAAf,CAAoB7I,KAApB,CAAJ,EAAgC;QAC5B,IAAIoE,IAAI,GAAG,IAAIqC,IAAJ,CAASzG,KAAT,CAAX;;QACA,IAAI,KAAKqD,OAAL,CAAae,IAAb,CAAJ,EAAwB;UACpB,OAAOA,IAAP;QACH;MACJ;IACJ;;IACD,OAAO,MAAMd,WAAN,CAAkBtD,KAAlB,CAAP;EACH;;EACDoD,cAAc,CAACD,GAAD,EAAM;IAChB,OAAOA,GAAG,YAAYsD,IAAtB;EACH;;EACDpD,OAAO,CAACe,IAAD,EAAO;IACV,OAAO,CAAC0E,KAAK,CAAC1E,IAAI,CAACgD,OAAL,EAAD,CAAb;EACH;;EACD7D,OAAO,GAAG;IACN,OAAO,IAAIkD,IAAJ,CAASsC,GAAT,CAAP;EACH;EACD;;;EACA7B,uBAAuB,CAACH,IAAD,EAAOV,KAAP,EAAcjC,IAAd,EAAoB;IACvC;IACA;IACA,MAAM4E,CAAC,GAAG,IAAIvC,IAAJ,EAAV;IACAuC,CAAC,CAACrB,WAAF,CAAcZ,IAAd,EAAoBV,KAApB,EAA2BjC,IAA3B;IACA4E,CAAC,CAACC,QAAF,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB;IACA,OAAOD,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIP,OAAO,CAACS,CAAD,EAAI;IACP,OAAO,CAAC,OAAOA,CAAR,EAAWC,KAAX,CAAiB,CAAC,CAAlB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI5C,8BAA8B,CAAC6C,GAAD,EAAM;IAChC,OAAOA,GAAG,CAACC,OAAJ,CAAY,iBAAZ,EAA+B,EAA/B,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI7C,OAAO,CAACL,GAAD,EAAM/B,IAAN,EAAY;IACf;IACA;IACA,MAAM4E,CAAC,GAAG,IAAIvC,IAAJ,EAAV;IACAuC,CAAC,CAACM,cAAF,CAAiBlF,IAAI,CAAC0B,WAAL,EAAjB,EAAqC1B,IAAI,CAACN,QAAL,EAArC,EAAsDM,IAAI,CAACL,OAAL,EAAtD;IACAiF,CAAC,CAACO,WAAF,CAAcnF,IAAI,CAACoF,QAAL,EAAd,EAA+BpF,IAAI,CAACqF,UAAL,EAA/B,EAAkDrF,IAAI,CAACsF,UAAL,EAAlD,EAAqEtF,IAAI,CAACuF,eAAL,EAArE;IACA,OAAOxD,GAAG,CAACsB,MAAJ,CAAWuB,CAAX,CAAP;EACH;;AAvNuC;;AAyN5CzD,iBAAiB,CAAClG,UAAlB,GAA+B,CAC3B;EAAEC,IAAI,EAAEtF;AAAR,CAD2B,CAA/B;;AAGAuL,iBAAiB,CAAC7F,cAAlB,GAAmC,MAAM,CACrC;EAAEJ,IAAI,EAAEwF,MAAR;EAAgBzF,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1F;EAAR,CAAD,EAAqB;IAAE0F,IAAI,EAAEzF,MAAR;IAAgB0F,IAAI,EAAE,CAACsD,eAAD;EAAtB,CAArB;AAA5B,CADqC,EAErC;EAAEvD,IAAI,EAAE7D;AAAR,CAFqC,CAAzC;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMmO,uBAAuB,GAAG;EAC5BpC,KAAK,EAAE;IACHqC,SAAS,EAAE;EADR,CADqB;EAI5B5K,OAAO,EAAE;IACL4K,SAAS,EAAE;MAAE9C,IAAI,EAAE,SAAR;MAAmBV,KAAK,EAAE,SAA1B;MAAqCM,GAAG,EAAE;IAA1C,CADN;IAELmD,cAAc,EAAE;MAAE/C,IAAI,EAAE,SAAR;MAAmBV,KAAK,EAAE;IAA1B,CAFX;IAGL0D,aAAa,EAAE;MAAEhD,IAAI,EAAE,SAAR;MAAmBV,KAAK,EAAE,MAA1B;MAAkCM,GAAG,EAAE;IAAvC,CAHV;IAILqD,kBAAkB,EAAE;MAAEjD,IAAI,EAAE,SAAR;MAAmBV,KAAK,EAAE;IAA1B;EAJf;AAJmB,CAAhC;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM4D,gBAAN,CAAuB;;AAEvBA,gBAAgB,CAAC5K,UAAjB,GAA8B,CAC1B;EAAEC,IAAI,EAAE3F,QAAR;EAAkB4F,IAAI,EAAE,CAAC;IACbC,OAAO,EAAE,CAAC9D,cAAD,CADI;IAEbwO,SAAS,EAAE,CACP;MAAEC,OAAO,EAAEpH,WAAX;MAAwBqH,QAAQ,EAAE7E;IAAlC,CADO;EAFE,CAAD;AAAxB,CAD0B,CAA9B;AAQA,MAAM8E,IAAI,GAAGT,uBAAb;;AACA,MAAMU,mBAAN,CAA0B;;AAE1BA,mBAAmB,CAACjL,UAApB,GAAiC,CAC7B;EAAEC,IAAI,EAAE3F,QAAR;EAAkB4F,IAAI,EAAE,CAAC;IACbC,OAAO,EAAE,CAACyK,gBAAD,CADI;IAEbC,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAE5F,gBAAX;MAA6BgG,QAAQ,EAAEF;IAAvC,CAAD;EAFE,CAAD;AAAxB,CAD6B,CAAjC;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,MAAMG,4BAAN,CAAmC;EAC/BzI,YAAY,CAACH,OAAD,EAAU6I,IAAV,EAAgB;IACxB,OAAO,CAAC,EAAE7I,OAAO,IAAIA,OAAO,CAAC2B,OAAnB,KAA+B3B,OAAO,CAAC8I,KAAR,IAAkBD,IAAI,IAAIA,IAAI,CAACE,SAA9D,CAAF,CAAR;EACH;;AAH8B;;AAKnCH,4BAA4B,CAACnL,UAA7B,GAA0C,CACtC;EAAEC,IAAI,EAAEtF;AAAR,CADsC,CAA1C;AAGA;;AACA,MAAM4Q,iBAAN,CAAwB;EACpB7I,YAAY,CAACH,OAAD,EAAU6I,IAAV,EAAgB;IACxB,OAAO,CAAC,EAAE7I,OAAO,IAAIA,OAAO,CAAC2B,OAAnB,KAA+B3B,OAAO,CAACiJ,OAAR,IAAoBJ,IAAI,IAAIA,IAAI,CAACE,SAAhE,CAAF,CAAR;EACH;;AAHmB;;AAKxBC,iBAAiB,CAACE,KAAlB,GAA0B7Q,kBAAkB,CAAC;EAAE6C,OAAO,EAAE,SAASiO,yBAAT,GAAqC;IAAE,OAAO,IAAIH,iBAAJ,EAAP;EAAiC,CAAnF;EAAqFI,KAAK,EAAEJ,iBAA5F;EAA+G/N,UAAU,EAAE;AAA3H,CAAD,CAA5C;AACA+N,iBAAiB,CAACvL,UAAlB,GAA+B,CAC3B;EAAEC,IAAI,EAAEtF,UAAR;EAAoBuF,IAAI,EAAE,CAAC;IAAE1C,UAAU,EAAE;EAAd,CAAD;AAA1B,CAD2B,CAA/B;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMoO,OAAN,CAAc;;AAEdA,OAAO,CAAC5L,UAAR,GAAqB,CACjB;EAAEC,IAAI,EAAEpF,SAAR;EAAmBqF,IAAI,EAAE,CAAC;IACd2L,QAAQ,EAAE,uBADI;IAEdC,IAAI,EAAE;MAAE,SAAS;IAAX;EAFQ,CAAD;AAAzB,CADiB,CAArB;AAMA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,OAAzB,EAAkCC,MAAM,GAAG,KAA3C,EAAkD;EAC9C;EACA;EACAF,KAAK,CAACG,OAAN,CAAcC,IAAd,CAAmB7P,SAAS,CAACyP,KAAD,CAA5B,EAAqCK,SAArC,CAA+C,CAAC;IAAEvG;EAAF,CAAD,KAAgB;IAC3DwG,QAAQ,CAACL,OAAD,EAAW,GAAEC,MAAO,SAApB,EAA8B,KAA9B,CAAR;IACAI,QAAQ,CAACL,OAAD,EAAW,GAAEC,MAAO,SAApB,EAA8B,KAA9B,CAAR;IACAI,QAAQ,CAACL,OAAD,EAAW,GAAEC,MAAO,aAApB,EAAkC,KAAlC,CAAR;;IACA,IAAIpG,MAAM,KAAK,CAAX,IAAgBA,MAAM,KAAK,CAA/B,EAAkC;MAC9BwG,QAAQ,CAACL,OAAD,EAAW,GAAEC,MAAO,IAAGpG,MAAO,OAA9B,EAAsC,IAAtC,CAAR;IACH,CAFD,MAGK,IAAIA,MAAM,GAAG,CAAb,EAAgB;MACjBwG,QAAQ,CAACL,OAAD,EAAW,GAAEC,MAAO,aAApB,EAAkC,IAAlC,CAAR;IACH;EACJ,CAVD;AAWH;AACD;;;AACA,SAASI,QAAT,CAAkBL,OAAlB,EAA2BM,SAA3B,EAAsCC,KAAtC,EAA6C;EACzC,MAAMhN,SAAS,GAAGyM,OAAO,CAAC/K,aAAR,CAAsB1B,SAAxC;EACAgN,KAAK,GAAGhN,SAAS,CAACC,GAAV,CAAc8M,SAAd,CAAH,GAA8B/M,SAAS,CAAC2B,MAAV,CAAiBoL,SAAjB,CAAnC;AACH;;AACD,MAAME,aAAN,CAAoB;;AAEpBA,aAAa,CAACzM,UAAd,GAA2B,CACvB;EAAEC,IAAI,EAAE3F,QAAR;EAAkB4F,IAAI,EAAE,CAAC;IACbC,OAAO,EAAE,CAACzC,eAAD,CADI;IAEb0C,OAAO,EAAE,CAACwL,OAAD,EAAUlO,eAAV,CAFI;IAGbgP,YAAY,EAAE,CAACd,OAAD;EAHD,CAAD;AAAxB,CADuB,CAA3B;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,MAAMe,SAAN,CAAgB;EACZhP,WAAW,CAACiP,SAAD;EACX;EACAX,OAFW;EAGX;EACAY,MAJW,EAIH;IACJ,KAAKD,SAAL,GAAiBA,SAAjB;IACA,KAAKX,OAAL,GAAeA,OAAf;IACA,KAAKY,MAAL,GAAcA,MAAd;IACA;;IACA,KAAKC,KAAL,GAAa;IAAE;IAAf;EACH;EACD;;;EACAC,OAAO,GAAG;IACN,KAAKH,SAAL,CAAeI,aAAf,CAA6B,IAA7B;EACH;;AAfW;AAkBhB;AACA;AACA;AACA;;;AACA,MAAMC,4BAA4B,GAAG;EACjCC,aAAa,EAAE,GADkB;EAEjCC,YAAY,EAAE;AAFmB,CAArC;AAIA;AACA;AACA;AACA;;AACA,MAAMC,wBAAwB,GAAG,GAAjC;AACA;;AACA,MAAMC,mBAAmB,GAAG/Q,+BAA+B,CAAC;EAAEgR,OAAO,EAAE;AAAX,CAAD,CAA3D;AACA;;AACA,MAAMC,iBAAiB,GAAG,CAAC,WAAD,EAAc,YAAd,CAA1B;AACA;;AACA,MAAMC,eAAe,GAAG,CAAC,SAAD,EAAY,YAAZ,EAA0B,UAA1B,EAAsC,aAAtC,CAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAN,CAAqB;EACjB9P,WAAW,CAAC+P,OAAD,EAAUC,OAAV,EAAmBC,mBAAnB,EAAwCxH,QAAxC,EAAkD;IACzD,KAAKsH,OAAL,GAAeA,OAAf;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA;;IACA,KAAKE,cAAL,GAAsB,KAAtB;IACA;;IACA,KAAKC,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;IACA;;IACA,KAAKC,0BAAL,GAAkC,KAAlC,CARyD,CASzD;;IACA,IAAI5H,QAAQ,CAAC6H,SAAb,EAAwB;MACpB,KAAKC,iBAAL,GAAyBjS,aAAa,CAAC2R,mBAAD,CAAtC;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIO,YAAY,CAACC,CAAD,EAAIC,CAAJ,EAAOxB,MAAM,GAAG,EAAhB,EAAoB;IAC5B,MAAMyB,aAAa,GAAG,KAAKC,cAAL,GAClB,KAAKA,cAAL,IAAuB,KAAKL,iBAAL,CAAuBM,qBAAvB,EAD3B;;IAEA,MAAMC,eAAe,GAAGjG,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBwE,4BAAlB,CAAd,EAA+DJ,MAAM,CAAC6B,SAAtE,CAAxB;;IACA,IAAI7B,MAAM,CAAC8B,QAAX,EAAqB;MACjBP,CAAC,GAAGE,aAAa,CAACM,IAAd,GAAqBN,aAAa,CAACO,KAAd,GAAsB,CAA/C;MACAR,CAAC,GAAGC,aAAa,CAACQ,GAAd,GAAoBR,aAAa,CAACS,MAAd,GAAuB,CAA/C;IACH;;IACD,MAAMC,MAAM,GAAGnC,MAAM,CAACmC,MAAP,IAAiBC,wBAAwB,CAACb,CAAD,EAAIC,CAAJ,EAAOC,aAAP,CAAxD;IACA,MAAMY,OAAO,GAAGd,CAAC,GAAGE,aAAa,CAACM,IAAlC;IACA,MAAMO,OAAO,GAAGd,CAAC,GAAGC,aAAa,CAACQ,GAAlC;IACA,MAAMM,QAAQ,GAAGX,eAAe,CAACvB,aAAjC;IACA,MAAMmC,MAAM,GAAGvR,QAAQ,CAACyB,aAAT,CAAuB,KAAvB,CAAf;IACA8P,MAAM,CAAC7P,SAAP,CAAiBC,GAAjB,CAAqB,oBAArB;IACA4P,MAAM,CAACxI,KAAP,CAAa+H,IAAb,GAAqB,GAAEM,OAAO,GAAGF,MAAO,IAAxC;IACAK,MAAM,CAACxI,KAAP,CAAaiI,GAAb,GAAoB,GAAEK,OAAO,GAAGH,MAAO,IAAvC;IACAK,MAAM,CAACxI,KAAP,CAAakI,MAAb,GAAuB,GAAEC,MAAM,GAAG,CAAE,IAApC;IACAK,MAAM,CAACxI,KAAP,CAAagI,KAAb,GAAsB,GAAEG,MAAM,GAAG,CAAE,IAAnC,CAjB4B,CAkB5B;IACA;;IACA,IAAInC,MAAM,CAAC/L,KAAP,IAAgB,IAApB,EAA0B;MACtBuO,MAAM,CAACxI,KAAP,CAAayI,eAAb,GAA+BzC,MAAM,CAAC/L,KAAtC;IACH;;IACDuO,MAAM,CAACxI,KAAP,CAAa0I,kBAAb,GAAmC,GAAEH,QAAS,IAA9C;;IACA,KAAKlB,iBAAL,CAAuBxO,WAAvB,CAAmC2P,MAAnC,EAxB4B,CAyB5B;IACA;;;IACAG,yBAAyB,CAACH,MAAD,CAAzB;IACAA,MAAM,CAACxI,KAAP,CAAa4I,SAAb,GAAyB,UAAzB,CA5B4B,CA6B5B;;IACA,MAAMC,SAAS,GAAG,IAAI/C,SAAJ,CAAc,IAAd,EAAoB0C,MAApB,EAA4BxC,MAA5B,CAAlB;IACA6C,SAAS,CAAC5C,KAAV,GAAkB;IAAE;IAApB,CA/B4B,CAgC5B;;IACA,KAAKgB,cAAL,CAAoBrO,GAApB,CAAwBiQ,SAAxB;;IACA,IAAI,CAAC7C,MAAM,CAAC8C,UAAZ,EAAwB;MACpB,KAAKC,0BAAL,GAAkCF,SAAlC;IACH,CApC2B,CAqC5B;IACA;;;IACA,KAAKG,sBAAL,CAA4B,MAAM;MAC9B,MAAMC,2BAA2B,GAAGJ,SAAS,KAAK,KAAKE,0BAAvD;MACAF,SAAS,CAAC5C,KAAV,GAAkB;MAAE;MAApB,CAF8B,CAG9B;MACA;MACA;MACA;;MACA,IAAI,CAACD,MAAM,CAAC8C,UAAR,KAAuB,CAACG,2BAAD,IAAgC,CAAC,KAAKjC,cAA7D,CAAJ,EAAkF;QAC9E6B,SAAS,CAAC3C,OAAV;MACH;IACJ,CAVD,EAUGqC,QAVH;;IAWA,OAAOM,SAAP;EACH;EACD;;;EACA1C,aAAa,CAAC0C,SAAD,EAAY;IACrB,MAAMK,SAAS,GAAG,KAAKjC,cAAL,CAAoBkC,MAApB,CAA2BN,SAA3B,CAAlB;;IACA,IAAIA,SAAS,KAAK,KAAKE,0BAAvB,EAAmD;MAC/C,KAAKA,0BAAL,GAAkC,IAAlC;IACH,CAJoB,CAKrB;;;IACA,IAAI,CAAC,KAAK9B,cAAL,CAAoBmC,IAAzB,EAA+B;MAC3B,KAAK1B,cAAL,GAAsB,IAAtB;IACH,CARoB,CASrB;;;IACA,IAAI,CAACwB,SAAL,EAAgB;MACZ;IACH;;IACD,MAAMG,QAAQ,GAAGR,SAAS,CAACzD,OAA3B;IACA,MAAMwC,eAAe,GAAGjG,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBwE,4BAAlB,CAAd,EAA+DyC,SAAS,CAAC7C,MAAV,CAAiB6B,SAAhF,CAAxB;IACAwB,QAAQ,CAACrJ,KAAT,CAAe0I,kBAAf,GAAqC,GAAEd,eAAe,CAACtB,YAAa,IAApE;IACA+C,QAAQ,CAACrJ,KAAT,CAAesJ,OAAf,GAAyB,GAAzB;IACAT,SAAS,CAAC5C,KAAV,GAAkB;IAAE;IAApB,CAjBqB,CAkBrB;;IACA,KAAK+C,sBAAL,CAA4B,MAAM;MAC9BH,SAAS,CAAC5C,KAAV,GAAkB;MAAE;MAApB;MACAoD,QAAQ,CAACE,UAAT,CAAoBvQ,WAApB,CAAgCqQ,QAAhC;IACH,CAHD,EAGGzB,eAAe,CAACtB,YAHnB;EAIH;EACD;;;EACAkD,UAAU,GAAG;IACT,KAAKvC,cAAL,CAAoBxK,OAApB,CAA4B+L,MAAM,IAAIA,MAAM,CAACtC,OAAP,EAAtC;EACH;EACD;;;EACAuD,uBAAuB,GAAG;IACtB,KAAKxC,cAAL,CAAoBxK,OAApB,CAA4B+L,MAAM,IAAI;MAClC,IAAI,CAACA,MAAM,CAACxC,MAAP,CAAc8C,UAAnB,EAA+B;QAC3BN,MAAM,CAACtC,OAAP;MACH;IACJ,CAJD;EAKH;EACD;;;EACAwD,kBAAkB,CAAC3C,mBAAD,EAAsB;IACpC,MAAM3B,OAAO,GAAGhQ,aAAa,CAAC2R,mBAAD,CAA7B;;IACA,IAAI,CAAC3B,OAAD,IAAYA,OAAO,KAAK,KAAKuE,eAAjC,EAAkD;MAC9C;IACH,CAJmC,CAKpC;;;IACA,KAAKC,oBAAL;;IACA,KAAKD,eAAL,GAAuBvE,OAAvB;;IACA,KAAKyE,eAAL,CAAqBnD,iBAArB;EACH;EACD;AACJ;AACA;AACA;;;EACIoD,WAAW,CAACC,KAAD,EAAQ;IACf,IAAIA,KAAK,CAAC3Q,IAAN,KAAe,WAAnB,EAAgC;MAC5B,KAAK4Q,YAAL,CAAkBD,KAAlB;IACH,CAFD,MAGK,IAAIA,KAAK,CAAC3Q,IAAN,KAAe,YAAnB,EAAiC;MAClC,KAAK6Q,aAAL,CAAmBF,KAAnB;IACH,CAFI,MAGA;MACD,KAAKG,YAAL;IACH,CATc,CAUf;IACA;IACA;;;IACA,IAAI,CAAC,KAAK/C,0BAAV,EAAsC;MAClC,KAAK0C,eAAL,CAAqBlD,eAArB;;MACA,KAAKQ,0BAAL,GAAkC,IAAlC;IACH;EACJ;EACD;;;EACA6C,YAAY,CAACD,KAAD,EAAQ;IAChB;IACA;IACA,MAAMI,eAAe,GAAGxV,+BAA+B,CAACoV,KAAD,CAAvD;IACA,MAAMK,gBAAgB,GAAG,KAAKC,oBAAL,IACrB9J,IAAI,CAAC+J,GAAL,KAAa,KAAKD,oBAAL,GAA4B9D,wBAD7C;;IAEA,IAAI,CAAC,KAAKM,OAAL,CAAa0D,cAAd,IAAgC,CAACJ,eAAjC,IAAoD,CAACC,gBAAzD,EAA2E;MACvE,KAAKpD,cAAL,GAAsB,IAAtB;MACA,KAAKM,YAAL,CAAkByC,KAAK,CAACS,OAAxB,EAAiCT,KAAK,CAACU,OAAvC,EAAgD,KAAK5D,OAAL,CAAa6D,YAA7D;IACH;EACJ;EACD;;;EACAT,aAAa,CAACF,KAAD,EAAQ;IACjB,IAAI,CAAC,KAAKlD,OAAL,CAAa0D,cAAd,IAAgC,CAAC3V,gCAAgC,CAACmV,KAAD,CAArE,EAA8E;MAC1E;MACA;MACA;MACA,KAAKM,oBAAL,GAA4B9J,IAAI,CAAC+J,GAAL,EAA5B;MACA,KAAKtD,cAAL,GAAsB,IAAtB,CAL0E,CAM1E;MACA;;MACA,MAAM2D,OAAO,GAAGZ,KAAK,CAACa,cAAtB;;MACA,KAAK,IAAIjM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgM,OAAO,CAAC1L,MAA5B,EAAoCN,CAAC,EAArC,EAAyC;QACrC,KAAK2I,YAAL,CAAkBqD,OAAO,CAAChM,CAAD,CAAP,CAAW6L,OAA7B,EAAsCG,OAAO,CAAChM,CAAD,CAAP,CAAW8L,OAAjD,EAA0D,KAAK5D,OAAL,CAAa6D,YAAvE;MACH;IACJ;EACJ;EACD;;;EACAR,YAAY,GAAG;IACX,IAAI,CAAC,KAAKlD,cAAV,EAA0B;MACtB;IACH;;IACD,KAAKA,cAAL,GAAsB,KAAtB,CAJW,CAKX;;IACA,KAAKC,cAAL,CAAoBxK,OAApB,CAA4B+L,MAAM,IAAI;MAClC;MACA;MACA,MAAMqC,SAAS,GAAGrC,MAAM,CAACvC,KAAP,KAAiB;MAAE;MAAnB,GACduC,MAAM,CAACxC,MAAP,CAAc8E,oBAAd,IAAsCtC,MAAM,CAACvC,KAAP,KAAiB;MAAE;MAD7D;;MAEA,IAAI,CAACuC,MAAM,CAACxC,MAAP,CAAc8C,UAAf,IAA6B+B,SAAjC,EAA4C;QACxCrC,MAAM,CAACtC,OAAP;MACH;IACJ,CARD;EASH;EACD;;;EACA8C,sBAAsB,CAAC+B,EAAD,EAAKC,KAAK,GAAG,CAAb,EAAgB;IAClC,KAAKlE,OAAL,CAAamE,iBAAb,CAA+B,MAAMC,UAAU,CAACH,EAAD,EAAKC,KAAL,CAA/C;EACH;EACD;;;EACAnB,eAAe,CAACsB,UAAD,EAAa;IACxB,KAAKrE,OAAL,CAAamE,iBAAb,CAA+B,MAAM;MACjCE,UAAU,CAAC1O,OAAX,CAAoBrD,IAAD,IAAU;QACzB,KAAKuQ,eAAL,CAAqByB,gBAArB,CAAsChS,IAAtC,EAA4C,IAA5C,EAAkDoN,mBAAlD;MACH,CAFD;IAGH,CAJD;EAKH;EACD;;;EACAoD,oBAAoB,GAAG;IACnB,IAAI,KAAKD,eAAT,EAA0B;MACtBjD,iBAAiB,CAACjK,OAAlB,CAA2BrD,IAAD,IAAU;QAChC,KAAKuQ,eAAL,CAAqB0B,mBAArB,CAAyCjS,IAAzC,EAA+C,IAA/C,EAAqDoN,mBAArD;MACH,CAFD;;MAGA,IAAI,KAAKW,0BAAT,EAAqC;QACjCR,eAAe,CAAClK,OAAhB,CAAyBrD,IAAD,IAAU;UAC9B,KAAKuQ,eAAL,CAAqB0B,mBAArB,CAAyCjS,IAAzC,EAA+C,IAA/C,EAAqDoN,mBAArD;QACH,CAFD;MAGH;IACJ;EACJ;;AApNgB;AAsNrB;;;AACA,SAASmC,yBAAT,CAAmCvD,OAAnC,EAA4C;EACxC;EACA;EACA;EACAxN,MAAM,CAACY,gBAAP,CAAwB4M,OAAxB,EAAiCkG,gBAAjC,CAAkD,SAAlD;AACH;AACD;AACA;AACA;;;AACA,SAASlD,wBAAT,CAAkCb,CAAlC,EAAqCC,CAArC,EAAwC+D,IAAxC,EAA8C;EAC1C,MAAMC,KAAK,GAAG9J,IAAI,CAACtD,GAAL,CAASsD,IAAI,CAAC+J,GAAL,CAASlE,CAAC,GAAGgE,IAAI,CAACxD,IAAlB,CAAT,EAAkCrG,IAAI,CAAC+J,GAAL,CAASlE,CAAC,GAAGgE,IAAI,CAACG,KAAlB,CAAlC,CAAd;EACA,MAAMC,KAAK,GAAGjK,IAAI,CAACtD,GAAL,CAASsD,IAAI,CAAC+J,GAAL,CAASjE,CAAC,GAAG+D,IAAI,CAACtD,GAAlB,CAAT,EAAiCvG,IAAI,CAAC+J,GAAL,CAASjE,CAAC,GAAG+D,IAAI,CAACK,MAAlB,CAAjC,CAAd;EACA,OAAOlK,IAAI,CAACmK,IAAL,CAAUL,KAAK,GAAGA,KAAR,GAAgBG,KAAK,GAAGA,KAAlC,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMG,yBAAyB,GAAG,IAAIvY,cAAJ,CAAmB,2BAAnB,CAAlC;;AACA,MAAMwY,SAAN,CAAgB;EACZjV,WAAW,CAACsD,WAAD,EAAc4R,MAAd,EAAsBzM,QAAtB,EAAgC0M,aAAhC,EAA+CC,cAA/C,EAA+D;IACtE,KAAK9R,WAAL,GAAmBA,WAAnB;IACA,KAAK8R,cAAL,GAAsBA,cAAtB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAK/D,MAAL,GAAc,CAAd;IACA,KAAKvO,SAAL,GAAiB,KAAjB;IACA;;IACA,KAAKoC,cAAL,GAAsB,KAAtB;IACA,KAAKmQ,cAAL,GAAsBF,aAAa,IAAI,EAAvC;IACA,KAAKG,eAAL,GAAuB,IAAIxF,cAAJ,CAAmB,IAAnB,EAAyBoF,MAAzB,EAAiC5R,WAAjC,EAA8CmF,QAA9C,CAAvB;EACH;EACD;AACJ;AACA;AACA;;;EACgB,IAAR1F,QAAQ,GAAG;IAAE,OAAO,KAAKD,SAAZ;EAAwB;;EAC7B,IAARC,QAAQ,CAACC,KAAD,EAAQ;IAChB,IAAIA,KAAJ,EAAW;MACP,KAAK2P,uBAAL;IACH;;IACD,KAAK7P,SAAL,GAAiBE,KAAjB;;IACA,KAAKuS,4BAAL;EACH;EACD;AACJ;AACA;AACA;;;EACe,IAAPC,OAAO,GAAG;IAAE,OAAO,KAAKC,QAAL,IAAiB,KAAKnS,WAAL,CAAiBC,aAAzC;EAAyD;;EAC9D,IAAPiS,OAAO,CAACA,OAAD,EAAU;IACjB,KAAKC,QAAL,GAAgBD,OAAhB;;IACA,KAAKD,4BAAL;EACH;;EACDG,QAAQ,GAAG;IACP,KAAKxQ,cAAL,GAAsB,IAAtB;;IACA,KAAKqQ,4BAAL;EACH;;EACDI,WAAW,GAAG;IACV,KAAKL,eAAL,CAAqBxC,oBAArB;EACH;EACD;;;EACAJ,UAAU,GAAG;IACT,KAAK4C,eAAL,CAAqB5C,UAArB;EACH;EACD;;;EACAC,uBAAuB,GAAG;IACtB,KAAK2C,eAAL,CAAqB3C,uBAArB;EACH;EACD;AACJ;AACA;AACA;;;EACoB,IAAZiB,YAAY,GAAG;IACf,OAAO;MACH5C,QAAQ,EAAE,KAAKA,QADZ;MAEHK,MAAM,EAAE,KAAKA,MAFV;MAGHlO,KAAK,EAAE,KAAKA,KAHT;MAIH4N,SAAS,EAAElG,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKuK,cAAL,CAAoBtE,SAAtC,CAAd,EAAiE,KAAKqE,cAAL,KAAwB,gBAAxB,GAA2C;QAAE7F,aAAa,EAAE,CAAjB;QAAoBC,YAAY,EAAE;MAAlC,CAA3C,GAAmF,EAApJ,CAAd,EAAwK,KAAKuB,SAA7K,CAJR;MAKHiD,oBAAoB,EAAE,KAAKqB,cAAL,CAAoBrB;IALvC,CAAP;EAOH;EACD;AACJ;AACA;AACA;;;EACsB,IAAdP,cAAc,GAAG;IACjB,OAAO,KAAK1Q,QAAL,IAAiB,CAAC,CAAC,KAAKsS,cAAL,CAAoBtS,QAA9C;EACH;EACD;;;EACAwS,4BAA4B,GAAG;IAC3B,IAAI,CAAC,KAAKxS,QAAN,IAAkB,KAAKmC,cAA3B,EAA2C;MACvC,KAAKoQ,eAAL,CAAqB1C,kBAArB,CAAwC,KAAK4C,OAA7C;IACH;EACJ;EACD;;;EACAI,MAAM,CAACC,SAAD,EAAYnF,CAAC,GAAG,CAAhB,EAAmBxB,MAAnB,EAA2B;IAC7B,IAAI,OAAO2G,SAAP,KAAqB,QAAzB,EAAmC;MAC/B,OAAO,KAAKP,eAAL,CAAqB9E,YAArB,CAAkCqF,SAAlC,EAA6CnF,CAA7C,EAAgD7F,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK8I,YAAvB,CAAd,EAAoD1E,MAApD,CAAhD,CAAP;IACH,CAFD,MAGK;MACD,OAAO,KAAKoG,eAAL,CAAqB9E,YAArB,CAAkC,CAAlC,EAAqC,CAArC,EAAwC3F,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK8I,YAAvB,CAAd,EAAoDiC,SAApD,CAAxC,CAAP;IACH;EACJ;;AAtFW;;AAwFhBZ,SAAS,CAAC5S,UAAV,GAAuB,CACnB;EAAEC,IAAI,EAAEpF,SAAR;EAAmBqF,IAAI,EAAE,CAAC;IACd2L,QAAQ,EAAE,2BADI;IAEd4H,QAAQ,EAAE,WAFI;IAGd3H,IAAI,EAAE;MACF,SAAS,YADP;MAEF,gCAAgC;IAF9B;EAHQ,CAAD;AAAzB,CADmB,CAAvB;;AAUA8G,SAAS,CAACvS,cAAV,GAA2B,MAAM,CAC7B;EAAEJ,IAAI,EAAEnF;AAAR,CAD6B,EAE7B;EAAEmF,IAAI,EAAElF;AAAR,CAF6B,EAG7B;EAAEkF,IAAI,EAAE7D;AAAR,CAH6B,EAI7B;EAAE6D,IAAI,EAAEK,SAAR;EAAmBN,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1F;EAAR,CAAD,EAAqB;IAAE0F,IAAI,EAAEzF,MAAR;IAAgB0F,IAAI,EAAE,CAACyS,yBAAD;EAAtB,CAArB;AAA/B,CAJ6B,EAK7B;EAAE1S,IAAI,EAAEwF,MAAR;EAAgBzF,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1F;EAAR,CAAD,EAAqB;IAAE0F,IAAI,EAAEzF,MAAR;IAAgB0F,IAAI,EAAE,CAAC1D,qBAAD;EAAtB,CAArB;AAA5B,CAL6B,CAAjC;;AAOAoW,SAAS,CAACc,cAAV,GAA2B;EACvB5S,KAAK,EAAE,CAAC;IAAEb,IAAI,EAAEjF,KAAR;IAAekF,IAAI,EAAE,CAAC,gBAAD;EAArB,CAAD,CADgB;EAEvByT,SAAS,EAAE,CAAC;IAAE1T,IAAI,EAAEjF,KAAR;IAAekF,IAAI,EAAE,CAAC,oBAAD;EAArB,CAAD,CAFY;EAGvByO,QAAQ,EAAE,CAAC;IAAE1O,IAAI,EAAEjF,KAAR;IAAekF,IAAI,EAAE,CAAC,mBAAD;EAArB,CAAD,CAHa;EAIvB8O,MAAM,EAAE,CAAC;IAAE/O,IAAI,EAAEjF,KAAR;IAAekF,IAAI,EAAE,CAAC,iBAAD;EAArB,CAAD,CAJe;EAKvBwO,SAAS,EAAE,CAAC;IAAEzO,IAAI,EAAEjF,KAAR;IAAekF,IAAI,EAAE,CAAC,oBAAD;EAArB,CAAD,CALY;EAMvBQ,QAAQ,EAAE,CAAC;IAAET,IAAI,EAAEjF,KAAR;IAAekF,IAAI,EAAE,CAAC,mBAAD;EAArB,CAAD,CANa;EAOvBiT,OAAO,EAAE,CAAC;IAAElT,IAAI,EAAEjF,KAAR;IAAekF,IAAI,EAAE,CAAC,kBAAD;EAArB,CAAD;AAPc,CAA3B;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM0T,eAAN,CAAsB;;AAEtBA,eAAe,CAAC5T,UAAhB,GAA6B,CACzB;EAAEC,IAAI,EAAE3F,QAAR;EAAkB4F,IAAI,EAAE,CAAC;IACbC,OAAO,EAAE,CAACzC,eAAD,EAAkBrB,cAAlB,CADI;IAEb+D,OAAO,EAAE,CAACwS,SAAD,EAAYlV,eAAZ,CAFI;IAGbgP,YAAY,EAAE,CAACkG,SAAD;EAHD,CAAD;AAAxB,CADyB,CAA7B;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMiB,iBAAN,CAAwB;EACpBlW,WAAW,CAACoV,cAAD,EAAiB;IACxB,KAAKA,cAAL,GAAsBA,cAAtB;IACA;;IACA,KAAKjG,KAAL,GAAa,WAAb;IACA;;IACA,KAAKpM,QAAL,GAAgB,KAAhB;EACH;;AAPmB;;AASxBmT,iBAAiB,CAAC7T,UAAlB,GAA+B,CAC3B;EAAEC,IAAI,EAAEhF,SAAR;EAAmBiF,IAAI,EAAE,CAAC;IACd4T,aAAa,EAAE5Y,iBAAiB,CAAC6Y,IADnB;IAEdC,eAAe,EAAE7Y,uBAAuB,CAAC8Y,MAF3B;IAGdpI,QAAQ,EAAE,qBAHI;IAIdqI,QAAQ,EAAE,EAJI;IAKdpI,IAAI,EAAE;MACF,SAAS,qBADP;MAEF,6CAA6C,2BAF3C;MAGF,uCAAuC,qBAHrC;MAIF,wCAAwC,UAJtC;MAKF,mCAAmC;IALjC,CALQ;IAYdqI,MAAM,EAAE,CAAC,whCAAD;EAZM,CAAD;AAAzB,CAD2B,CAA/B;;AAgBAN,iBAAiB,CAACxT,cAAlB,GAAmC,MAAM,CACrC;EAAEJ,IAAI,EAAEwF,MAAR;EAAgBzF,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1F;EAAR,CAAD,EAAqB;IAAE0F,IAAI,EAAEzF,MAAR;IAAgB0F,IAAI,EAAE,CAAC1D,qBAAD;EAAtB,CAArB;AAA5B,CADqC,CAAzC;;AAGAqX,iBAAiB,CAACH,cAAlB,GAAmC;EAC/B5G,KAAK,EAAE,CAAC;IAAE7M,IAAI,EAAEjF;EAAR,CAAD,CADwB;EAE/B0F,QAAQ,EAAE,CAAC;IAAET,IAAI,EAAEjF;EAAR,CAAD;AAFqB,CAAnC;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMoZ,uBAAN,CAA8B;;AAE9BA,uBAAuB,CAACpU,UAAxB,GAAqC,CACjC;EAAEC,IAAI,EAAE3F,QAAR;EAAkB4F,IAAI,EAAE,CAAC;IACbC,OAAO,EAAE,CAACzC,eAAD,CADI;IAEb0C,OAAO,EAAE,CAACyT,iBAAD,CAFI;IAGbnH,YAAY,EAAE,CAACmH,iBAAD;EAHD,CAAD;AAAxB,CADiC,CAArC;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,MAAMQ,2BAA2B,GAAG,IAAIja,cAAJ,CAAmB,6BAAnB,CAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,MAAMka,eAAN,CAAsB;;AAEtB,MAAMC,qBAAqB,GAAGhU,aAAa,CAAC+T,eAAD,CAA3C,C,CACA;;;AACA,IAAIE,wBAAwB,GAAG,CAA/B;;AACA,MAAMC,gBAAN,SAA+BF,qBAA/B,CAAqD;EACjD5W,WAAW,CAACsE,MAAD,EAAS;IAChB,IAAIoD,EAAJ;;IACA;IACA;;IACA,KAAKqP,QAAL,GAAiB,sBAAqBF,wBAAwB,EAAG,EAAjE;IACA,KAAKG,MAAL,GAAc,CAACtP,EAAE,GAAGpD,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAAC2S,WAA7D,MAA8E,IAA9E,IAAsFvP,EAAE,KAAK,KAAK,CAAlG,GAAsGA,EAAtG,GAA2G,KAAzH;EACH;;AAPgD;;AASrDoP,gBAAgB,CAACzU,UAAjB,GAA8B,CAC1B;EAAEC,IAAI,EAAEpF;AAAR,CAD0B,CAA9B;;AAGA4Z,gBAAgB,CAACpU,cAAjB,GAAkC,MAAM,CACpC;EAAEJ,IAAI,EAAEK,SAAR;EAAmBN,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEzF,MAAR;IAAgB0F,IAAI,EAAE,CAACmU,2BAAD;EAAtB,CAAD,EAAyD;IAAEpU,IAAI,EAAE1F;EAAR,CAAzD;AAA/B,CADoC,CAAxC;;AAGAka,gBAAgB,CAACf,cAAjB,GAAkC;EAC9BmB,KAAK,EAAE,CAAC;IAAE5U,IAAI,EAAEjF;EAAR,CAAD;AADuB,CAAlC;AAGA;AACA;AACA;AACA;AACA;;AACA,MAAM8Z,YAAY,GAAG,IAAI1a,cAAJ,CAAmB,aAAnB,CAArB;AACA;AACA;AACA;;AACA,MAAM2a,WAAN,SAA0BN,gBAA1B,CAA2C;;AAE3CM,WAAW,CAAC/U,UAAZ,GAAyB,CACrB;EAAEC,IAAI,EAAEhF,SAAR;EAAmBiF,IAAI,EAAE,CAAC;IACd2L,QAAQ,EAAE,cADI;IAEd4H,QAAQ,EAAE,aAFI;IAGdS,QAAQ,EAAE,yLAHI;IAIdJ,aAAa,EAAE5Y,iBAAiB,CAAC6Y,IAJnB;IAKdC,eAAe,EAAE7Y,uBAAuB,CAAC8Y,MAL3B;IAMde,MAAM,EAAE,CAAC,UAAD,CANM;IAOdlJ,IAAI,EAAE;MACF,SAAS,cADP;MAEF,eAAe,yBAFb;MAGF,wBAAwB,qCAHtB;MAIF,0BAA0B,0BAJxB;MAKF,iCAAiC;IAL/B,CAPQ;IAcdjB,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEgK,YAAX;MAAyBG,WAAW,EAAEF;IAAtC,CAAD,CAdG;IAedZ,MAAM,EAAE,CAAC,mkBAAD;EAfM,CAAD;AAAzB,CADqB,CAAzB;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,IAAIe,gBAAgB,GAAG,CAAvB;AACA;;AACA,MAAMC,wBAAN,CAA+B;EAC3BxX,WAAW;EACX;EACAyX,MAFW;EAGX;EACAC,WAAW,GAAG,KAJH,EAIU;IACjB,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,WAAL,GAAmBA,WAAnB;EACH;;AAR0B;;AAU/B,MAAMC,cAAN,CAAqB;EACjB3X,WAAW,CAAC4X,QAAD,EAAWC,kBAAX,EAA+BC,OAA/B,EAAwCC,KAAxC,EAA+C;IACtD,KAAKH,QAAL,GAAgBA,QAAhB;IACA,KAAKC,kBAAL,GAA0BA,kBAA1B;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,SAAL,GAAiB,KAAjB;IACA,KAAKC,OAAL,GAAe,KAAf;IACA,KAAKnV,SAAL,GAAiB,KAAjB;IACA,KAAKoV,oBAAL,GAA4B,EAA5B;IACA;;IACA,KAAKC,EAAL,GAAW,cAAaZ,gBAAgB,EAAG,EAA3C;IACA;IACA;;IACA,KAAKa,iBAAL,GAAyB,IAAI3a,YAAJ,EAAzB;IACA;;IACA,KAAK4a,aAAL,GAAqB,IAAI9Z,OAAJ,EAArB;EACH;EACD;;;EACY,IAAR+Z,QAAQ,GAAG;IAAE,OAAO,KAAKR,OAAL,IAAgB,KAAKA,OAAL,CAAaQ,QAApC;EAA+C;EAChE;;;EACY,IAARC,QAAQ,GAAG;IAAE,OAAO,KAAKP,SAAZ;EAAwB;EACzC;;;EACY,IAARjV,QAAQ,GAAG;IAAE,OAAQ,KAAKgV,KAAL,IAAc,KAAKA,KAAL,CAAWhV,QAA1B,IAAuC,KAAKD,SAAnD;EAA+D;;EACpE,IAARC,QAAQ,CAACC,KAAD,EAAQ;IAAE,KAAKF,SAAL,GAAiB1E,qBAAqB,CAAC4E,KAAD,CAAtC;EAAgD;EACtE;;;EACiB,IAAbY,aAAa,GAAG;IAAE,OAAO,KAAKkU,OAAL,IAAgB,KAAKA,OAAL,CAAalU,aAApC;EAAoD;EAC1E;AACJ;AACA;AACA;AACA;AACA;;;EACc,IAAN4U,MAAM,GAAG;IACT,OAAO,KAAKP,OAAZ;EACH;EACD;AACJ;AACA;AACA;;;EACiB,IAATQ,SAAS,GAAG;IACZ;IACA,OAAO,CAAC,KAAKC,eAAL,GAAuBC,WAAvB,IAAsC,EAAvC,EAA2CC,IAA3C,EAAP;EACH;EACD;;;EACAC,MAAM,GAAG;IACL,IAAI,CAAC,KAAKb,SAAV,EAAqB;MACjB,KAAKA,SAAL,GAAiB,IAAjB;;MACA,KAAKH,kBAAL,CAAwBiB,YAAxB;;MACA,KAAKC,yBAAL;IACH;EACJ;EACD;;;EACAC,QAAQ,GAAG;IACP,IAAI,KAAKhB,SAAT,EAAoB;MAChB,KAAKA,SAAL,GAAiB,KAAjB;;MACA,KAAKH,kBAAL,CAAwBiB,YAAxB;;MACA,KAAKC,yBAAL;IACH;EACJ;EACD;;;EACAE,KAAK,CAACC,OAAD,EAAUC,OAAV,EAAmB;IACpB;IACA;IACA,MAAM7K,OAAO,GAAG,KAAKoK,eAAL,EAAhB;;IACA,IAAI,OAAOpK,OAAO,CAAC2K,KAAf,KAAyB,UAA7B,EAAyC;MACrC3K,OAAO,CAAC2K,KAAR,CAAcE,OAAd;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIC,eAAe,GAAG;IACd,IAAI,CAAC,KAAKnB,OAAV,EAAmB;MACf,KAAKA,OAAL,GAAe,IAAf;;MACA,KAAKJ,kBAAL,CAAwBiB,YAAxB;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIO,iBAAiB,GAAG;IAChB,IAAI,KAAKpB,OAAT,EAAkB;MACd,KAAKA,OAAL,GAAe,KAAf;;MACA,KAAKJ,kBAAL,CAAwBiB,YAAxB;IACH;EACJ;EACD;;;EACAQ,QAAQ,GAAG;IACP,OAAO,KAAKb,SAAZ;EACH;EACD;;;EACAc,cAAc,CAACtG,KAAD,EAAQ;IAClB,IAAI,CAACA,KAAK,CAACuG,OAAN,KAAkB1a,KAAlB,IAA2BmU,KAAK,CAACuG,OAAN,KAAkBza,KAA9C,KAAwD,CAACC,cAAc,CAACiU,KAAD,CAA3E,EAAoF;MAChF,KAAKwG,qBAAL,GADgF,CAEhF;;;MACAxG,KAAK,CAACyG,cAAN;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACID,qBAAqB,GAAG;IACpB,IAAI,CAAC,KAAK1W,QAAV,EAAoB;MAChB,KAAKiV,SAAL,GAAiB,KAAKM,QAAL,GAAgB,CAAC,KAAKN,SAAtB,GAAkC,IAAnD;;MACA,KAAKH,kBAAL,CAAwBiB,YAAxB;;MACA,KAAKC,yBAAL,CAA+B,IAA/B;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIY,gBAAgB,GAAG;IACf,OAAO,KAAKpB,QAAL,KAAkB,KAAKD,QAAL,GAAgB,KAAhB,GAAwB,IAA1C,CAAP;EACH;EACD;;;EACAsB,YAAY,GAAG;IACX,OAAO,KAAK7W,QAAL,GAAgB,IAAhB,GAAuB,GAA9B;EACH;EACD;;;EACA2V,eAAe,GAAG;IACd,OAAO,KAAKd,QAAL,CAAcrU,aAArB;EACH;;EACDsW,kBAAkB,GAAG;IACjB;IACA;IACA;IACA;IACA;IACA,IAAI,KAAK7B,SAAT,EAAoB;MAChB,MAAMS,SAAS,GAAG,KAAKA,SAAvB;;MACA,IAAIA,SAAS,KAAK,KAAKP,oBAAvB,EAA6C;QACzC,KAAKA,oBAAL,GAA4BO,SAA5B;;QACA,KAAKJ,aAAL,CAAmBrT,IAAnB;MACH;IACJ;EACJ;;EACD2Q,WAAW,GAAG;IACV,KAAK0C,aAAL,CAAmBzS,QAAnB;EACH;EACD;;;EACAmT,yBAAyB,CAACrB,WAAW,GAAG,KAAf,EAAsB;IAC3C,KAAKU,iBAAL,CAAuB0B,IAAvB,CAA4B,IAAItC,wBAAJ,CAA6B,IAA7B,EAAmCE,WAAnC,CAA5B;EACH;;AAvJgB;;AAyJrBC,cAAc,CAACtV,UAAf,GAA4B,CACxB;EAAEC,IAAI,EAAEpF;AAAR,CADwB,CAA5B;;AAGAya,cAAc,CAACjV,cAAf,GAAgC,MAAM,CAClC;EAAEJ,IAAI,EAAEnF;AAAR,CADkC,EAElC;EAAEmF,IAAI,EAAE5E;AAAR,CAFkC,EAGlC;EAAE4E,IAAI,EAAEK;AAAR,CAHkC,EAIlC;EAAEL,IAAI,EAAEwU;AAAR,CAJkC,CAAtC;;AAMAa,cAAc,CAAC5B,cAAf,GAAgC;EAC5B/S,KAAK,EAAE,CAAC;IAAEV,IAAI,EAAEjF;EAAR,CAAD,CADqB;EAE5B8a,EAAE,EAAE,CAAC;IAAE7V,IAAI,EAAEjF;EAAR,CAAD,CAFwB;EAG5B0F,QAAQ,EAAE,CAAC;IAAET,IAAI,EAAEjF;EAAR,CAAD,CAHkB;EAI5B+a,iBAAiB,EAAE,CAAC;IAAE9V,IAAI,EAAE3E;EAAR,CAAD;AAJS,CAAhC;AAMA;AACA;AACA;;AACA,MAAMoc,SAAN,SAAwBpC,cAAxB,CAAuC;EACnC3X,WAAW,CAACsO,OAAD,EAAU0L,iBAAV,EAA6B1V,MAA7B,EAAqCyT,KAArC,EAA4C;IACnD,MAAMzJ,OAAN,EAAe0L,iBAAf,EAAkC1V,MAAlC,EAA0CyT,KAA1C;EACH;;AAHkC;;AAKvCgC,SAAS,CAAC1X,UAAV,GAAuB,CACnB;EAAEC,IAAI,EAAEhF,SAAR;EAAmBiF,IAAI,EAAE,CAAC;IACd2L,QAAQ,EAAE,YADI;IAEd4H,QAAQ,EAAE,WAFI;IAGd3H,IAAI,EAAE;MACF,QAAQ,QADN;MAEF,mBAAmB,gBAFjB;MAGF,wBAAwB,UAHtB;MAIF,+BAA+B,UAJ7B;MAKF,sBAAsB,QALpB;MAMF,QAAQ,IANN;MAOF,wBAAwB,oBAPtB;MAQF,wBAAwB,qBARtB;MASF,+BAA+B,UAT7B;MAUF,WAAW,yBAVT;MAWF,aAAa,wBAXX;MAYF,SAAS;IAZP,CAHQ;IAiBdoI,QAAQ,EAAE,qkBAjBI;IAkBdJ,aAAa,EAAE5Y,iBAAiB,CAAC6Y,IAlBnB;IAmBdC,eAAe,EAAE7Y,uBAAuB,CAAC8Y,MAnB3B;IAoBdE,MAAM,EAAE,CAAC,w4CAAD;EApBM,CAAD;AAAzB,CADmB,CAAvB;;AAwBAuD,SAAS,CAACrX,cAAV,GAA2B,MAAM,CAC7B;EAAEJ,IAAI,EAAEnF;AAAR,CAD6B,EAE7B;EAAEmF,IAAI,EAAE5E;AAAR,CAF6B,EAG7B;EAAE4E,IAAI,EAAEK,SAAR;EAAmBN,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1F;EAAR,CAAD,EAAqB;IAAE0F,IAAI,EAAEzF,MAAR;IAAgB0F,IAAI,EAAE,CAACmU,2BAAD;EAAtB,CAArB;AAA/B,CAH6B,EAI7B;EAAEpU,IAAI,EAAE8U,WAAR;EAAqB/U,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1F;EAAR,CAAD,EAAqB;IAAE0F,IAAI,EAAEzF,MAAR;IAAgB0F,IAAI,EAAE,CAAC4U,YAAD;EAAtB,CAArB;AAAjC,CAJ6B,CAAjC;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8C,6BAAT,CAAuCC,WAAvC,EAAoDf,OAApD,EAA6DgB,YAA7D,EAA2E;EACvE,IAAIA,YAAY,CAAChS,MAAjB,EAAyB;IACrB,IAAIiS,YAAY,GAAGjB,OAAO,CAACkB,OAAR,EAAnB;IACA,IAAIC,MAAM,GAAGH,YAAY,CAACE,OAAb,EAAb;IACA,IAAIE,YAAY,GAAG,CAAnB;;IACA,KAAK,IAAI1S,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqS,WAAW,GAAG,CAAlC,EAAqCrS,CAAC,EAAtC,EAA0C;MACtC,IAAIuS,YAAY,CAACvS,CAAD,CAAZ,CAAgBkQ,KAAhB,IAAyBqC,YAAY,CAACvS,CAAD,CAAZ,CAAgBkQ,KAAhB,KAA0BuC,MAAM,CAACC,YAAD,CAA7D,EAA6E;QACzEA,YAAY;MACf;IACJ;;IACD,OAAOA,YAAP;EACH;;EACD,OAAO,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,wBAAT,CAAkCC,YAAlC,EAAgDC,YAAhD,EAA8DC,qBAA9D,EAAqFC,WAArF,EAAkG;EAC9F,IAAIH,YAAY,GAAGE,qBAAnB,EAA0C;IACtC,OAAOF,YAAP;EACH;;EACD,IAAIA,YAAY,GAAGC,YAAf,GAA8BC,qBAAqB,GAAGC,WAA1D,EAAuE;IACnE,OAAOhQ,IAAI,CAACtD,GAAL,CAAS,CAAT,EAAYmT,YAAY,GAAGG,WAAf,GAA6BF,YAAzC,CAAP;EACH;;EACD,OAAOC,qBAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,eAAN,CAAsB;;AAEtBA,eAAe,CAACxY,UAAhB,GAA6B,CACzB;EAAEC,IAAI,EAAE3F,QAAR;EAAkB4F,IAAI,EAAE,CAAC;IACbC,OAAO,EAAE,CAACyT,eAAD,EAAkB9X,YAAlB,EAAgC4B,eAAhC,EAAiD0W,uBAAjD,CADI;IAEbhU,OAAO,EAAE,CAACsX,SAAD,EAAY3C,WAAZ,CAFI;IAGbrI,YAAY,EAAE,CAACgL,SAAD,EAAY3C,WAAZ;EAHD,CAAD;AAAxB,CADyB,CAA7B;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASnY,eAAT,EAA0BK,kBAA1B,EAA8CyG,WAA9C,EAA2D6H,iBAA3D,EAA8EhO,sBAA9E,EAAsG2H,gBAAtG,EAAwH1B,eAAxH,EAAyIC,uBAAzI,EAAkK8G,uBAAlK,EAA2LuK,YAA3L,EAAyMT,2BAAzM,EAAsO1B,yBAAtO,EAAiQjV,eAAjQ,EAAkRkO,OAAlR,EAA2Ra,aAA3R,EAA0SxB,mBAA1S,EAA+T8J,WAA/T,EAA4U2C,SAA5U,EAAuVc,eAAvV,EAAwWrD,wBAAxW,EAAkYtB,iBAAlY,EAAqZO,uBAArZ,EAA8axB,SAA9a,EAAybgB,eAAzb,EAA0c1N,iBAA1c,EAA6d0E,gBAA7d,EAA+e+B,SAA/e,EAA0fc,cAA1f,EAA0gBtC,4BAA1gB,EAAwiBxP,OAAxiB,EAAijB8Y,gBAAjjB,EAAmkBa,cAAnkB,EAAmlBsC,6BAAnlB,EAAknBO,wBAAlnB,EAA4oBlL,4BAA5oB,EAA0qBrM,UAA1qB,EAAsrBQ,kBAAtrB,EAA0sBb,aAA1sB,EAAytBqB,eAAztB,EAA0uBgB,gBAA1uB,EAA4vBpB,aAA5vB,EAA2wBuK,QAA3wB,EAAqxBf,IAAI,IAAIzF,EAA7xB,EAAiyBjI,8BAA8B,IAAImb,0CAAn0B"},"metadata":{},"sourceType":"module"}