{"ast":null,"code":"import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n  get matAutosizeMinRows() {\n    return this.minRows;\n  }\n\n  set matAutosizeMinRows(value) {\n    this.minRows = value;\n  }\n\n  get matAutosizeMaxRows() {\n    return this.maxRows;\n  }\n\n  set matAutosizeMaxRows(value) {\n    this.maxRows = value;\n  }\n\n  get matAutosize() {\n    return this.enabled;\n  }\n\n  set matAutosize(value) {\n    this.enabled = value;\n  }\n\n  get matTextareaAutosize() {\n    return this.enabled;\n  }\n\n  set matTextareaAutosize(value) {\n    this.enabled = value;\n  }\n\n}\n\nMatTextareaAutosize.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n    exportAs: 'matTextareaAutosize',\n    inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n    host: {\n      'class': 'cdk-textarea-autosize mat-autosize',\n      // Textarea elements that have the directive applied should have a single row by default.\n      // Browsers normally show two rows by default and therefore this limits the minRows binding.\n      'rows': '1'\n    }\n  }]\n}];\nMatTextareaAutosize.propDecorators = {\n  matAutosizeMinRows: [{\n    type: Input\n  }],\n  matAutosizeMaxRows: [{\n    type: Input\n  }],\n  matAutosize: [{\n    type: Input,\n    args: ['mat-autosize']\n  }],\n  matTextareaAutosize: [{\n    type: Input\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\n\n\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n\nconst MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\nlet nextUniqueId = 0; // Boilerplate for applying mixins to MatInput.\n\n/** @docs-private */\n\nclass MatInputBase {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}\n\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\n\n\nclass MatInput extends _MatInputMixinBase {\n  constructor(_elementRef, _platform,\n  /** @docs-private */\n  ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, // TODO: Remove this once the legacy appearance has been removed. We only need\n  // to inject the form-field for determining whether the placeholder has been promoted.\n  _formField) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this.ngControl = ngControl;\n    this._autofillMonitor = _autofillMonitor;\n    this._formField = _formField;\n    this._uid = `mat-input-${nextUniqueId++}`;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.autofilled = false;\n    this._disabled = false;\n    this._required = false;\n    this._type = 'text';\n    this._readonly = false;\n    this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(t => getSupportedInputTypes().has(t));\n    const element = this._elementRef.nativeElement;\n    const nodeName = element.nodeName.toLowerCase(); // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n\n    this._inputValueAccessor = inputValueAccessor || element;\n    this._previousNativeValue = this.value; // Force setter to be called in case id was not specified.\n\n    this.id = this.id; // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', event => {\n          let el = event.target;\n\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = nodeName === 'select';\n    this._isTextarea = nodeName === 'textarea';\n\n    if (this._isNativeSelect) {\n      this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value); // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get id() {\n    return this._id;\n  }\n\n  set id(value) {\n    this._id = value || this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Input type of the element. */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    this._type = value || 'text';\n\n    this._validateType(); // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n\n\n    if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get value() {\n    return this._inputValueAccessor.value;\n  }\n\n  set value(value) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n  /** Whether the element is readonly. */\n\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  set readonly(value) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n\n\n    this._dirtyCheckNativeValue(); // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n    // present or not depends on a query which is prone to \"changed after checked\" errors.\n\n\n    this._dirtyCheckPlaceholder();\n  }\n  /** Focuses the input. */\n\n\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n\n  /** Callback for the cases where the focused state of the input changes. */\n  // tslint:disable:no-host-decorator-in-concrete\n  // tslint:enable:no-host-decorator-in-concrete\n\n\n  _focusChanged(isFocused) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n  _onInput() {// This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n  /** Does some manual dirty checking on the native input `placeholder` attribute. */\n\n\n  _dirtyCheckPlaceholder() {\n    var _a, _b; // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n    // screen readers will read it out twice: once from the label and once from the attribute.\n    // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n    // the only one that supports promoting the placeholder to a label.\n\n\n    const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n\n    if (placeholder !== this._previousPlaceholder) {\n      const element = this._elementRef.nativeElement;\n      this._previousPlaceholder = placeholder;\n      placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n    }\n  }\n  /** Does some manual dirty checking on the native input `value` property. */\n\n\n  _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n  /** Make sure the input is a supported type. */\n\n\n  _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n  /** Checks whether the input type is one of the types that are never empty. */\n\n\n  _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n  /** Checks whether the input is invalid based on the native validation. */\n\n\n  _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = this._elementRef.nativeElement.validity;\n    return validity && validity.badInput;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get empty() {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get shouldLabelFloat() {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement;\n      const firstOption = selectElement.options[0]; // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n\n      return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  setDescribedByIds(ids) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n\n}\n\nMatInput.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n    exportAs: 'matInput',\n    host: {\n      /**\n       * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n       */\n      'class': 'mat-input-element mat-form-field-autofill-control',\n      '[class.mat-input-server]': '_isServer',\n      // Native input properties that are overwritten by Angular inputs need to be synced with\n      // the native input element. Otherwise property bindings for those don't work.\n      '[attr.id]': 'id',\n      // At the time of writing, we have a lot of customer tests that look up the input based on its\n      // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n      // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n      '[attr.data-placeholder]': 'placeholder',\n      '[disabled]': 'disabled',\n      '[required]': 'required',\n      '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n      // Only mark the input as invalid for assistive technology if it has a value since the\n      // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n      '[attr.aria-invalid]': 'errorState && !empty',\n      '[attr.aria-required]': 'required'\n    },\n    providers: [{\n      provide: MatFormFieldControl,\n      useExisting: MatInput\n    }]\n  }]\n}];\n\nMatInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [MAT_INPUT_VALUE_ACCESSOR]\n  }]\n}, {\n  type: AutofillMonitor\n}, {\n  type: NgZone\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_FORM_FIELD]\n  }]\n}];\n\nMatInput.propDecorators = {\n  disabled: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  userAriaDescribedBy: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  value: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  _focusChanged: [{\n    type: HostListener,\n    args: ['focus', ['true']]\n  }, {\n    type: HostListener,\n    args: ['blur', ['false']]\n  }],\n  _onInput: [{\n    type: HostListener,\n    args: ['input']\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass MatInputModule {}\n\nMatInputModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [MatInput, MatTextareaAutosize],\n    imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n    exports: [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule, MatInput, MatTextareaAutosize],\n    providers: [ErrorStateMatcher]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };","map":{"version":3,"names":["CdkTextareaAutosize","AutofillMonitor","TextFieldModule","Directive","Input","InjectionToken","ElementRef","Optional","Self","Inject","NgZone","HostListener","NgModule","coerceBooleanProperty","getSupportedInputTypes","Platform","NgControl","NgForm","FormGroupDirective","mixinErrorState","ErrorStateMatcher","MatCommonModule","MatFormFieldControl","MatFormField","MAT_FORM_FIELD","MatFormFieldModule","Subject","MatTextareaAutosize","matAutosizeMinRows","minRows","value","matAutosizeMaxRows","maxRows","matAutosize","enabled","matTextareaAutosize","decorators","type","args","selector","exportAs","inputs","host","propDecorators","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","constructor","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","MatInput","_elementRef","_platform","inputValueAccessor","_autofillMonitor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","t","has","element","nativeElement","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","event","el","target","selectionStart","selectionEnd","setSelectionRange","_isServer","isBrowser","_isNativeSelect","_isTextarea","multiple","disabled","next","_id","required","_validateType","readonly","ngAfterViewInit","monitor","subscribe","isAutofilled","ngOnChanges","ngOnDestroy","complete","stopMonitoring","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","_a","_b","placeholder","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","ngDevMode","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","length","join","onContainerClick","providers","provide","useExisting","ctorParameters","undefined","errorStateMatcher","userAriaDescribedBy","MatInputModule","declarations","imports","exports"],"sources":["/Users/qisstpay/Documents/GitHub/prot-2/node_modules/@angular/material/fesm2015/input.js"],"sourcesContent":["import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.decorators = [\n    { type: Directive, args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1',\n                },\n            },] }\n];\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputMixinBase {\n    constructor(_elementRef, _platform, \n    /** @docs-private */\n    ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    let el = event.target;\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    // Only mark the input as invalid for assistive technology if it has a value since the\n                    // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                    '[attr.aria-invalid]': 'errorState && !empty',\n                    '[attr.aria-required]': 'required',\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n            },] }\n];\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    userAriaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}