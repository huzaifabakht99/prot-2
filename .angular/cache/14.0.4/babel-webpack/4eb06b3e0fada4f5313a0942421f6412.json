{"ast":null,"code":"import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent'\n  };\n} // Increasing integer for generating unique ids for radio components.\n\n\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\n\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\n\nclass MatRadioChange {\n  constructor(\n  /** The MatRadioButton that emits the change event. */\n  source,\n  /** The value of the MatRadioButton. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\n\n\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\n\nclass _MatRadioGroupBase {\n  constructor(_changeDetector) {\n    this._changeDetector = _changeDetector;\n    /** Selected value for the radio group. */\n\n    this._value = null;\n    /** The HTML name attribute applied to radio buttons in this group. */\n\n    this._name = `mat-radio-group-${nextUniqueId++}`;\n    /** The currently selected radio button. Should match value. */\n\n    this._selected = null;\n    /** Whether the `value` has been set to its initial value. */\n\n    this._isInitialized = false;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n\n    this._labelPosition = 'after';\n    /** Whether the radio group is disabled. */\n\n    this._disabled = false;\n    /** Whether the radio group is required. */\n\n    this._required = false;\n    /** The method to be called in order to update ngModel */\n\n    this._controlValueAccessorChangeFn = () => {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n\n\n    this.onTouched = () => {};\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n\n\n    this.change = new EventEmitter();\n  }\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n\n\n  get name() {\n    return this._name;\n  }\n\n  set name(value) {\n    this._name = value;\n\n    this._updateRadioButtonNames();\n  }\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n\n\n  get labelPosition() {\n    return this._labelPosition;\n  }\n\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n\n    this._markRadiosForCheck();\n  }\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n\n\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    this._checkSelectedRadioButton();\n  }\n  /** Whether the radio group is disabled */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    this._markRadiosForCheck();\n  }\n  /** Whether the radio group is required */\n\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n\n    this._markRadiosForCheck();\n  }\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n\n\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  _updateRadioButtonNames() {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n\n        radio._markForCheck();\n      });\n    }\n  }\n  /** Updates the `selected` radio button from the internal _value state. */\n\n\n  _updateSelectedRadioFromValue() {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n  /** Dispatch change event with current selection and group value. */\n\n\n  _emitChangeEvent() {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n\n\n  writeValue(value) {\n    this.value = value;\n\n    this._changeDetector.markForCheck();\n  }\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n\n\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n\n    this._changeDetector.markForCheck();\n  }\n\n}\n\n_MatRadioGroupBase.decorators = [{\n  type: Directive\n}];\n\n_MatRadioGroupBase.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}];\n\n_MatRadioGroupBase.propDecorators = {\n  change: [{\n    type: Output\n  }],\n  color: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }]\n};\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n\nclass MatRadioGroup extends _MatRadioGroupBase {}\n\nMatRadioGroup.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-radio-group',\n    exportAs: 'matRadioGroup',\n    providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, {\n      provide: MAT_RADIO_GROUP,\n      useExisting: MatRadioGroup\n    }],\n    host: {\n      'role': 'radiogroup',\n      'class': 'mat-radio-group'\n    }\n  }]\n}];\nMatRadioGroup.propDecorators = {\n  _radios: [{\n    type: ContentChildren,\n    args: [forwardRef(() => MatRadioButton), {\n      descendants: true\n    }]\n  }]\n}; // Boilerplate for applying mixins to MatRadioButton.\n\n/** @docs-private */\n\nclass MatRadioButtonBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n} // As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n\n\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\n\n\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n  constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n    super(elementRef);\n    this._changeDetector = _changeDetector;\n    this._focusMonitor = _focusMonitor;\n    this._radioDispatcher = _radioDispatcher;\n    this._animationMode = _animationMode;\n    this._providerOverride = _providerOverride;\n    this._uniqueId = `mat-radio-${++nextUniqueId}`;\n    /** The unique ID for the radio button. */\n\n    this.id = this._uniqueId;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n\n    this.change = new EventEmitter();\n    /** Whether this radio is checked. */\n\n    this._checked = false;\n    /** Value assigned to this radio. */\n\n    this._value = null;\n    /** Unregister function for _radioDispatcher */\n\n    this._removeUniqueSelectionListener = () => {}; // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n\n    this.radioGroup = radioGroup;\n\n    if (tabIndex) {\n      this.tabIndex = coerceNumberProperty(tabIndex, 0);\n    }\n\n    this._removeUniqueSelectionListener = _radioDispatcher.listen((id, name) => {\n      if (id !== this.id && name === this.name) {\n        this.checked = false;\n      }\n    });\n  }\n  /** Whether this radio button is checked. */\n\n\n  get checked() {\n    return this._checked;\n  }\n\n  set checked(value) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n  /** The value of this radio button. */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    if (this._value !== value) {\n      this._value = value;\n\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n\n\n  get labelPosition() {\n    return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  /** Whether the radio button is disabled. */\n\n\n  get disabled() {\n    return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n  }\n\n  set disabled(value) {\n    this._setDisabled(coerceBooleanProperty(value));\n  }\n  /** Whether the radio button is required. */\n\n\n  get required() {\n    return this._required || this.radioGroup && this.radioGroup.required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Theme color of the radio button. */\n\n\n  get color() {\n    return this._color || this.radioGroup && this.radioGroup.color || this._providerOverride && this._providerOverride.color || 'accent';\n  }\n\n  set color(newValue) {\n    this._color = newValue;\n  }\n  /** ID of the native input element inside `<mat-radio-button>` */\n\n\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /** Focuses the radio button. */\n\n\n  focus(options, origin) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n\n\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n\n      if (this.checked) {\n        this.radioGroup.selected = this;\n      } // Copy name from parent radio group\n\n\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin && this.radioGroup) {\n        this.radioGroup._touch();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    this._removeUniqueSelectionListener();\n  }\n  /** Dispatch change event with current value. */\n\n\n  _emitChangeEvent() {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n\n\n  _onInputChange(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n  /** Sets the disabled state and marks for check if a change occurred. */\n\n\n  _setDisabled(value) {\n    if (this._disabled !== value) {\n      this._disabled = value;\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n}\n\n_MatRadioButtonBase.decorators = [{\n  type: Directive\n}];\n\n_MatRadioButtonBase.ctorParameters = () => [{\n  type: _MatRadioGroupBase\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: FocusMonitor\n}, {\n  type: UniqueSelectionDispatcher\n}, {\n  type: String\n}, {\n  type: undefined\n}, {\n  type: String\n}];\n\n_MatRadioButtonBase.propDecorators = {\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  ariaDescribedby: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  checked: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n\nclass MatRadioButton extends _MatRadioButtonBase {\n  constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n    super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n  }\n\n}\n\nMatRadioButton.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-radio-button',\n    template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n    inputs: ['disableRipple', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matRadioButton',\n    host: {\n      'class': 'mat-radio-button',\n      '[class.mat-radio-checked]': 'checked',\n      '[class.mat-radio-disabled]': 'disabled',\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n      '[class.mat-primary]': 'color === \"primary\"',\n      '[class.mat-accent]': 'color === \"accent\"',\n      '[class.mat-warn]': 'color === \"warn\"',\n      // Needs to be removed since it causes some a11y issues (see #21266).\n      '[attr.tabindex]': 'null',\n      '[attr.id]': 'id',\n      '[attr.aria-label]': 'null',\n      '[attr.aria-labelledby]': 'null',\n      '[attr.aria-describedby]': 'null',\n      // Note: under normal conditions focus shouldn't land on this element, however it may be\n      // programmatically set, for example inside of a focus trap, in this case we want to forward\n      // the focus to the native element.\n      '(focus)': '_inputElement.nativeElement.focus()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n  }]\n}];\n\nMatRadioButton.ctorParameters = () => [{\n  type: MatRadioGroup,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RADIO_GROUP]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: FocusMonitor\n}, {\n  type: UniqueSelectionDispatcher\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RADIO_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatRadioModule {}\n\nMatRadioModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatRippleModule, MatCommonModule],\n    exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n    declarations: [MatRadioGroup, MatRadioButton]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };","map":{"version":3,"names":["InjectionToken","forwardRef","EventEmitter","Directive","ChangeDetectorRef","Output","Input","ContentChildren","ElementRef","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","Attribute","NgModule","mixinDisableRipple","mixinTabIndex","MatRippleModule","MatCommonModule","FocusMonitor","coerceBooleanProperty","coerceNumberProperty","UniqueSelectionDispatcher","NG_VALUE_ACCESSOR","ANIMATION_MODULE_TYPE","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","constructor","source","value","MAT_RADIO_GROUP","_MatRadioGroupBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","name","_updateRadioButtonNames","labelPosition","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","disabled","required","ngAfterContentInit","_touch","_radios","forEach","radio","_markForCheck","isAlreadySelected","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","decorators","type","ctorParameters","propDecorators","args","selector","exportAs","providers","host","MatRadioButton","descendants","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","tabIndex","_uniqueId","id","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_setDisabled","_color","inputId","focus","options","origin","focusVia","_inputElement","nativeElement","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","_isRippleDisabled","disableRipple","_onInputClick","event","stopPropagation","_onInputChange","groupValueChanged","String","undefined","ariaLabel","ariaLabelledby","ariaDescribedby","changeDetector","focusMonitor","radioDispatcher","animationMode","providerOverride","template","inputs","encapsulation","None","changeDetection","OnPush","styles","MatRadioModule","imports","exports","declarations"],"sources":["/Users/qisstpay/Documents/GitHub/prot-2/node_modules/@angular/material/fesm2015/radio.js"],"sourcesContent":["import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() { return this._selected; }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.decorators = [\n    { type: Directive }\n];\n_MatRadioGroupBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n_MatRadioGroupBase.propDecorators = {\n    change: [{ type: Output }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [\n                    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                    { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                ],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group',\n                },\n            },] }\n];\nMatRadioGroup.propDecorators = {\n    _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\n};\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n    /** Whether this radio button is checked. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() { return this._value; }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    set color(newValue) { this._color = newValue; }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.decorators = [\n    { type: Directive }\n];\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: _MatRadioGroupBase },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String },\n    { type: undefined },\n    { type: String }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be removed since it causes some a11y issues (see #21266).\n                    '[attr.tabindex]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            },] }\n];\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_GROUP,] }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}