{"ast":null,"code":"import { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Inject, Optional, NgZone, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { startWith, takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet nextUniqueId = 0;\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_ERROR = new InjectionToken('MatError');\n/** Single error message to be shown underneath the form field. */\n\nclass MatError {\n  constructor() {\n    this.id = `mat-error-${nextUniqueId++}`;\n  }\n\n}\n\nMatError.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-error',\n    host: {\n      'class': 'mat-error',\n      'role': 'alert',\n      '[attr.id]': 'id'\n    },\n    providers: [{\n      provide: MAT_ERROR,\n      useExisting: MatError\n    }]\n  }]\n}];\nMatError.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\n\nconst matFormFieldAnimations = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [// TODO(mmalerba): Use angular animations for label animation as well.\n  state('enter', style({\n    opacity: 1,\n    transform: 'translateY(0%)'\n  })), transition('void => enter', [style({\n    opacity: 0,\n    transform: 'translateY(-5px)'\n  }), animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\n\nclass MatFormFieldControl {}\n\nMatFormFieldControl.decorators = [{\n  type: Directive\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\nfunction getMatFormFieldPlaceholderConflictError() {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\n\n\nfunction getMatFormFieldDuplicatedHintError(align) {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/** @docs-private */\n\n\nfunction getMatFormFieldMissingControlError() {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet nextUniqueId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\n\nconst _MAT_HINT = new InjectionToken('MatHint');\n/** Hint text to be shown underneath the form field control. */\n\n\nclass MatHint {\n  constructor() {\n    /** Whether to align the hint label at the start or end of the line. */\n    this.align = 'start';\n    /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n\n    this.id = `mat-hint-${nextUniqueId$1++}`;\n  }\n\n}\n\nMatHint.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-hint',\n    host: {\n      'class': 'mat-hint',\n      '[class.mat-form-field-hint-end]': 'align === \"end\"',\n      '[attr.id]': 'id',\n      // Remove align attribute to prevent it from interfering with layout.\n      '[attr.align]': 'null'\n    },\n    providers: [{\n      provide: _MAT_HINT,\n      useExisting: MatHint\n    }]\n  }]\n}];\nMatHint.propDecorators = {\n  align: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The floating label for a `mat-form-field`. */\n\nclass MatLabel {}\n\nMatLabel.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-label'\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n\nclass MatPlaceholder {}\n\nMatPlaceholder.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-placeholder'\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_PREFIX = new InjectionToken('MatPrefix');\n/** Prefix to be placed in front of the form field. */\n\nclass MatPrefix {}\n\nMatPrefix.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matPrefix]',\n    providers: [{\n      provide: MAT_PREFIX,\n      useExisting: MatPrefix\n    }]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_SUFFIX = new InjectionToken('MatSuffix');\n/** Suffix to be placed at the end of the form field. */\n\nclass MatSuffix {}\n\nMatSuffix.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matSuffix]',\n    providers: [{\n      provide: MAT_SUFFIX,\n      useExisting: MatSuffix\n    }]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet nextUniqueId$2 = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\n\nclass MatFormFieldBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\n\n\nconst _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\n\n\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\n\nconst MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/** Container for form controls that applies Material Design styling and behavior. */\n\nclass MatFormField extends _MatFormFieldMixinBase {\n  constructor(_elementRef, _changeDetectorRef,\n  /**\n   * @deprecated `_labelOptions` parameter no longer being used. To be removed.\n   * @breaking-change 12.0.0\n   */\n  // Use `ElementRef` here so Angular has something to inject.\n  _labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._defaults = _defaults;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    /**\n     * Whether the outline gap needs to be calculated\n     * immediately on the next change detection run.\n     */\n\n    this._outlineGapCalculationNeededImmediately = false;\n    /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n\n    this._outlineGapCalculationNeededOnStable = false;\n    this._destroyed = new Subject();\n    /** Override for the logic that disables the label animation in certain cases. */\n\n    this._showAlwaysAnimate = false;\n    /** State of the mat-hint and mat-error animations. */\n\n    this._subscriptAnimationState = '';\n    this._hintLabel = ''; // Unique id for the hint label.\n\n    this._hintLabelId = `mat-hint-${nextUniqueId$2++}`; // Unique id for the label element.\n\n    this._labelId = `mat-form-field-label-${nextUniqueId$2++}`;\n    this.floatLabel = this._getDefaultFloatLabelState();\n    this._animationsEnabled = _animationMode !== 'NoopAnimations'; // Set the default through here so we invoke the setter on the first run.\n\n    this.appearance = _defaults && _defaults.appearance ? _defaults.appearance : 'legacy';\n    this._hideRequiredMarker = _defaults && _defaults.hideRequiredMarker != null ? _defaults.hideRequiredMarker : false;\n  }\n  /** The form-field appearance style. */\n\n\n  get appearance() {\n    return this._appearance;\n  }\n\n  set appearance(value) {\n    const oldValue = this._appearance;\n    this._appearance = value || this._defaults && this._defaults.appearance || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  /** Whether the required marker should be hidden. */\n\n\n  get hideRequiredMarker() {\n    return this._hideRequiredMarker;\n  }\n\n  set hideRequiredMarker(value) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  /** Whether the floating label should always float or not. */\n\n\n  _shouldAlwaysFloat() {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n  /** Whether the label can float or not. */\n\n\n  _canLabelFloat() {\n    return this.floatLabel !== 'never';\n  }\n  /** Text for the form field hint. */\n\n\n  get hintLabel() {\n    return this._hintLabel;\n  }\n\n  set hintLabel(value) {\n    this._hintLabel = value;\n\n    this._processHints();\n  }\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n\n\n  get floatLabel() {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n\n  set floatLabel(value) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._getDefaultFloatLabelState();\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get _control() {\n    // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n    //  We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  /**\n   * Gets the id of the label element. If no label is present, returns `null`.\n   */\n\n\n  getLabelId() {\n    return this._hasFloatingLabel() ? this._labelId : null;\n  }\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n\n\n  getConnectedOverlayOrigin() {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    } // Subscribe to changes in the child control state in order to update the form field UI.\n\n\n    control.stateChanges.pipe(startWith(null)).subscribe(() => {\n      this._validatePlaceholders();\n\n      this._syncDescribedByIds();\n\n      this._changeDetectorRef.markForCheck();\n    }); // Run change detection if the value changes.\n\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.pipe(takeUntil(this._destroyed)).subscribe(() => this._changeDetectorRef.markForCheck());\n    } // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    }); // Run change detection and update the outline if the suffix or prefix changes.\n\n\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n\n      this._changeDetectorRef.markForCheck();\n    }); // Re-validate when the number of hints changes.\n\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n\n      this._changeDetectorRef.markForCheck();\n    }); // Update the aria-described by when the number of errors changes.\n\n\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (typeof requestAnimationFrame === 'function') {\n          this._ngZone.runOutsideAngular(() => {\n            requestAnimationFrame(() => this.updateOutlineGap());\n          });\n        } else {\n          this.updateOutlineGap();\n        }\n      });\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n\n\n  _shouldForward(prop) {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!(this._labelChildNonStatic || this._labelChildStatic);\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat() && (this._control && this._control.shouldLabelFloat || this._shouldAlwaysFloat());\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() || this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n  /** Determines whether to display hints or errors. */\n\n\n  _getDisplayedMessages() {\n    return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState ? 'error' : 'hint';\n  }\n  /** Animates the placeholder up and locks it in position. */\n\n\n  _animateAndLockLabel() {\n    if (this._hasFloatingLabel() && this._canLabelFloat()) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled && this._label) {\n        this._showAlwaysAnimate = true;\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n\n\n  _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n  /** Does any extra processing that is required when handling the hints. */\n\n\n  _processHints() {\n    this._validateHints();\n\n    this._syncDescribedByIds();\n  }\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n\n\n  _validateHints() {\n    if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      let startHint;\n      let endHint;\n\n      this._hintChildren.forEach(hint => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n\n          endHint = hint;\n        }\n      });\n    }\n  }\n  /** Gets the default float label state. */\n\n\n  _getDefaultFloatLabelState() {\n    return this._defaults && this._defaults.floatLabel || 'auto';\n  }\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n\n\n  _syncDescribedByIds() {\n    if (this._control) {\n      let ids = []; // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n\n      if (this._control.userAriaDescribedBy && typeof this._control.userAriaDescribedBy === 'string') {\n        ids.push(...this._control.userAriaDescribedBy.split(' '));\n      }\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ? this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ? this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids.push(...this._errorChildren.map(error => error.id));\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n  /** Throws an error if the form field's control is missing. */\n\n\n  _validateControlChild() {\n    if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n\n\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length || !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    } // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n\n\n    if (!this._isAttachedToDOM()) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect(); // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n\n      const labelChildren = labelEl.children;\n\n      const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n\n      let labelWidth = 0;\n\n      for (let i = 0; i < labelChildren.length; i++) {\n        labelWidth += labelChildren[i].offsetWidth;\n      }\n\n      startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls[i].style.width = `${startWidth}px`;\n    }\n\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls[i].style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable = this._outlineGapCalculationNeededImmediately = false;\n  }\n  /** Gets the start end of the rect considering the current directionality. */\n\n\n  _getStartEnd(rect) {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n  /** Checks whether the form field is attached to the DOM. */\n\n\n  _isAttachedToDOM() {\n    const element = this._elementRef.nativeElement;\n\n    if (element.getRootNode) {\n      const rootNode = element.getRootNode(); // If the element is inside the DOM the root node will be either the document\n      // or the closest shadow root, otherwise it'll be the element itself.\n\n      return rootNode && rootNode !== element;\n    } // Otherwise fall back to checking if it's in the document. This doesn't account for\n    // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n\n\n    return document.documentElement.contains(element);\n  }\n\n}\n\nMatFormField.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-form-field',\n    exportAs: 'matFormField',\n    template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\" #underline\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n    animations: [matFormFieldAnimations.transitionMessages],\n    host: {\n      'class': 'mat-form-field',\n      '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n      '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n      '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n      '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n      '[class.mat-form-field-invalid]': '_control.errorState',\n      '[class.mat-form-field-can-float]': '_canLabelFloat()',\n      '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n      '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n      '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n      '[class.mat-form-field-disabled]': '_control.disabled',\n      '[class.mat-form-field-autofilled]': '_control.autofilled',\n      '[class.mat-focused]': '_control.focused',\n      '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n      '[class.ng-touched]': '_shouldForward(\"touched\")',\n      '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n      '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n      '[class.ng-valid]': '_shouldForward(\"valid\")',\n      '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n      '[class.ng-pending]': '_shouldForward(\"pending\")',\n      '[class._mat-animation-noopable]': '!_animationsEnabled'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n      provide: MAT_FORM_FIELD,\n      useExisting: MatFormField\n    }],\n    styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:none;transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field-hint-end{order:1}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"]\n  }]\n}];\n\nMatFormField.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [ElementRef]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_FORM_FIELD_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: Platform\n}, {\n  type: NgZone\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\nMatFormField.propDecorators = {\n  appearance: [{\n    type: Input\n  }],\n  hideRequiredMarker: [{\n    type: Input\n  }],\n  hintLabel: [{\n    type: Input\n  }],\n  floatLabel: [{\n    type: Input\n  }],\n  underlineRef: [{\n    type: ViewChild,\n    args: ['underline']\n  }],\n  _connectionContainerRef: [{\n    type: ViewChild,\n    args: ['connectionContainer', {\n      static: true\n    }]\n  }],\n  _inputContainerRef: [{\n    type: ViewChild,\n    args: ['inputContainer']\n  }],\n  _label: [{\n    type: ViewChild,\n    args: ['label']\n  }],\n  _controlNonStatic: [{\n    type: ContentChild,\n    args: [MatFormFieldControl]\n  }],\n  _controlStatic: [{\n    type: ContentChild,\n    args: [MatFormFieldControl, {\n      static: true\n    }]\n  }],\n  _labelChildNonStatic: [{\n    type: ContentChild,\n    args: [MatLabel]\n  }],\n  _labelChildStatic: [{\n    type: ContentChild,\n    args: [MatLabel, {\n      static: true\n    }]\n  }],\n  _placeholderChild: [{\n    type: ContentChild,\n    args: [MatPlaceholder]\n  }],\n  _errorChildren: [{\n    type: ContentChildren,\n    args: [MAT_ERROR, {\n      descendants: true\n    }]\n  }],\n  _hintChildren: [{\n    type: ContentChildren,\n    args: [_MAT_HINT, {\n      descendants: true\n    }]\n  }],\n  _prefixChildren: [{\n    type: ContentChildren,\n    args: [MAT_PREFIX, {\n      descendants: true\n    }]\n  }],\n  _suffixChildren: [{\n    type: ContentChildren,\n    args: [MAT_SUFFIX, {\n      descendants: true\n    }]\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass MatFormFieldModule {}\n\nMatFormFieldModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix],\n    imports: [CommonModule, MatCommonModule, ObserversModule],\n    exports: [MatCommonModule, MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_ERROR, MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MAT_PREFIX, MAT_SUFFIX, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix, _MAT_HINT, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };","map":{"version":3,"names":["ObserversModule","CommonModule","InjectionToken","Directive","Input","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","ChangeDetectorRef","Inject","Optional","NgZone","ViewChild","ContentChild","ContentChildren","NgModule","mixinColor","MatCommonModule","Directionality","coerceBooleanProperty","Subject","merge","fromEvent","startWith","takeUntil","take","trigger","state","style","transition","animate","Platform","ANIMATION_MODULE_TYPE","nextUniqueId","MAT_ERROR","MatError","constructor","id","decorators","type","args","selector","host","providers","provide","useExisting","propDecorators","matFormFieldAnimations","transitionMessages","opacity","transform","MatFormFieldControl","getMatFormFieldPlaceholderConflictError","Error","getMatFormFieldDuplicatedHintError","align","getMatFormFieldMissingControlError","nextUniqueId$1","_MAT_HINT","MatHint","MatLabel","MatPlaceholder","MAT_PREFIX","MatPrefix","MAT_SUFFIX","MatSuffix","nextUniqueId$2","floatingLabelScale","outlineGapPadding","MatFormFieldBase","_elementRef","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","MAT_FORM_FIELD","MatFormField","_changeDetectorRef","_labelOptions","_dir","_defaults","_platform","_ngZone","_animationMode","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_destroyed","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelId","floatLabel","_getDefaultFloatLabelState","_animationsEnabled","appearance","_hideRequiredMarker","hideRequiredMarker","_appearance","value","oldValue","_shouldAlwaysFloat","_canLabelFloat","hintLabel","_processHints","_floatLabel","markForCheck","_control","_explicitFormFieldControl","_controlNonStatic","_controlStatic","getLabelId","_hasFloatingLabel","getConnectedOverlayOrigin","_connectionContainerRef","ngAfterContentInit","_validateControlChild","control","controlType","nativeElement","classList","add","stateChanges","pipe","subscribe","_validatePlaceholders","_syncDescribedByIds","ngControl","valueChanges","runOutsideAngular","onStable","updateOutlineGap","_prefixChildren","changes","_suffixChildren","_hintChildren","_errorChildren","change","requestAnimationFrame","ngAfterContentChecked","ngAfterViewInit","detectChanges","ngOnDestroy","next","complete","_shouldForward","prop","_hasPlaceholder","placeholder","_placeholderChild","_hasLabel","_labelChildNonStatic","_labelChildStatic","_shouldLabelFloat","shouldLabelFloat","_hideControlPlaceholder","_getDisplayedMessages","length","errorState","_animateAndLockLabel","_label","ngDevMode","_validateHints","startHint","endHint","forEach","hint","ids","userAriaDescribedBy","push","split","find","map","error","setDescribedByIds","labelEl","children","textContent","trim","isBrowser","_isAttachedToDOM","startWidth","gapWidth","container","startEls","querySelectorAll","gapEls","containerRect","getBoundingClientRect","width","height","containerStart","_getStartEnd","labelChildren","labelStart","labelWidth","i","offsetWidth","Math","abs","rect","right","left","element","getRootNode","rootNode","document","documentElement","contains","exportAs","template","animations","inputs","encapsulation","None","changeDetection","OnPush","styles","ctorParameters","undefined","String","underlineRef","static","_inputContainerRef","descendants","MatFormFieldModule","declarations","imports","exports"],"sources":["/Users/qisstpay/Documents/GitHub/prot-2/node_modules/@angular/material/fesm2015/form-field.js"],"sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Inject, Optional, NgZone, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { startWith, takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_ERROR = new InjectionToken('MatError');\n/** Single error message to be shown underneath the form field. */\nclass MatError {\n    constructor() {\n        this.id = `mat-error-${nextUniqueId++}`;\n    }\n}\nMatError.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-error',\n                host: {\n                    'class': 'mat-error',\n                    'role': 'alert',\n                    '[attr.id]': 'id',\n                },\n                providers: [{ provide: MAT_ERROR, useExisting: MatError }],\n            },] }\n];\nMatError.propDecorators = {\n    id: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nconst matFormFieldAnimations = {\n    /** Animation that transitions the form field's error and hint messages. */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-5px)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** An interface which allows a control to work inside of a `MatFormField`. */\nclass MatFormFieldControl {\n}\nMatFormFieldControl.decorators = [\n    { type: Directive }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/** @docs-private */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\nconst _MAT_HINT = new InjectionToken('MatHint');\n/** Hint text to be shown underneath the form field control. */\nclass MatHint {\n    constructor() {\n        /** Whether to align the hint label at the start or end of the line. */\n        this.align = 'start';\n        /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n        this.id = `mat-hint-${nextUniqueId$1++}`;\n    }\n}\nMatHint.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-hint',\n                host: {\n                    'class': 'mat-hint',\n                    '[class.mat-form-field-hint-end]': 'align === \"end\"',\n                    '[attr.id]': 'id',\n                    // Remove align attribute to prevent it from interfering with layout.\n                    '[attr.align]': 'null',\n                },\n                providers: [{ provide: _MAT_HINT, useExisting: MatHint }],\n            },] }\n];\nMatHint.propDecorators = {\n    align: [{ type: Input }],\n    id: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The floating label for a `mat-form-field`. */\nclass MatLabel {\n}\nMatLabel.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-label'\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\nclass MatPlaceholder {\n}\nMatPlaceholder.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-placeholder'\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_PREFIX = new InjectionToken('MatPrefix');\n/** Prefix to be placed in front of the form field. */\nclass MatPrefix {\n}\nMatPrefix.decorators = [\n    { type: Directive, args: [{\n                selector: '[matPrefix]',\n                providers: [{ provide: MAT_PREFIX, useExisting: MatPrefix }],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SUFFIX = new InjectionToken('MatSuffix');\n/** Suffix to be placed at the end of the form field. */\nclass MatSuffix {\n}\nMatSuffix.decorators = [\n    { type: Directive, args: [{\n                selector: '[matSuffix]',\n                providers: [{ provide: MAT_SUFFIX, useExisting: MatSuffix }],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$2 = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nconst MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/** Container for form controls that applies Material Design styling and behavior. */\nclass MatFormField extends _MatFormFieldMixinBase {\n    constructor(_elementRef, _changeDetectorRef, \n    /**\n     * @deprecated `_labelOptions` parameter no longer being used. To be removed.\n     * @breaking-change 12.0.0\n     */\n    // Use `ElementRef` here so Angular has something to inject.\n    _labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._defaults = _defaults;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the outline gap needs to be calculated\n         * immediately on the next change detection run.\n         */\n        this._outlineGapCalculationNeededImmediately = false;\n        /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n        this._outlineGapCalculationNeededOnStable = false;\n        this._destroyed = new Subject();\n        /** Override for the logic that disables the label animation in certain cases. */\n        this._showAlwaysAnimate = false;\n        /** State of the mat-hint and mat-error animations. */\n        this._subscriptAnimationState = '';\n        this._hintLabel = '';\n        // Unique id for the hint label.\n        this._hintLabelId = `mat-hint-${nextUniqueId$2++}`;\n        // Unique id for the label element.\n        this._labelId = `mat-form-field-label-${nextUniqueId$2++}`;\n        this.floatLabel = this._getDefaultFloatLabelState();\n        this._animationsEnabled = _animationMode !== 'NoopAnimations';\n        // Set the default through here so we invoke the setter on the first run.\n        this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n        this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n            _defaults.hideRequiredMarker : false;\n    }\n    /** The form-field appearance style. */\n    get appearance() { return this._appearance; }\n    set appearance(value) {\n        const oldValue = this._appearance;\n        this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n        if (this._appearance === 'outline' && oldValue !== value) {\n            this._outlineGapCalculationNeededOnStable = true;\n        }\n    }\n    /** Whether the required marker should be hidden. */\n    get hideRequiredMarker() { return this._hideRequiredMarker; }\n    set hideRequiredMarker(value) {\n        this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n    /** Whether the floating label should always float or not. */\n    _shouldAlwaysFloat() {\n        return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n    }\n    /** Whether the label can float or not. */\n    _canLabelFloat() { return this.floatLabel !== 'never'; }\n    /** Text for the form field hint. */\n    get hintLabel() { return this._hintLabel; }\n    set hintLabel(value) {\n        this._hintLabel = value;\n        this._processHints();\n    }\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     */\n    get floatLabel() {\n        return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n    }\n    set floatLabel(value) {\n        if (value !== this._floatLabel) {\n            this._floatLabel = value || this._getDefaultFloatLabelState();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    get _control() {\n        // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n        //  We should clean this up once Ivy is the default renderer.\n        return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n    }\n    set _control(value) {\n        this._explicitFormFieldControl = value;\n    }\n    /**\n     * Gets the id of the label element. If no label is present, returns `null`.\n     */\n    getLabelId() {\n        return this._hasFloatingLabel() ? this._labelId : null;\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._connectionContainerRef || this._elementRef;\n    }\n    ngAfterContentInit() {\n        this._validateControlChild();\n        const control = this._control;\n        if (control.controlType) {\n            this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n        }\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        control.stateChanges.pipe(startWith(null)).subscribe(() => {\n            this._validatePlaceholders();\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Run change detection if the value changes.\n        if (control.ngControl && control.ngControl.valueChanges) {\n            control.ngControl.valueChanges\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this._changeDetectorRef.markForCheck());\n        }\n        // Note that we have to run outside of the `NgZone` explicitly,\n        // in order to avoid throwing users into an infinite loop\n        // if `zone-patch-rxjs` is included.\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (this._outlineGapCalculationNeededOnStable) {\n                    this.updateOutlineGap();\n                }\n            });\n        });\n        // Run change detection and update the outline if the suffix or prefix changes.\n        merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n            this._outlineGapCalculationNeededOnStable = true;\n            this._changeDetectorRef.markForCheck();\n        });\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._processHints();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (typeof requestAnimationFrame === 'function') {\n                    this._ngZone.runOutsideAngular(() => {\n                        requestAnimationFrame(() => this.updateOutlineGap());\n                    });\n                }\n                else {\n                    this.updateOutlineGap();\n                }\n            });\n        }\n    }\n    ngAfterContentChecked() {\n        this._validateControlChild();\n        if (this._outlineGapCalculationNeededImmediately) {\n            this.updateOutlineGap();\n        }\n    }\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop) {\n        const ngControl = this._control ? this._control.ngControl : null;\n        return ngControl && ngControl[prop];\n    }\n    _hasPlaceholder() {\n        return !!(this._control && this._control.placeholder || this._placeholderChild);\n    }\n    _hasLabel() {\n        return !!(this._labelChildNonStatic || this._labelChildStatic);\n    }\n    _shouldLabelFloat() {\n        return this._canLabelFloat() &&\n            ((this._control && this._control.shouldLabelFloat) || this._shouldAlwaysFloat());\n    }\n    _hideControlPlaceholder() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this.appearance === 'legacy' && !this._hasLabel() ||\n            this._hasLabel() && !this._shouldLabelFloat();\n    }\n    _hasFloatingLabel() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n    }\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages() {\n        return (this._errorChildren && this._errorChildren.length > 0 &&\n            this._control.errorState) ? 'error' : 'hint';\n    }\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockLabel() {\n        if (this._hasFloatingLabel() && this._canLabelFloat()) {\n            // If animations are disabled, we shouldn't go in here,\n            // because the `transitionend` will never fire.\n            if (this._animationsEnabled && this._label) {\n                this._showAlwaysAnimate = true;\n                fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n                    this._showAlwaysAnimate = false;\n                });\n            }\n            this.floatLabel = 'always';\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     */\n    _validatePlaceholders() {\n        if (this._control.placeholder && this._placeholderChild &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatFormFieldPlaceholderConflictError();\n        }\n    }\n    /** Does any extra processing that is required when handling the hints. */\n    _processHints() {\n        this._validateHints();\n        this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     */\n    _validateHints() {\n        if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            let startHint;\n            let endHint;\n            this._hintChildren.forEach((hint) => {\n                if (hint.align === 'start') {\n                    if (startHint || this.hintLabel) {\n                        throw getMatFormFieldDuplicatedHintError('start');\n                    }\n                    startHint = hint;\n                }\n                else if (hint.align === 'end') {\n                    if (endHint) {\n                        throw getMatFormFieldDuplicatedHintError('end');\n                    }\n                    endHint = hint;\n                }\n            });\n        }\n    }\n    /** Gets the default float label state. */\n    _getDefaultFloatLabelState() {\n        return (this._defaults && this._defaults.floatLabel) || 'auto';\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    _syncDescribedByIds() {\n        if (this._control) {\n            let ids = [];\n            // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n            if (this._control.userAriaDescribedBy &&\n                typeof this._control.userAriaDescribedBy === 'string') {\n                ids.push(...this._control.userAriaDescribedBy.split(' '));\n            }\n            if (this._getDisplayedMessages() === 'hint') {\n                const startHint = this._hintChildren ?\n                    this._hintChildren.find(hint => hint.align === 'start') : null;\n                const endHint = this._hintChildren ?\n                    this._hintChildren.find(hint => hint.align === 'end') : null;\n                if (startHint) {\n                    ids.push(startHint.id);\n                }\n                else if (this._hintLabel) {\n                    ids.push(this._hintLabelId);\n                }\n                if (endHint) {\n                    ids.push(endHint.id);\n                }\n            }\n            else if (this._errorChildren) {\n                ids.push(...this._errorChildren.map(error => error.id));\n            }\n            this._control.setDescribedByIds(ids);\n        }\n    }\n    /** Throws an error if the form field's control is missing. */\n    _validateControlChild() {\n        if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatFormFieldMissingControlError();\n        }\n    }\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n    updateOutlineGap() {\n        const labelEl = this._label ? this._label.nativeElement : null;\n        if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n            !labelEl.textContent.trim()) {\n            return;\n        }\n        if (!this._platform.isBrowser) {\n            // getBoundingClientRect isn't available on the server.\n            return;\n        }\n        // If the element is not present in the DOM, the outline gap will need to be calculated\n        // the next time it is checked and in the DOM.\n        if (!this._isAttachedToDOM()) {\n            this._outlineGapCalculationNeededImmediately = true;\n            return;\n        }\n        let startWidth = 0;\n        let gapWidth = 0;\n        const container = this._connectionContainerRef.nativeElement;\n        const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n        const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n        if (this._label && this._label.nativeElement.children.length) {\n            const containerRect = container.getBoundingClientRect();\n            // If the container's width and height are zero, it means that the element is\n            // invisible and we can't calculate the outline gap. Mark the element as needing\n            // to be checked the next time the zone stabilizes. We can't do this immediately\n            // on the next change detection, because even if the element becomes visible,\n            // the `ClientRect` won't be reclaculated immediately. We reset the\n            // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n            if (containerRect.width === 0 && containerRect.height === 0) {\n                this._outlineGapCalculationNeededOnStable = true;\n                this._outlineGapCalculationNeededImmediately = false;\n                return;\n            }\n            const containerStart = this._getStartEnd(containerRect);\n            const labelChildren = labelEl.children;\n            const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n            let labelWidth = 0;\n            for (let i = 0; i < labelChildren.length; i++) {\n                labelWidth += labelChildren[i].offsetWidth;\n            }\n            startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n            gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n        }\n        for (let i = 0; i < startEls.length; i++) {\n            startEls[i].style.width = `${startWidth}px`;\n        }\n        for (let i = 0; i < gapEls.length; i++) {\n            gapEls[i].style.width = `${gapWidth}px`;\n        }\n        this._outlineGapCalculationNeededOnStable =\n            this._outlineGapCalculationNeededImmediately = false;\n    }\n    /** Gets the start end of the rect considering the current directionality. */\n    _getStartEnd(rect) {\n        return (this._dir && this._dir.value === 'rtl') ? rect.right : rect.left;\n    }\n    /** Checks whether the form field is attached to the DOM. */\n    _isAttachedToDOM() {\n        const element = this._elementRef.nativeElement;\n        if (element.getRootNode) {\n            const rootNode = element.getRootNode();\n            // If the element is inside the DOM the root node will be either the document\n            // or the closest shadow root, otherwise it'll be the element itself.\n            return rootNode && rootNode !== element;\n        }\n        // Otherwise fall back to checking if it's in the document. This doesn't account for\n        // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n        return document.documentElement.contains(element);\n    }\n}\nMatFormField.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-form-field',\n                exportAs: 'matFormField',\n                template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\" #underline\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n                animations: [matFormFieldAnimations.transitionMessages],\n                host: {\n                    'class': 'mat-form-field',\n                    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                    '[class.mat-form-field-invalid]': '_control.errorState',\n                    '[class.mat-form-field-can-float]': '_canLabelFloat()',\n                    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n                    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                    '[class.mat-form-field-disabled]': '_control.disabled',\n                    '[class.mat-form-field-autofilled]': '_control.autofilled',\n                    '[class.mat-focused]': '_control.focused',\n                    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                    '[class.ng-touched]': '_shouldForward(\"touched\")',\n                    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                    '[class.ng-valid]': '_shouldForward(\"valid\")',\n                    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                    '[class.ng-pending]': '_shouldForward(\"pending\")',\n                    '[class._mat-animation-noopable]': '!_animationsEnabled',\n                },\n                inputs: ['color'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [\n                    { provide: MAT_FORM_FIELD, useExisting: MatFormField },\n                ],\n                styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:none;transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field-hint-end{order:1}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"]\n            },] }\n];\nMatFormField.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [ElementRef,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] },\n    { type: Platform },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatFormField.propDecorators = {\n    appearance: [{ type: Input }],\n    hideRequiredMarker: [{ type: Input }],\n    hintLabel: [{ type: Input }],\n    floatLabel: [{ type: Input }],\n    underlineRef: [{ type: ViewChild, args: ['underline',] }],\n    _connectionContainerRef: [{ type: ViewChild, args: ['connectionContainer', { static: true },] }],\n    _inputContainerRef: [{ type: ViewChild, args: ['inputContainer',] }],\n    _label: [{ type: ViewChild, args: ['label',] }],\n    _controlNonStatic: [{ type: ContentChild, args: [MatFormFieldControl,] }],\n    _controlStatic: [{ type: ContentChild, args: [MatFormFieldControl, { static: true },] }],\n    _labelChildNonStatic: [{ type: ContentChild, args: [MatLabel,] }],\n    _labelChildStatic: [{ type: ContentChild, args: [MatLabel, { static: true },] }],\n    _placeholderChild: [{ type: ContentChild, args: [MatPlaceholder,] }],\n    _errorChildren: [{ type: ContentChildren, args: [MAT_ERROR, { descendants: true },] }],\n    _hintChildren: [{ type: ContentChildren, args: [_MAT_HINT, { descendants: true },] }],\n    _prefixChildren: [{ type: ContentChildren, args: [MAT_PREFIX, { descendants: true },] }],\n    _suffixChildren: [{ type: ContentChildren, args: [MAT_SUFFIX, { descendants: true },] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatFormFieldModule {\n}\nMatFormFieldModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ],\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_ERROR, MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MAT_PREFIX, MAT_SUFFIX, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix, _MAT_HINT, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}