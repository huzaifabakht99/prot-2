{"ast":null,"code":"import { FocusKeyManager, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CdkPortal, TemplatePortal, CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, NgZone, Inject, Optional, TemplateRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ViewContainerRef, ContentChild, ViewChild, Input, ComponentFactoryResolver, forwardRef, EventEmitter, ChangeDetectorRef, Output, QueryList, ContentChildren, Attribute, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinColor, mixinDisableRipple, mixinTabIndex, MAT_RIPPLE_GLOBAL_OPTIONS, RippleRenderer, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, merge, fromEvent, of, timer } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { startWith, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { hasModifierKey, SPACE, ENTER } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token for the MatInkBar's Positioner. */\n\nconst _MAT_INK_BAR_POSITIONER = new InjectionToken('MatInkBarPositioner', {\n  providedIn: 'root',\n  factory: _MAT_INK_BAR_POSITIONER_FACTORY\n});\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\n\n\nfunction _MAT_INK_BAR_POSITIONER_FACTORY() {\n  const method = element => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0'\n  });\n\n  return method;\n}\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n\n\nclass MatInkBar {\n  constructor(_elementRef, _ngZone, _inkBarPositioner, _animationMode) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._inkBarPositioner = _inkBarPositioner;\n    this._animationMode = _animationMode;\n  }\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n\n\n  alignToElement(element) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n  /** Shows the ink bar. */\n\n\n  show() {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n  /** Hides the ink bar. */\n\n\n  hide() {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n\n\n  _setStyles(element) {\n    const positions = this._inkBarPositioner(element);\n\n    const inkBar = this._elementRef.nativeElement;\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n\n}\n\nMatInkBar.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-ink-bar',\n    host: {\n      'class': 'mat-ink-bar',\n      '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n    }\n  }]\n}];\n\nMatInkBar.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [_MAT_INK_BAR_POSITIONER]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `MatTabContent`. It serves as\n * alternative token to the actual `MatTabContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst MAT_TAB_CONTENT = new InjectionToken('MatTabContent');\n/** Decorates the `ng-template` tags and reads out the template from it. */\n\nclass MatTabContent {\n  constructor(\n  /** Content for the tab. */\n  template) {\n    this.template = template;\n  }\n\n}\n\nMatTabContent.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matTabContent]',\n    providers: [{\n      provide: MAT_TAB_CONTENT,\n      useExisting: MatTabContent\n    }]\n  }]\n}];\n\nMatTabContent.ctorParameters = () => [{\n  type: TemplateRef\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `MatTabLabel`. It serves as\n * alternative token to the actual `MatTabLabel` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst MAT_TAB_LABEL = new InjectionToken('MatTabLabel');\n/** Used to flag tab labels for use with the portal directive */\n\nclass MatTabLabel extends CdkPortal {}\n\nMatTabLabel.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[mat-tab-label], [matTabLabel]',\n    providers: [{\n      provide: MAT_TAB_LABEL,\n      useExisting: MatTabLabel\n    }]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatTab.\n\n/** @docs-private */\n\nclass MatTabBase {}\n\nconst _MatTabMixinBase = mixinDisabled(MatTabBase);\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\n\n\nconst MAT_TAB_GROUP = new InjectionToken('MAT_TAB_GROUP');\n\nclass MatTab extends _MatTabMixinBase {\n  constructor(_viewContainerRef, _closestTabGroup) {\n    super();\n    this._viewContainerRef = _viewContainerRef;\n    this._closestTabGroup = _closestTabGroup;\n    /** Plain text label for the tab, used when there is no template label. */\n\n    this.textLabel = '';\n    /** Portal that will be the hosted content of the tab */\n\n    this._contentPortal = null;\n    /** Emits whenever the internal state of the tab changes. */\n\n    this._stateChanges = new Subject();\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n\n    this.position = null;\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n\n    this.origin = null;\n    /**\n     * Whether the tab is currently active.\n     */\n\n    this.isActive = false;\n  }\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n\n\n  get templateLabel() {\n    return this._templateLabel;\n  }\n\n  set templateLabel(value) {\n    this._setTemplateLabelInput(value);\n  }\n  /** @docs-private */\n\n\n  get content() {\n    return this._contentPortal;\n  }\n\n  ngOnChanges(changes) {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit() {\n    this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n\n\n  _setTemplateLabelInput(value) {\n    // Only update the templateLabel via query if there is actually\n    // a MatTabLabel found. This works around an issue where a user may have\n    // manually set `templateLabel` during creation mode, which would then get clobbered\n    // by `undefined` when this query resolves.\n    if (value) {\n      this._templateLabel = value;\n    }\n  }\n\n}\n\nMatTab.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-tab',\n    template: \"<!-- Create a template for the content of the <mat-tab> so that we can grab a reference to this\\n    TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\\n    tab-group. -->\\n<ng-template><ng-content></ng-content></ng-template>\\n\",\n    inputs: ['disabled'],\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matTab'\n  }]\n}];\n\nMatTab.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_TAB_GROUP]\n  }]\n}];\n\nMatTab.propDecorators = {\n  templateLabel: [{\n    type: ContentChild,\n    args: [MAT_TAB_LABEL]\n  }],\n  _explicitContent: [{\n    type: ContentChild,\n    args: [MAT_TAB_CONTENT, {\n      read: TemplateRef,\n      static: true\n    }]\n  }],\n  _implicitContent: [{\n    type: ViewChild,\n    args: [TemplateRef, {\n      static: true\n    }]\n  }],\n  textLabel: [{\n    type: Input,\n    args: ['label']\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\n\nconst matTabsAnimations = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [// Note: transitions to `none` instead of 0, because some browsers might blur the content.\n  state('center, void, left-origin-center, right-origin-center', style({\n    transform: 'none'\n  })), // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n  // in order to ensure that the element has a height before its state changes. This is\n  // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n  // not have a static height and is not rendered. See related issue: #9465\n  state('left', style({\n    transform: 'translate3d(-100%, 0, 0)',\n    minHeight: '1px'\n  })), state('right', style({\n    transform: 'translate3d(100%, 0, 0)',\n    minHeight: '1px'\n  })), transition('* => left, * => right, left => center, right => center', animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')), transition('void => left-origin-center', [style({\n    transform: 'translate3d(-100%, 0, 0)'\n  }), animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')]), transition('void => right-origin-center', [style({\n    transform: 'translate3d(100%, 0, 0)'\n  }), animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')])])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n\nclass MatTabBodyPortal extends CdkPortalOutlet {\n  constructor(componentFactoryResolver, viewContainerRef, _host, _document) {\n    super(componentFactoryResolver, viewContainerRef, _document);\n    this._host = _host;\n    /** Subscription to events for when the tab body begins centering. */\n\n    this._centeringSub = Subscription.EMPTY;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n\n    this._leavingSub = Subscription.EMPTY;\n  }\n  /** Set initial visibility or set up subscription for changing visibility. */\n\n\n  ngOnInit() {\n    super.ngOnInit();\n    this._centeringSub = this._host._beforeCentering.pipe(startWith(this._host._isCenterPosition(this._host._position))).subscribe(isCentering => {\n      if (isCentering && !this.hasAttached()) {\n        this.attach(this._host._content);\n      }\n    });\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n  /** Clean up centering subscription. */\n\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    this._centeringSub.unsubscribe();\n\n    this._leavingSub.unsubscribe();\n  }\n\n}\n\nMatTabBodyPortal.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matTabBodyHost]'\n  }]\n}];\n\nMatTabBodyPortal.ctorParameters = () => [{\n  type: ComponentFactoryResolver\n}, {\n  type: ViewContainerRef\n}, {\n  type: MatTabBody,\n  decorators: [{\n    type: Inject,\n    args: [forwardRef(() => MatTabBody)]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/**\n * Base class with all of the `MatTabBody` functionality.\n * @docs-private\n */\n\n\nclass _MatTabBodyBase {\n  constructor(_elementRef, _dir, changeDetectorRef) {\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    /** Subscription to the directionality change observable. */\n\n    this._dirChangeSubscription = Subscription.EMPTY;\n    /** Emits when an animation on the tab is complete. */\n\n    this._translateTabComplete = new Subject();\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n\n    this._onCentering = new EventEmitter();\n    /** Event emitted before the centering of the tab begins. */\n\n    this._beforeCentering = new EventEmitter();\n    /** Event emitted before the centering of the tab begins. */\n\n    this._afterLeavingCenter = new EventEmitter();\n    /** Event emitted when the tab completes its animation towards the center. */\n\n    this._onCentered = new EventEmitter(true); // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n\n    /** Duration for the tab's animation. */\n\n    this.animationDuration = '500ms';\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n\n        changeDetectorRef.markForCheck();\n      });\n    } // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n\n\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n\n\n  set position(position) {\n    this._positionIndex = position;\n\n    this._computePositionAnimationState();\n  }\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n\n\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin(this.origin);\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event) {\n    const isCentering = this._isCenterPosition(event.toState);\n\n    this._beforeCentering.emit(isCentering);\n\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n  /** The text direction of the containing app. */\n\n\n  _getLayoutDirection() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /** Whether the provided position state is considered center, regardless of origin. */\n\n\n  _isCenterPosition(position) {\n    return position == 'center' || position == 'left-origin-center' || position == 'right-origin-center';\n  }\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n\n\n  _computePositionAnimationState(dir = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n\n\n  _computePositionFromOrigin(origin) {\n    const dir = this._getLayoutDirection();\n\n    if (dir == 'ltr' && origin <= 0 || dir == 'rtl' && origin > 0) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n\n}\n\n_MatTabBodyBase.decorators = [{\n  type: Directive\n}];\n\n_MatTabBodyBase.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ChangeDetectorRef\n}];\n\n_MatTabBodyBase.propDecorators = {\n  _onCentering: [{\n    type: Output\n  }],\n  _beforeCentering: [{\n    type: Output\n  }],\n  _afterLeavingCenter: [{\n    type: Output\n  }],\n  _onCentered: [{\n    type: Output\n  }],\n  _content: [{\n    type: Input,\n    args: ['content']\n  }],\n  origin: [{\n    type: Input\n  }],\n  animationDuration: [{\n    type: Input\n  }],\n  position: [{\n    type: Input\n  }]\n};\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n\nclass MatTabBody extends _MatTabBodyBase {\n  constructor(elementRef, dir, changeDetectorRef) {\n    super(elementRef, dir, changeDetectorRef);\n  }\n\n}\n\nMatTabBody.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-tab-body',\n    template: \"<div class=\\\"mat-tab-body-content\\\" #content\\n     [@translateTab]=\\\"{\\n        value: _position,\\n        params: {animationDuration: animationDuration}\\n     }\\\"\\n     (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\"\\n     (@translateTab.done)=\\\"_translateTabComplete.next($event)\\\"\\n     cdkScrollable>\\n  <ng-template matTabBodyHost></ng-template>\\n</div>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    animations: [matTabsAnimations.translateTab],\n    host: {\n      'class': 'mat-tab-body'\n    },\n    styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\\n\"]\n  }]\n}];\n\nMatTabBody.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ChangeDetectorRef\n}];\n\nMatTabBody.propDecorators = {\n  _portalHost: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet]\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to provide the default options the tabs module. */\n\nconst MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Used to generate unique ID's for each tab component */\n\nlet nextId = 0;\n/** A simple change event emitted on focus or selection changes. */\n\nclass MatTabChangeEvent {} // Boilerplate for applying mixins to MatTabGroup.\n\n/** @docs-private */\n\n\nclass MatTabGroupMixinBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n\nconst _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupMixinBase), 'primary');\n/**\n * Base class with all of the `MatTabGroupBase` functionality.\n * @docs-private\n */\n\n\nclass _MatTabGroupBase extends _MatTabGroupMixinBase {\n  constructor(elementRef, _changeDetectorRef, defaultConfig, _animationMode) {\n    super(elementRef);\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    /** All of the tabs that belong to the group. */\n\n    this._tabs = new QueryList();\n    /** The tab index that should be selected after the content has been checked. */\n\n    this._indexToSelect = 0;\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n\n    this._tabBodyWrapperHeight = 0;\n    /** Subscription to tabs being added/removed. */\n\n    this._tabsSubscription = Subscription.EMPTY;\n    /** Subscription to changes in the tab labels. */\n\n    this._tabLabelSubscription = Subscription.EMPTY;\n    this._selectedIndex = null;\n    /** Position of the tab header. */\n\n    this.headerPosition = 'above';\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n\n    this.selectedIndexChange = new EventEmitter();\n    /** Event emitted when focus has changed within a tab group. */\n\n    this.focusChange = new EventEmitter();\n    /** Event emitted when the body animation has completed */\n\n    this.animationDone = new EventEmitter();\n    /** Event emitted when the tab selection has changed. */\n\n    this.selectedTabChange = new EventEmitter(true);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ? defaultConfig.animationDuration : '500ms';\n    this.disablePagination = defaultConfig && defaultConfig.disablePagination != null ? defaultConfig.disablePagination : false;\n    this.dynamicHeight = defaultConfig && defaultConfig.dynamicHeight != null ? defaultConfig.dynamicHeight : false;\n  }\n  /** Whether the tab group should grow to the size of the active tab. */\n\n\n  get dynamicHeight() {\n    return this._dynamicHeight;\n  }\n\n  set dynamicHeight(value) {\n    this._dynamicHeight = coerceBooleanProperty(value);\n  }\n  /** The index of the active tab. */\n\n\n  get selectedIndex() {\n    return this._selectedIndex;\n  }\n\n  set selectedIndex(value) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n\n\n  get animationDuration() {\n    return this._animationDuration;\n  }\n\n  set animationDuration(value) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  /** Background color of the tab group. */\n\n\n  get backgroundColor() {\n    return this._backgroundColor;\n  }\n\n  set backgroundColor(value) {\n    const nativeElement = this._elementRef.nativeElement;\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n\n\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect); // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n\n\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect)); // Preserve the height so page doesn't scroll up during tab change.\n        // Fixes https://stackblitz.com/edit/mat-tabs-scroll-page-top-on-tab-change\n\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.minHeight = wrapper.clientHeight + 'px';\n      } // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n\n\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect); // Clear the min-height, this was needed during tab change to avoid\n          // unnecessary scrolling.\n\n          this._tabBodyWrapper.nativeElement.style.minHeight = '';\n        }\n      });\n    } // Setup the position for each tab and optionally setup an origin on the next selected tab.\n\n\n    this._tabs.forEach((tab, index) => {\n      tab.position = index - indexToSelect; // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToAllTabChanges();\n\n    this._subscribeToTabLabels(); // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n\n\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect); // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n\n\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n  /** Listens to changes in all of the tabs. */\n\n\n  _subscribeToAllTabChanges() {\n    // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n    // some that are inside of nested tab groups. We filter them out manually by checking that\n    // the closest group to the tab is the current one.\n    this._allTabs.changes.pipe(startWith(this._allTabs)).subscribe(tabs => {\n      this._tabs.reset(tabs.filter(tab => tab._closestTabGroup === this));\n\n      this._tabs.notifyOnChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabs.destroy();\n\n    this._tabsSubscription.unsubscribe();\n\n    this._tabLabelSubscription.unsubscribe();\n  }\n  /** Re-aligns the ink bar to the selected tab element. */\n\n\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  _createChangeEvent(index) {\n    const event = new MatTabChangeEvent();\n    event.index = index;\n\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n\n    return event;\n  }\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n\n\n  _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges)).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n\n\n  _clampTabIndex(index) {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n  /** Returns a unique id for each tab label element */\n\n\n  _getTabLabelId(i) {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n  /** Returns a unique id for each tab content element */\n\n\n  _getTabContentId(i) {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n\n\n  _setTabBodyWrapperHeight(tabHeight) {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n      return;\n    }\n\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px'; // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n  /** Removes the height of the tab body wrapper. */\n\n\n  _removeTabBodyWrapperHeight() {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n  /** Handle click events, setting new selected index if appropriate. */\n\n\n  _handleClick(tab, tabHeader, index) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n  /** Retrieves the tabindex for the tab. */\n\n\n  _getTabIndex(tab, idx) {\n    if (tab.disabled) {\n      return null;\n    }\n\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n  /** Callback for when the focused state of a tab has changed. */\n\n\n  _tabFocusChanged(focusOrigin, index) {\n    if (focusOrigin) {\n      this._tabHeader.focusIndex = index;\n    }\n  }\n\n}\n\n_MatTabGroupBase.decorators = [{\n  type: Directive\n}];\n\n_MatTabGroupBase.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_TABS_CONFIG]\n  }, {\n    type: Optional\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\n_MatTabGroupBase.propDecorators = {\n  dynamicHeight: [{\n    type: Input\n  }],\n  selectedIndex: [{\n    type: Input\n  }],\n  headerPosition: [{\n    type: Input\n  }],\n  animationDuration: [{\n    type: Input\n  }],\n  disablePagination: [{\n    type: Input\n  }],\n  backgroundColor: [{\n    type: Input\n  }],\n  selectedIndexChange: [{\n    type: Output\n  }],\n  focusChange: [{\n    type: Output\n  }],\n  animationDone: [{\n    type: Output\n  }],\n  selectedTabChange: [{\n    type: Output\n  }]\n};\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n\nclass MatTabGroup extends _MatTabGroupBase {\n  constructor(elementRef, changeDetectorRef, defaultConfig, animationMode) {\n    super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n  }\n\n}\n\nMatTabGroup.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-tab-group',\n    exportAs: 'matTabGroup',\n    template: \"<mat-tab-header #tabHeader\\n               [selectedIndex]=\\\"selectedIndex || 0\\\"\\n               [disableRipple]=\\\"disableRipple\\\"\\n               [disablePagination]=\\\"disablePagination\\\"\\n               (indexFocused)=\\\"_focusChanged($event)\\\"\\n               (selectFocusedIndex)=\\\"selectedIndex = $event\\\">\\n  <div class=\\\"mat-tab-label mat-focus-indicator\\\" role=\\\"tab\\\" matTabLabelWrapper mat-ripple cdkMonitorElementFocus\\n       *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n       [id]=\\\"_getTabLabelId(i)\\\"\\n       [attr.tabIndex]=\\\"_getTabIndex(tab, i)\\\"\\n       [attr.aria-posinset]=\\\"i + 1\\\"\\n       [attr.aria-setsize]=\\\"_tabs.length\\\"\\n       [attr.aria-controls]=\\\"_getTabContentId(i)\\\"\\n       [attr.aria-selected]=\\\"selectedIndex == i\\\"\\n       [attr.aria-label]=\\\"tab.ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\\\"\\n       [class.mat-tab-label-active]=\\\"selectedIndex == i\\\"\\n       [disabled]=\\\"tab.disabled\\\"\\n       [matRippleDisabled]=\\\"tab.disabled || disableRipple\\\"\\n       (click)=\\\"_handleClick(tab, tabHeader, i)\\\"\\n       (cdkFocusChange)=\\\"_tabFocusChanged($event, i)\\\">\\n\\n\\n    <div class=\\\"mat-tab-label-content\\\">\\n      <!-- If there is a label template, use it. -->\\n      <ng-template [ngIf]=\\\"tab.templateLabel\\\">\\n        <ng-template [cdkPortalOutlet]=\\\"tab.templateLabel\\\"></ng-template>\\n      </ng-template>\\n\\n      <!-- If there is not a label template, fall back to the text label. -->\\n      <ng-template [ngIf]=\\\"!tab.templateLabel\\\">{{tab.textLabel}}</ng-template>\\n    </div>\\n  </div>\\n</mat-tab-header>\\n\\n<div\\n  class=\\\"mat-tab-body-wrapper\\\"\\n  [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n  #tabBodyWrapper>\\n  <mat-tab-body role=\\\"tabpanel\\\"\\n               *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n               [id]=\\\"_getTabContentId(i)\\\"\\n               [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\"\\n               [class.mat-tab-body-active]=\\\"selectedIndex == i\\\"\\n               [content]=\\\"tab.content!\\\"\\n               [position]=\\\"tab.position!\\\"\\n               [origin]=\\\"tab.origin\\\"\\n               [animationDuration]=\\\"animationDuration\\\"\\n               (_onCentered)=\\\"_removeTabBodyWrapperHeight()\\\"\\n               (_onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\">\\n  </mat-tab-body>\\n</div>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    inputs: ['color', 'disableRipple'],\n    providers: [{\n      provide: MAT_TAB_GROUP,\n      useExisting: MatTabGroup\n    }],\n    host: {\n      'class': 'mat-tab-group',\n      '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n      '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"'\n    },\n    styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{padding:0 12px}}@media(max-width: 959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\\n\"]\n  }]\n}];\n\nMatTabGroup.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_TABS_CONFIG]\n  }, {\n    type: Optional\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\nMatTabGroup.propDecorators = {\n  _allTabs: [{\n    type: ContentChildren,\n    args: [MatTab, {\n      descendants: true\n    }]\n  }],\n  _tabBodyWrapper: [{\n    type: ViewChild,\n    args: ['tabBodyWrapper']\n  }],\n  _tabHeader: [{\n    type: ViewChild,\n    args: ['tabHeader']\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n\n/** @docs-private */\n\nclass MatTabLabelWrapperBase {}\n\nconst _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n\n\nclass MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase {\n  constructor(elementRef) {\n    super();\n    this.elementRef = elementRef;\n  }\n  /** Sets focus on the wrapper element */\n\n\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft() {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth() {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n\n}\n\nMatTabLabelWrapper.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matTabLabelWrapper]',\n    inputs: ['disabled'],\n    host: {\n      '[class.mat-tab-disabled]': 'disabled',\n      '[attr.aria-disabled]': '!!disabled'\n    }\n  }]\n}];\n\nMatTabLabelWrapper.ctorParameters = () => [{\n  type: ElementRef\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Config used to bind passive event listeners */\n\n\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\n\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\n\nconst HEADER_SCROLL_DELAY = 650;\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\n\nconst HEADER_SCROLL_INTERVAL = 100;\n/**\n * Base class for a tab header that supported pagination.\n * @docs-private\n */\n\nclass MatPaginatedTabHeader {\n  constructor(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone, _platform, _animationMode) {\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._viewportRuler = _viewportRuler;\n    this._dir = _dir;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._animationMode = _animationMode;\n    /** The distance in pixels that the tab labels should be translated to the left. */\n\n    this._scrollDistance = 0;\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n\n    this._selectedIndexChanged = false;\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    /** Whether the controls for pagination should be displayed */\n\n    this._showPaginationControls = false;\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n\n    this._disableScrollAfter = true;\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n\n    this._disableScrollBefore = true;\n    /** Stream that will stop the automated scrolling. */\n\n    this._stopScrolling = new Subject();\n    /**\n     * Whether pagination should be disabled. This can be used to avoid unnecessary\n     * layout recalculations if it's known that pagination won't be required.\n     */\n\n    this.disablePagination = false;\n    this._selectedIndex = 0;\n    /** Event emitted when the option is selected. */\n\n    this.selectFocusedIndex = new EventEmitter();\n    /** Event emitted when a label is focused. */\n\n    this.indexFocused = new EventEmitter(); // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave').pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._stopInterval();\n      });\n    });\n  }\n  /** The index of the active tab. */\n\n\n  get selectedIndex() {\n    return this._selectedIndex;\n  }\n\n  set selectedIndex(value) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItem(value);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._handlePaginatorPress('before');\n    });\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._handlePaginatorPress('after');\n    });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : of(null);\n\n    const resize = this._viewportRuler.change(150);\n\n    const realign = () => {\n      this.updatePagination();\n\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._items).withHorizontalOrientation(this._getLayoutDirection()).withHomeAndEnd().withWrap();\n\n    this._keyManager.updateActiveItem(this._selectedIndex); // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n\n\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign(); // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n\n    merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      // We need to defer this to give the browser some time to recalculate\n      // the element dimensions. The call has to be wrapped in `NgZone.run`,\n      // because the viewport change handler runs outside of Angular.\n      this._ngZone.run(() => Promise.resolve().then(realign));\n\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    }); // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterContentChecked() {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n\n      this._changeDetectorRef.markForCheck();\n    } // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n\n\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n\n      this._checkScrollingControls();\n\n      this._alignInkBarToSelectedTab();\n\n      this._selectedIndexChanged = false;\n\n      this._changeDetectorRef.markForCheck();\n    } // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n\n\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n\n      this._scrollDistanceChanged = false;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    this._stopScrolling.complete();\n  }\n  /** Handles keyboard events on the header. */\n\n\n  _handleKeydown(event) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        if (this.focusIndex !== this.selectedIndex) {\n          this.selectFocusedIndex.emit(this.focusIndex);\n\n          this._itemSelected(event);\n        }\n\n        break;\n\n      default:\n        this._keyManager.onKeydown(event);\n\n    }\n  }\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n\n\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent; // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || ''; // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n\n      this._ngZone.run(() => {\n        this.updatePagination();\n\n        this._alignInkBarToSelectedTab();\n\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n\n\n  updatePagination() {\n    this._checkPaginationEnabled();\n\n    this._checkScrollingControls();\n\n    this._updateTabScrollPosition();\n  }\n  /** Tracks which element has focus; used for keyboard navigation */\n\n\n  get focusIndex() {\n    return this._keyManager ? this._keyManager.activeItemIndex : 0;\n  }\n  /** When the focus index is set, we must manually send focus to the correct label */\n\n\n  set focusIndex(value) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n\n\n  _isValidIndex(index) {\n    if (!this._items) {\n      return true;\n    }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n\n\n  _setTabFocus(tabIndex) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus(); // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n\n\n      const containerEl = this._tabListContainer.nativeElement;\n\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n  /** The layout direction of the containing app. */\n\n\n  _getLayoutDirection() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n\n\n  _updateTabScrollPosition() {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance; // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`; // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n\n    if (this._platform.TRIDENT || this._platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n\n\n  get scrollDistance() {\n    return this._scrollDistance;\n  }\n\n  set scrollDistance(value) {\n    this._scrollTo(value);\n  }\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n\n\n  _scrollHeader(direction) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth; // Move the scroll distance one-third the length of the tab list's viewport.\n\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n  /** Handles click events on the pagination arrows. */\n\n\n  _handlePaginatorClick(direction) {\n    this._stopInterval();\n\n    this._scrollHeader(direction);\n  }\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n\n\n  _scrollToLabel(labelIndex) {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) {\n      return;\n    } // The view length is the visible width of the tab labels.\n\n\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {\n      offsetLeft,\n      offsetWidth\n    } = selectedLabel.elementRef.nativeElement;\n    let labelBeforePos, labelAfterPos;\n\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n\n\n  _checkPaginationEnabled() {\n    if (this.disablePagination) {\n      this._showPaginationControls = false;\n    } else {\n      const isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n      if (!isEnabled) {\n        this.scrollDistance = 0;\n      }\n\n      if (isEnabled !== this._showPaginationControls) {\n        this._changeDetectorRef.markForCheck();\n      }\n\n      this._showPaginationControls = isEnabled;\n    }\n  }\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n\n\n  _checkScrollingControls() {\n    if (this.disablePagination) {\n      this._disableScrollAfter = this._disableScrollBefore = true;\n    } else {\n      // Check if the pagination arrows should be activated.\n      this._disableScrollBefore = this.scrollDistance == 0;\n      this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n\n\n  _getMaxScrollDistance() {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength || 0;\n  }\n  /** Tells the ink-bar to align itself to the current label wrapper */\n\n\n  _alignInkBarToSelectedTab() {\n    const selectedItem = this._items && this._items.length ? this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n  /** Stops the currently-running paginator interval.  */\n\n\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n\n\n  _handlePaginatorPress(direction, mouseEvent) {\n    // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n    // null check the `button`, but we do it so we don't break tests that use fake events.\n    if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n      return;\n    } // Avoid overlapping timers.\n\n\n    this._stopInterval(); // Start a timer after the delay and keep firing based on the interval.\n\n\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL) // Keep the timer going until something tells it to stop or the component is destroyed.\n    .pipe(takeUntil(merge(this._stopScrolling, this._destroyed))).subscribe(() => {\n      const {\n        maxScrollDistance,\n        distance\n      } = this._scrollHeader(direction); // Stop the timer if we've reached the start or the end.\n\n\n      if (distance === 0 || distance >= maxScrollDistance) {\n        this._stopInterval();\n      }\n    });\n  }\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n\n\n  _scrollTo(position) {\n    if (this.disablePagination) {\n      return {\n        maxScrollDistance: 0,\n        distance: 0\n      };\n    }\n\n    const maxScrollDistance = this._getMaxScrollDistance();\n\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position)); // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n\n    this._scrollDistanceChanged = true;\n\n    this._checkScrollingControls();\n\n    return {\n      maxScrollDistance,\n      distance: this._scrollDistance\n    };\n  }\n\n}\n\nMatPaginatedTabHeader.decorators = [{\n  type: Directive\n}];\n\nMatPaginatedTabHeader.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ViewportRuler\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\nMatPaginatedTabHeader.propDecorators = {\n  disablePagination: [{\n    type: Input\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Base class with all of the `MatTabHeader` functionality.\n * @docs-private\n */\n\nclass _MatTabHeaderBase extends MatPaginatedTabHeader {\n  constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n    this._disableRipple = false;\n  }\n  /** Whether the ripple effect is disabled or not. */\n\n\n  get disableRipple() {\n    return this._disableRipple;\n  }\n\n  set disableRipple(value) {\n    this._disableRipple = coerceBooleanProperty(value);\n  }\n\n  _itemSelected(event) {\n    event.preventDefault();\n  }\n\n}\n\n_MatTabHeaderBase.decorators = [{\n  type: Directive\n}];\n\n_MatTabHeaderBase.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ViewportRuler\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\n_MatTabHeaderBase.propDecorators = {\n  disableRipple: [{\n    type: Input\n  }]\n};\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n\nclass MatTabHeader extends _MatTabHeaderBase {\n  constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n}\n\nMatTabHeader.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-tab-header',\n    template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\\n<div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    #tabList\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    role=\\\"tablist\\\"\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-labels\\\">\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\",\n    inputs: ['selectedIndex'],\n    outputs: ['selectFocusedIndex', 'indexFocused'],\n    encapsulation: ViewEncapsulation.None,\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    host: {\n      'class': 'mat-tab-header',\n      '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n      '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\"\n    },\n    styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-labels{display:flex}[mat-align-tabs=center]>.mat-tab-header .mat-tab-labels{justify-content:center}[mat-align-tabs=end]>.mat-tab-header .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{min-width:72px}}\\n\"]\n  }]\n}];\n\nMatTabHeader.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ViewportRuler\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\nMatTabHeader.propDecorators = {\n  _items: [{\n    type: ContentChildren,\n    args: [MatTabLabelWrapper, {\n      descendants: false\n    }]\n  }],\n  _inkBar: [{\n    type: ViewChild,\n    args: [MatInkBar, {\n      static: true\n    }]\n  }],\n  _tabListContainer: [{\n    type: ViewChild,\n    args: ['tabListContainer', {\n      static: true\n    }]\n  }],\n  _tabList: [{\n    type: ViewChild,\n    args: ['tabList', {\n      static: true\n    }]\n  }],\n  _nextPaginator: [{\n    type: ViewChild,\n    args: ['nextPaginator']\n  }],\n  _previousPaginator: [{\n    type: ViewChild,\n    args: ['previousPaginator']\n  }]\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Base class with all of the `MatTabNav` functionality.\n * @docs-private\n */\n\nclass _MatTabNavBase extends MatPaginatedTabHeader {\n  constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n    this._disableRipple = false;\n    /** Theme color of the nav bar. */\n\n    this.color = 'primary';\n  }\n  /** Background color of the tab nav. */\n\n\n  get backgroundColor() {\n    return this._backgroundColor;\n  }\n\n  set backgroundColor(value) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  /** Whether the ripple effect is disabled or not. */\n\n\n  get disableRipple() {\n    return this._disableRipple;\n  }\n\n  set disableRipple(value) {\n    this._disableRipple = coerceBooleanProperty(value);\n  }\n\n  _itemSelected() {// noop\n  }\n\n  ngAfterContentInit() {\n    // We need this to run before the `changes` subscription in parent to ensure that the\n    // selectedIndex is up-to-date by the time the super class starts looking for it.\n    this._items.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this.updateActiveLink();\n    });\n\n    super.ngAfterContentInit();\n  }\n  /** Notifies the component that the active link has been changed. */\n\n\n  updateActiveLink() {\n    if (!this._items) {\n      return;\n    }\n\n    const items = this._items.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].active) {\n        this.selectedIndex = i;\n\n        this._changeDetectorRef.markForCheck();\n\n        return;\n      }\n    } // The ink bar should hide itself if no items are active.\n\n\n    this.selectedIndex = -1;\n\n    this._inkBar.hide();\n  }\n\n}\n\n_MatTabNavBase.decorators = [{\n  type: Directive\n}];\n\n_MatTabNavBase.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgZone\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ViewportRuler\n}, {\n  type: Platform\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\n_MatTabNavBase.propDecorators = {\n  backgroundColor: [{\n    type: Input\n  }],\n  disableRipple: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }]\n};\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n\nclass MatTabNav extends _MatTabNavBase {\n  constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode) {\n    super(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode);\n  }\n\n}\n\nMatTabNav.decorators = [{\n  type: Component,\n  args: [{\n    selector: '[mat-tab-nav-bar]',\n    exportAs: 'matTabNavBar, matTabNav',\n    inputs: ['color'],\n    template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\\n<div class=\\\"mat-tab-link-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    #tabList\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-links\\\">\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\",\n    host: {\n      'class': 'mat-tab-nav-bar mat-tab-header',\n      '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n      '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n      '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n      '[class.mat-accent]': 'color === \"accent\"',\n      '[class.mat-warn]': 'color === \"warn\"'\n    },\n    encapsulation: ViewEncapsulation.None,\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-tab-links{display:flex}[mat-align-tabs=center]>.mat-tab-link-container .mat-tab-links{justify-content:center}[mat-align-tabs=end]>.mat-tab-link-container .mat-tab-links{justify-content:flex-end}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:none}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-link:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-link.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-link.mat-tab-disabled{opacity:.5}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-link{opacity:1}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media(max-width: 599px){.mat-tab-link{min-width:72px}}\\n\"]\n  }]\n}];\n\nMatTabNav.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgZone\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ViewportRuler\n}, {\n  type: Platform\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\nMatTabNav.propDecorators = {\n  _items: [{\n    type: ContentChildren,\n    args: [forwardRef(() => MatTabLink), {\n      descendants: true\n    }]\n  }],\n  _inkBar: [{\n    type: ViewChild,\n    args: [MatInkBar, {\n      static: true\n    }]\n  }],\n  _tabListContainer: [{\n    type: ViewChild,\n    args: ['tabListContainer', {\n      static: true\n    }]\n  }],\n  _tabList: [{\n    type: ViewChild,\n    args: ['tabList', {\n      static: true\n    }]\n  }],\n  _nextPaginator: [{\n    type: ViewChild,\n    args: ['nextPaginator']\n  }],\n  _previousPaginator: [{\n    type: ViewChild,\n    args: ['previousPaginator']\n  }]\n}; // Boilerplate for applying mixins to MatTabLink.\n\nclass MatTabLinkMixinBase {}\n\nconst _MatTabLinkMixinBase = mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkMixinBase)));\n/** Base class with all of the `MatTabLink` functionality. */\n\n\nclass _MatTabLinkBase extends _MatTabLinkMixinBase {\n  constructor(_tabNavBar,\n  /** @docs-private */\n  elementRef, globalRippleOptions, tabIndex, _focusMonitor, animationMode) {\n    super();\n    this._tabNavBar = _tabNavBar;\n    this.elementRef = elementRef;\n    this._focusMonitor = _focusMonitor;\n    /** Whether the tab link is active or not. */\n\n    this._isActive = false;\n    this.rippleConfig = globalRippleOptions || {};\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (animationMode === 'NoopAnimations') {\n      this.rippleConfig.animation = {\n        enterDuration: 0,\n        exitDuration: 0\n      };\n    }\n  }\n  /** Whether the link is active. */\n\n\n  get active() {\n    return this._isActive;\n  }\n\n  set active(value) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._isActive) {\n      this._isActive = value;\n\n      this._tabNavBar.updateActiveLink();\n    }\n  }\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n\n\n  get rippleDisabled() {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple || !!this.rippleConfig.disabled;\n  }\n  /** Focuses the tab link. */\n\n\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this.elementRef);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this.elementRef);\n  }\n\n}\n\n_MatTabLinkBase.decorators = [{\n  type: Directive\n}];\n\n_MatTabLinkBase.ctorParameters = () => [{\n  type: _MatTabNavBase\n}, {\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: FocusMonitor\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\n_MatTabLinkBase.propDecorators = {\n  active: [{\n    type: Input\n  }]\n};\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n\nclass MatTabLink extends _MatTabLinkBase {\n  constructor(tabNavBar, elementRef, ngZone, platform, globalRippleOptions, tabIndex, focusMonitor, animationMode) {\n    super(tabNavBar, elementRef, globalRippleOptions, tabIndex, focusMonitor, animationMode);\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n\n    this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n}\n\nMatTabLink.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[mat-tab-link], [matTabLink]',\n    exportAs: 'matTabLink',\n    inputs: ['disabled', 'disableRipple', 'tabIndex'],\n    host: {\n      'class': 'mat-tab-link mat-focus-indicator',\n      '[attr.aria-current]': 'active ? \"page\" : null',\n      '[attr.aria-disabled]': 'disabled',\n      '[attr.tabIndex]': 'tabIndex',\n      '[class.mat-tab-disabled]': 'disabled',\n      '[class.mat-tab-label-active]': 'active'\n    }\n  }]\n}];\n\nMatTabLink.ctorParameters = () => [{\n  type: MatTabNav\n}, {\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: FocusMonitor\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatTabsModule {}\n\nMatTabsModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatCommonModule, PortalModule, MatRippleModule, ObserversModule, A11yModule],\n    // Don't export all components because some are only to be used internally.\n    exports: [MatCommonModule, MatTabGroup, MatTabLabel, MatTab, MatTabNav, MatTabLink, MatTabContent],\n    declarations: [MatTabGroup, MatTabLabel, MatTab, MatInkBar, MatTabLabelWrapper, MatTabNav, MatTabLink, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabContent]\n  }]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TABS_CONFIG, MAT_TAB_GROUP, MatInkBar, MatTab, MatTabBody, MatTabBodyPortal, MatTabChangeEvent, MatTabContent, MatTabGroup, MatTabHeader, MatTabLabel, MatTabLabelWrapper, MatTabLink, MatTabNav, MatTabsModule, _MAT_INK_BAR_POSITIONER, _MatTabBodyBase, _MatTabGroupBase, _MatTabHeaderBase, _MatTabLinkBase, _MatTabNavBase, matTabsAnimations, _MAT_INK_BAR_POSITIONER_FACTORY as ɵangular_material_src_material_tabs_tabs_a, MAT_TAB_LABEL as ɵangular_material_src_material_tabs_tabs_b, MAT_TAB_CONTENT as ɵangular_material_src_material_tabs_tabs_c, MatPaginatedTabHeader as ɵangular_material_src_material_tabs_tabs_d };","map":{"version":3,"names":["FocusKeyManager","FocusMonitor","A11yModule","ObserversModule","CdkPortal","TemplatePortal","CdkPortalOutlet","PortalModule","DOCUMENT","CommonModule","InjectionToken","Directive","ElementRef","NgZone","Inject","Optional","TemplateRef","Component","ChangeDetectionStrategy","ViewEncapsulation","ViewContainerRef","ContentChild","ViewChild","Input","ComponentFactoryResolver","forwardRef","EventEmitter","ChangeDetectorRef","Output","QueryList","ContentChildren","Attribute","NgModule","mixinDisabled","mixinColor","mixinDisableRipple","mixinTabIndex","MAT_RIPPLE_GLOBAL_OPTIONS","RippleRenderer","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","Subject","Subscription","merge","fromEvent","of","timer","Directionality","trigger","state","style","transition","animate","startWith","distinctUntilChanged","takeUntil","coerceBooleanProperty","coerceNumberProperty","ViewportRuler","normalizePassiveListenerOptions","Platform","hasModifierKey","SPACE","ENTER","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","method","element","left","offsetLeft","width","offsetWidth","MatInkBar","constructor","_elementRef","_ngZone","_inkBarPositioner","_animationMode","alignToElement","show","requestAnimationFrame","runOutsideAngular","_setStyles","nativeElement","visibility","hide","positions","inkBar","decorators","type","args","selector","host","ctorParameters","undefined","String","MAT_TAB_CONTENT","MatTabContent","template","providers","provide","useExisting","MAT_TAB_LABEL","MatTabLabel","MatTabBase","_MatTabMixinBase","MAT_TAB_GROUP","MatTab","_viewContainerRef","_closestTabGroup","textLabel","_contentPortal","_stateChanges","position","origin","isActive","templateLabel","_templateLabel","value","_setTemplateLabelInput","content","ngOnChanges","changes","hasOwnProperty","next","ngOnDestroy","complete","ngOnInit","_explicitContent","_implicitContent","inputs","changeDetection","Default","encapsulation","None","exportAs","propDecorators","read","static","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","transform","minHeight","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_document","_centeringSub","EMPTY","_leavingSub","_beforeCentering","pipe","_isCenterPosition","_position","subscribe","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","MatTabBody","_MatTabBodyBase","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","elementRef","animations","styles","_portalHost","MAT_TABS_CONFIG","nextId","MatTabChangeEvent","MatTabGroupMixinBase","_MatTabGroupMixinBase","_MatTabGroupBase","_changeDetectorRef","defaultConfig","_tabs","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","disablePagination","dynamicHeight","_dynamicHeight","selectedIndex","_animationDuration","test","backgroundColor","_backgroundColor","classList","remove","add","ngAfterContentChecked","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","wrapper","_tabBodyWrapper","Promise","resolve","then","forEach","tab","index","ngAfterContentInit","_subscribeToAllTabChanges","_subscribeToTabLabels","tabs","toArray","i","length","_allTabs","reset","filter","notifyOnChanges","destroy","realignInkBar","_tabHeader","_alignInkBarToSelectedTab","_focusChanged","map","Math","min","max","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","disabled","focusIndex","_getTabIndex","idx","_tabFocusChanged","focusOrigin","MatTabGroup","animationMode","descendants","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","focus","getOffsetLeft","getOffsetWidth","passiveEventListenerOptions","passive","EXAGGERATED_OVERSCROLL","HEADER_SCROLL_DELAY","HEADER_SCROLL_INTERVAL","MatPaginatedTabHeader","_viewportRuler","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","selectFocusedIndex","indexFocused","_stopInterval","_keyManager","updateActiveItem","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","dirChange","resize","realign","updatePagination","_items","withHorizontalOrientation","withHomeAndEnd","withWrap","run","newFocusIndex","_setTabFocus","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","_itemSelected","onKeydown","_onContentChanges","textContent","_currentTextContent","_checkPaginationEnabled","activeItemIndex","_isValidIndex","setActiveItem","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","lengthOfTabList","selectedItem","selectedLabelWrapper","_inkBar","mouseEvent","button","maxScrollDistance","distance","_MatTabHeaderBase","viewportRuler","ngZone","platform","_disableRipple","disableRipple","preventDefault","MatTabHeader","outputs","_MatTabNavBase","color","updateActiveLink","items","active","MatTabNav","MatTabLink","MatTabLinkMixinBase","_MatTabLinkMixinBase","_MatTabLinkBase","_tabNavBar","globalRippleOptions","_focusMonitor","_isActive","rippleConfig","parseInt","animation","enterDuration","exitDuration","newValue","rippleDisabled","monitor","stopMonitoring","tabNavBar","focusMonitor","_tabLinkRipple","setupTriggerEvents","_removeTriggerEvents","MatTabsModule","imports","exports","declarations","ɵangular_material_src_material_tabs_tabs_a","ɵangular_material_src_material_tabs_tabs_b","ɵangular_material_src_material_tabs_tabs_c","ɵangular_material_src_material_tabs_tabs_d"],"sources":["/Users/qisstpay/Documents/GitHub/prot-2/node_modules/@angular/material/fesm2015/tabs.js"],"sourcesContent":["import { FocusKeyManager, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CdkPortal, TemplatePortal, CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, NgZone, Inject, Optional, TemplateRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ViewContainerRef, ContentChild, ViewChild, Input, ComponentFactoryResolver, forwardRef, EventEmitter, ChangeDetectorRef, Output, QueryList, ContentChildren, Attribute, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinColor, mixinDisableRipple, mixinTabIndex, MAT_RIPPLE_GLOBAL_OPTIONS, RippleRenderer, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, merge, fromEvent, of, timer } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { startWith, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { hasModifierKey, SPACE, ENTER } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token for the MatInkBar's Positioner. */\nconst _MAT_INK_BAR_POSITIONER = new InjectionToken('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n});\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nfunction _MAT_INK_BAR_POSITIONER_FACTORY() {\n    const method = (element) => ({\n        left: element ? (element.offsetLeft || 0) + 'px' : '0',\n        width: element ? (element.offsetWidth || 0) + 'px' : '0',\n    });\n    return method;\n}\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\nclass MatInkBar {\n    constructor(_elementRef, _ngZone, _inkBarPositioner, _animationMode) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._inkBarPositioner = _inkBarPositioner;\n        this._animationMode = _animationMode;\n    }\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param element\n     */\n    alignToElement(element) {\n        this.show();\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => this._setStyles(element));\n            });\n        }\n        else {\n            this._setStyles(element);\n        }\n    }\n    /** Shows the ink bar. */\n    show() {\n        this._elementRef.nativeElement.style.visibility = 'visible';\n    }\n    /** Hides the ink bar. */\n    hide() {\n        this._elementRef.nativeElement.style.visibility = 'hidden';\n    }\n    /**\n     * Sets the proper styles to the ink bar element.\n     * @param element\n     */\n    _setStyles(element) {\n        const positions = this._inkBarPositioner(element);\n        const inkBar = this._elementRef.nativeElement;\n        inkBar.style.left = positions.left;\n        inkBar.style.width = positions.width;\n    }\n}\nMatInkBar.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-ink-bar',\n                host: {\n                    'class': 'mat-ink-bar',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                },\n            },] }\n];\nMatInkBar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [_MAT_INK_BAR_POSITIONER,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatTabContent`. It serves as\n * alternative token to the actual `MatTabContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_TAB_CONTENT = new InjectionToken('MatTabContent');\n/** Decorates the `ng-template` tags and reads out the template from it. */\nclass MatTabContent {\n    constructor(\n    /** Content for the tab. */ template) {\n        this.template = template;\n    }\n}\nMatTabContent.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTabContent]',\n                providers: [{ provide: MAT_TAB_CONTENT, useExisting: MatTabContent }],\n            },] }\n];\nMatTabContent.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatTabLabel`. It serves as\n * alternative token to the actual `MatTabLabel` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_TAB_LABEL = new InjectionToken('MatTabLabel');\n/** Used to flag tab labels for use with the portal directive */\nclass MatTabLabel extends CdkPortal {\n}\nMatTabLabel.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-tab-label], [matTabLabel]',\n                providers: [{ provide: MAT_TAB_LABEL, useExisting: MatTabLabel }],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {\n}\nconst _MatTabMixinBase = mixinDisabled(MatTabBase);\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\nconst MAT_TAB_GROUP = new InjectionToken('MAT_TAB_GROUP');\nclass MatTab extends _MatTabMixinBase {\n    constructor(_viewContainerRef, _closestTabGroup) {\n        super();\n        this._viewContainerRef = _viewContainerRef;\n        this._closestTabGroup = _closestTabGroup;\n        /** Plain text label for the tab, used when there is no template label. */\n        this.textLabel = '';\n        /** Portal that will be the hosted content of the tab */\n        this._contentPortal = null;\n        /** Emits whenever the internal state of the tab changes. */\n        this._stateChanges = new Subject();\n        /**\n         * The relatively indexed position where 0 represents the center, negative is left, and positive\n         * represents the right.\n         */\n        this.position = null;\n        /**\n         * The initial relatively index origin of the tab if it was created and selected after there\n         * was already a selected tab. Provides context of what position the tab should originate from.\n         */\n        this.origin = null;\n        /**\n         * Whether the tab is currently active.\n         */\n        this.isActive = false;\n    }\n    /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n    get templateLabel() { return this._templateLabel; }\n    set templateLabel(value) { this._setTemplateLabelInput(value); }\n    /** @docs-private */\n    get content() {\n        return this._contentPortal;\n    }\n    ngOnChanges(changes) {\n        if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n            this._stateChanges.next();\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    ngOnInit() {\n        this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setTemplateLabelInput(value) {\n        // Only update the templateLabel via query if there is actually\n        // a MatTabLabel found. This works around an issue where a user may have\n        // manually set `templateLabel` during creation mode, which would then get clobbered\n        // by `undefined` when this query resolves.\n        if (value) {\n            this._templateLabel = value;\n        }\n    }\n}\nMatTab.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-tab',\n                template: \"<!-- Create a template for the content of the <mat-tab> so that we can grab a reference to this\\n    TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\\n    tab-group. -->\\n<ng-template><ng-content></ng-content></ng-template>\\n\",\n                inputs: ['disabled'],\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matTab'\n            },] }\n];\nMatTab.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TAB_GROUP,] }] }\n];\nMatTab.propDecorators = {\n    templateLabel: [{ type: ContentChild, args: [MAT_TAB_LABEL,] }],\n    _explicitContent: [{ type: ContentChild, args: [MAT_TAB_CONTENT, { read: TemplateRef, static: true },] }],\n    _implicitContent: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    textLabel: [{ type: Input, args: ['label',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nconst matTabsAnimations = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state('center, void, left-origin-center, right-origin-center', style({ transform: 'none' })),\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state('left', style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })),\n        state('right', style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })),\n        transition('* => left, * => right, left => center, right => center', animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\nclass MatTabBodyPortal extends CdkPortalOutlet {\n    constructor(componentFactoryResolver, viewContainerRef, _host, _document) {\n        super(componentFactoryResolver, viewContainerRef, _document);\n        this._host = _host;\n        /** Subscription to events for when the tab body begins centering. */\n        this._centeringSub = Subscription.EMPTY;\n        /** Subscription to events for when the tab body finishes leaving from center position. */\n        this._leavingSub = Subscription.EMPTY;\n    }\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit() {\n        super.ngOnInit();\n        this._centeringSub = this._host._beforeCentering\n            .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n            .subscribe((isCentering) => {\n            if (isCentering && !this.hasAttached()) {\n                this.attach(this._host._content);\n            }\n        });\n        this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n    /** Clean up centering subscription. */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._centeringSub.unsubscribe();\n        this._leavingSub.unsubscribe();\n    }\n}\nMatTabBodyPortal.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTabBodyHost]'\n            },] }\n];\nMatTabBodyPortal.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef },\n    { type: MatTabBody, decorators: [{ type: Inject, args: [forwardRef(() => MatTabBody),] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/**\n * Base class with all of the `MatTabBody` functionality.\n * @docs-private\n */\nclass _MatTabBodyBase {\n    constructor(_elementRef, _dir, changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        /** Subscription to the directionality change observable. */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /** Emits when an animation on the tab is complete. */\n        this._translateTabComplete = new Subject();\n        /** Event emitted when the tab begins to animate towards the center as the active tab. */\n        this._onCentering = new EventEmitter();\n        /** Event emitted before the centering of the tab begins. */\n        this._beforeCentering = new EventEmitter();\n        /** Event emitted before the centering of the tab begins. */\n        this._afterLeavingCenter = new EventEmitter();\n        /** Event emitted when the tab completes its animation towards the center. */\n        this._onCentered = new EventEmitter(true);\n        // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n        // anyway to prevent the animations module from throwing an error if the body is used on its own.\n        /** Duration for the tab's animation. */\n        this.animationDuration = '500ms';\n        if (_dir) {\n            this._dirChangeSubscription = _dir.change.subscribe((dir) => {\n                this._computePositionAnimationState(dir);\n                changeDetectorRef.markForCheck();\n            });\n        }\n        // Ensure that we get unique animation events, because the `.done` callback can get\n        // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n        this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        })).subscribe(event => {\n            // If the transition to the center is complete, emit an event.\n            if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n                this._onCentered.emit();\n            }\n            if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n                this._afterLeavingCenter.emit();\n            }\n        });\n    }\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    set position(position) {\n        this._positionIndex = position;\n        this._computePositionAnimationState();\n    }\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this._position == 'center' && this.origin != null) {\n            this._position = this._computePositionFromOrigin(this.origin);\n        }\n    }\n    ngOnDestroy() {\n        this._dirChangeSubscription.unsubscribe();\n        this._translateTabComplete.complete();\n    }\n    _onTranslateTabStarted(event) {\n        const isCentering = this._isCenterPosition(event.toState);\n        this._beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n        }\n    }\n    /** The text direction of the containing app. */\n    _getLayoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the provided position state is considered center, regardless of origin. */\n    _isCenterPosition(position) {\n        return position == 'center' ||\n            position == 'left-origin-center' ||\n            position == 'right-origin-center';\n    }\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    _computePositionAnimationState(dir = this._getLayoutDirection()) {\n        if (this._positionIndex < 0) {\n            this._position = dir == 'ltr' ? 'left' : 'right';\n        }\n        else if (this._positionIndex > 0) {\n            this._position = dir == 'ltr' ? 'right' : 'left';\n        }\n        else {\n            this._position = 'center';\n        }\n    }\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    _computePositionFromOrigin(origin) {\n        const dir = this._getLayoutDirection();\n        if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n            return 'left-origin-center';\n        }\n        return 'right-origin-center';\n    }\n}\n_MatTabBodyBase.decorators = [\n    { type: Directive }\n];\n_MatTabBodyBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef }\n];\n_MatTabBodyBase.propDecorators = {\n    _onCentering: [{ type: Output }],\n    _beforeCentering: [{ type: Output }],\n    _afterLeavingCenter: [{ type: Output }],\n    _onCentered: [{ type: Output }],\n    _content: [{ type: Input, args: ['content',] }],\n    origin: [{ type: Input }],\n    animationDuration: [{ type: Input }],\n    position: [{ type: Input }]\n};\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\nclass MatTabBody extends _MatTabBodyBase {\n    constructor(elementRef, dir, changeDetectorRef) {\n        super(elementRef, dir, changeDetectorRef);\n    }\n}\nMatTabBody.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-tab-body',\n                template: \"<div class=\\\"mat-tab-body-content\\\" #content\\n     [@translateTab]=\\\"{\\n        value: _position,\\n        params: {animationDuration: animationDuration}\\n     }\\\"\\n     (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\"\\n     (@translateTab.done)=\\\"_translateTabComplete.next($event)\\\"\\n     cdkScrollable>\\n  <ng-template matTabBodyHost></ng-template>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matTabsAnimations.translateTab],\n                host: {\n                    'class': 'mat-tab-body',\n                },\n                styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\\n\"]\n            },] }\n];\nMatTabBody.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef }\n];\nMatTabBody.propDecorators = {\n    _portalHost: [{ type: ViewChild, args: [CdkPortalOutlet,] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options the tabs module. */\nconst MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n/** A simple change event emitted on focus or selection changes. */\nclass MatTabChangeEvent {\n}\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupMixinBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupMixinBase), 'primary');\n/**\n * Base class with all of the `MatTabGroupBase` functionality.\n * @docs-private\n */\nclass _MatTabGroupBase extends _MatTabGroupMixinBase {\n    constructor(elementRef, _changeDetectorRef, defaultConfig, _animationMode) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** All of the tabs that belong to the group. */\n        this._tabs = new QueryList();\n        /** The tab index that should be selected after the content has been checked. */\n        this._indexToSelect = 0;\n        /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n        this._tabBodyWrapperHeight = 0;\n        /** Subscription to tabs being added/removed. */\n        this._tabsSubscription = Subscription.EMPTY;\n        /** Subscription to changes in the tab labels. */\n        this._tabLabelSubscription = Subscription.EMPTY;\n        this._selectedIndex = null;\n        /** Position of the tab header. */\n        this.headerPosition = 'above';\n        /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n        this.selectedIndexChange = new EventEmitter();\n        /** Event emitted when focus has changed within a tab group. */\n        this.focusChange = new EventEmitter();\n        /** Event emitted when the body animation has completed */\n        this.animationDone = new EventEmitter();\n        /** Event emitted when the tab selection has changed. */\n        this.selectedTabChange = new EventEmitter(true);\n        this._groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '500ms';\n        this.disablePagination = defaultConfig && defaultConfig.disablePagination != null ?\n            defaultConfig.disablePagination : false;\n        this.dynamicHeight = defaultConfig && defaultConfig.dynamicHeight != null ?\n            defaultConfig.dynamicHeight : false;\n    }\n    /** Whether the tab group should grow to the size of the active tab. */\n    get dynamicHeight() { return this._dynamicHeight; }\n    set dynamicHeight(value) { this._dynamicHeight = coerceBooleanProperty(value); }\n    /** The index of the active tab. */\n    get selectedIndex() { return this._selectedIndex; }\n    set selectedIndex(value) {\n        this._indexToSelect = coerceNumberProperty(value, null);\n    }\n    /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n    get animationDuration() { return this._animationDuration; }\n    set animationDuration(value) {\n        this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n    }\n    /** Background color of the tab group. */\n    get backgroundColor() { return this._backgroundColor; }\n    set backgroundColor(value) {\n        const nativeElement = this._elementRef.nativeElement;\n        nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n        if (value) {\n            nativeElement.classList.add(`mat-background-${value}`);\n        }\n        this._backgroundColor = value;\n    }\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex != indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n                // Preserve the height so page doesn't scroll up during tab change.\n                // Fixes https://stackblitz.com/edit/mat-tabs-scroll-page-top-on-tab-change\n                const wrapper = this._tabBodyWrapper.nativeElement;\n                wrapper.style.minHeight = wrapper.clientHeight + 'px';\n            }\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                    // Clear the min-height, this was needed during tab change to avoid\n                    // unnecessary scrolling.\n                    this._tabBodyWrapper.nativeElement.style.minHeight = '';\n                }\n            });\n        }\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this._tabs.forEach((tab, index) => {\n            tab.position = index - indexToSelect;\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    ngAfterContentInit() {\n        this._subscribeToAllTabChanges();\n        this._subscribeToTabLabels();\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this._tabsSubscription = this._tabs.changes.subscribe(() => {\n            const indexToSelect = this._clampTabIndex(this._indexToSelect);\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this._tabs.toArray();\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this._indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Listens to changes in all of the tabs. */\n    _subscribeToAllTabChanges() {\n        // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n        // some that are inside of nested tab groups. We filter them out manually by checking that\n        // the closest group to the tab is the current one.\n        this._allTabs.changes\n            .pipe(startWith(this._allTabs))\n            .subscribe((tabs) => {\n            this._tabs.reset(tabs.filter(tab => tab._closestTabGroup === this));\n            this._tabs.notifyOnChanges();\n        });\n    }\n    ngOnDestroy() {\n        this._tabs.destroy();\n        this._tabsSubscription.unsubscribe();\n        this._tabLabelSubscription.unsubscribe();\n    }\n    /** Re-aligns the ink bar to the selected tab element. */\n    realignInkBar() {\n        if (this._tabHeader) {\n            this._tabHeader._alignInkBarToSelectedTab();\n        }\n    }\n    _focusChanged(index) {\n        this.focusChange.emit(this._createChangeEvent(index));\n    }\n    _createChangeEvent(index) {\n        const event = new MatTabChangeEvent;\n        event.index = index;\n        if (this._tabs && this._tabs.length) {\n            event.tab = this._tabs.toArray()[index];\n        }\n        return event;\n    }\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    _subscribeToTabLabels() {\n        if (this._tabLabelSubscription) {\n            this._tabLabelSubscription.unsubscribe();\n        }\n        this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    _clampTabIndex(index) {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Math.max(NaN, 0) === NaN).\n        return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n    }\n    /** Returns a unique id for each tab label element */\n    _getTabLabelId(i) {\n        return `mat-tab-label-${this._groupId}-${i}`;\n    }\n    /** Returns a unique id for each tab content element */\n    _getTabContentId(i) {\n        return `mat-tab-content-${this._groupId}-${i}`;\n    }\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    _setTabBodyWrapperHeight(tabHeight) {\n        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n            return;\n        }\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = tabHeight + 'px';\n        }\n    }\n    /** Removes the height of the tab body wrapper. */\n    _removeTabBodyWrapperHeight() {\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        this._tabBodyWrapperHeight = wrapper.clientHeight;\n        wrapper.style.height = '';\n        this.animationDone.emit();\n    }\n    /** Handle click events, setting new selected index if appropriate. */\n    _handleClick(tab, tabHeader, index) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n    /** Retrieves the tabindex for the tab. */\n    _getTabIndex(tab, idx) {\n        if (tab.disabled) {\n            return null;\n        }\n        return this.selectedIndex === idx ? 0 : -1;\n    }\n    /** Callback for when the focused state of a tab has changed. */\n    _tabFocusChanged(focusOrigin, index) {\n        if (focusOrigin) {\n            this._tabHeader.focusIndex = index;\n        }\n    }\n}\n_MatTabGroupBase.decorators = [\n    { type: Directive }\n];\n_MatTabGroupBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TABS_CONFIG,] }, { type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n_MatTabGroupBase.propDecorators = {\n    dynamicHeight: [{ type: Input }],\n    selectedIndex: [{ type: Input }],\n    headerPosition: [{ type: Input }],\n    animationDuration: [{ type: Input }],\n    disablePagination: [{ type: Input }],\n    backgroundColor: [{ type: Input }],\n    selectedIndexChange: [{ type: Output }],\n    focusChange: [{ type: Output }],\n    animationDone: [{ type: Output }],\n    selectedTabChange: [{ type: Output }]\n};\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\nclass MatTabGroup extends _MatTabGroupBase {\n    constructor(elementRef, changeDetectorRef, defaultConfig, animationMode) {\n        super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n    }\n}\nMatTabGroup.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-tab-group',\n                exportAs: 'matTabGroup',\n                template: \"<mat-tab-header #tabHeader\\n               [selectedIndex]=\\\"selectedIndex || 0\\\"\\n               [disableRipple]=\\\"disableRipple\\\"\\n               [disablePagination]=\\\"disablePagination\\\"\\n               (indexFocused)=\\\"_focusChanged($event)\\\"\\n               (selectFocusedIndex)=\\\"selectedIndex = $event\\\">\\n  <div class=\\\"mat-tab-label mat-focus-indicator\\\" role=\\\"tab\\\" matTabLabelWrapper mat-ripple cdkMonitorElementFocus\\n       *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n       [id]=\\\"_getTabLabelId(i)\\\"\\n       [attr.tabIndex]=\\\"_getTabIndex(tab, i)\\\"\\n       [attr.aria-posinset]=\\\"i + 1\\\"\\n       [attr.aria-setsize]=\\\"_tabs.length\\\"\\n       [attr.aria-controls]=\\\"_getTabContentId(i)\\\"\\n       [attr.aria-selected]=\\\"selectedIndex == i\\\"\\n       [attr.aria-label]=\\\"tab.ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\\\"\\n       [class.mat-tab-label-active]=\\\"selectedIndex == i\\\"\\n       [disabled]=\\\"tab.disabled\\\"\\n       [matRippleDisabled]=\\\"tab.disabled || disableRipple\\\"\\n       (click)=\\\"_handleClick(tab, tabHeader, i)\\\"\\n       (cdkFocusChange)=\\\"_tabFocusChanged($event, i)\\\">\\n\\n\\n    <div class=\\\"mat-tab-label-content\\\">\\n      <!-- If there is a label template, use it. -->\\n      <ng-template [ngIf]=\\\"tab.templateLabel\\\">\\n        <ng-template [cdkPortalOutlet]=\\\"tab.templateLabel\\\"></ng-template>\\n      </ng-template>\\n\\n      <!-- If there is not a label template, fall back to the text label. -->\\n      <ng-template [ngIf]=\\\"!tab.templateLabel\\\">{{tab.textLabel}}</ng-template>\\n    </div>\\n  </div>\\n</mat-tab-header>\\n\\n<div\\n  class=\\\"mat-tab-body-wrapper\\\"\\n  [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n  #tabBodyWrapper>\\n  <mat-tab-body role=\\\"tabpanel\\\"\\n               *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n               [id]=\\\"_getTabContentId(i)\\\"\\n               [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\"\\n               [class.mat-tab-body-active]=\\\"selectedIndex == i\\\"\\n               [content]=\\\"tab.content!\\\"\\n               [position]=\\\"tab.position!\\\"\\n               [origin]=\\\"tab.origin\\\"\\n               [animationDuration]=\\\"animationDuration\\\"\\n               (_onCentered)=\\\"_removeTabBodyWrapperHeight()\\\"\\n               (_onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\">\\n  </mat-tab-body>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                inputs: ['color', 'disableRipple'],\n                providers: [{\n                        provide: MAT_TAB_GROUP,\n                        useExisting: MatTabGroup\n                    }],\n                host: {\n                    'class': 'mat-tab-group',\n                    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n                    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n                },\n                styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{padding:0 12px}}@media(max-width: 959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\\n\"]\n            },] }\n];\nMatTabGroup.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TABS_CONFIG,] }, { type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabGroup.propDecorators = {\n    _allTabs: [{ type: ContentChildren, args: [MatTab, { descendants: true },] }],\n    _tabBodyWrapper: [{ type: ViewChild, args: ['tabBodyWrapper',] }],\n    _tabHeader: [{ type: ViewChild, args: ['tabHeader',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {\n}\nconst _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\nclass MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase {\n    constructor(elementRef) {\n        super();\n        this.elementRef = elementRef;\n    }\n    /** Sets focus on the wrapper element */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n    getOffsetLeft() {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n    getOffsetWidth() {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\nMatTabLabelWrapper.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTabLabelWrapper]',\n                inputs: ['disabled'],\n                host: {\n                    '[class.mat-tab-disabled]': 'disabled',\n                    '[attr.aria-disabled]': '!!disabled',\n                }\n            },] }\n];\nMatTabLabelWrapper.ctorParameters = () => [\n    { type: ElementRef }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n/**\n * Base class for a tab header that supported pagination.\n * @docs-private\n */\nclass MatPaginatedTabHeader {\n    constructor(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone, _platform, _animationMode) {\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this._dir = _dir;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._animationMode = _animationMode;\n        /** The distance in pixels that the tab labels should be translated to the left. */\n        this._scrollDistance = 0;\n        /** Whether the header should scroll to the selected index after the view has been checked. */\n        this._selectedIndexChanged = false;\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Whether the controls for pagination should be displayed */\n        this._showPaginationControls = false;\n        /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n        this._disableScrollAfter = true;\n        /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n        this._disableScrollBefore = true;\n        /** Stream that will stop the automated scrolling. */\n        this._stopScrolling = new Subject();\n        /**\n         * Whether pagination should be disabled. This can be used to avoid unnecessary\n         * layout recalculations if it's known that pagination won't be required.\n         */\n        this.disablePagination = false;\n        this._selectedIndex = 0;\n        /** Event emitted when the option is selected. */\n        this.selectFocusedIndex = new EventEmitter();\n        /** Event emitted when a label is focused. */\n        this.indexFocused = new EventEmitter();\n        // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n        _ngZone.runOutsideAngular(() => {\n            fromEvent(_elementRef.nativeElement, 'mouseleave')\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => {\n                this._stopInterval();\n            });\n        });\n    }\n    /** The index of the active tab. */\n    get selectedIndex() { return this._selectedIndex; }\n    set selectedIndex(value) {\n        value = coerceNumberProperty(value);\n        if (this._selectedIndex != value) {\n            this._selectedIndexChanged = true;\n            this._selectedIndex = value;\n            if (this._keyManager) {\n                this._keyManager.updateActiveItem(value);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        // We need to handle these events manually, because we want to bind passive event listeners.\n        fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._handlePaginatorPress('before');\n        });\n        fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._handlePaginatorPress('after');\n        });\n    }\n    ngAfterContentInit() {\n        const dirChange = this._dir ? this._dir.change : of(null);\n        const resize = this._viewportRuler.change(150);\n        const realign = () => {\n            this.updatePagination();\n            this._alignInkBarToSelectedTab();\n        };\n        this._keyManager = new FocusKeyManager(this._items)\n            .withHorizontalOrientation(this._getLayoutDirection())\n            .withHomeAndEnd()\n            .withWrap();\n        this._keyManager.updateActiveItem(this._selectedIndex);\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n        // On dir change or window resize, realign the ink bar and update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe(() => {\n            // We need to defer this to give the browser some time to recalculate\n            // the element dimensions. The call has to be wrapped in `NgZone.run`,\n            // because the viewport change handler runs outside of Angular.\n            this._ngZone.run(() => Promise.resolve().then(realign));\n            this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n        });\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n            this.indexFocused.emit(newFocusIndex);\n            this._setTabFocus(newFocusIndex);\n        });\n    }\n    ngAfterContentChecked() {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this._tabLabelCount != this._items.length) {\n            this.updatePagination();\n            this._tabLabelCount = this._items.length;\n            this._changeDetectorRef.markForCheck();\n        }\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this._selectedIndexChanged) {\n            this._scrollToLabel(this._selectedIndex);\n            this._checkScrollingControls();\n            this._alignInkBarToSelectedTab();\n            this._selectedIndexChanged = false;\n            this._changeDetectorRef.markForCheck();\n        }\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this._scrollDistanceChanged) {\n            this._updateTabScrollPosition();\n            this._scrollDistanceChanged = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._stopScrolling.complete();\n    }\n    /** Handles keyboard events on the header. */\n    _handleKeydown(event) {\n        // We don't handle any key bindings with a modifier key.\n        if (hasModifierKey(event)) {\n            return;\n        }\n        switch (event.keyCode) {\n            case ENTER:\n            case SPACE:\n                if (this.focusIndex !== this.selectedIndex) {\n                    this.selectFocusedIndex.emit(this.focusIndex);\n                    this._itemSelected(event);\n                }\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    _onContentChanges() {\n        const textContent = this._elementRef.nativeElement.textContent;\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in (see #14249).\n        if (textContent !== this._currentTextContent) {\n            this._currentTextContent = textContent || '';\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            this._ngZone.run(() => {\n                this.updatePagination();\n                this._alignInkBarToSelectedTab();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /**\n     * Updates the view whether pagination should be enabled or not.\n     *\n     * WARNING: Calling this method can be very costly in terms of performance. It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this._checkPaginationEnabled();\n        this._checkScrollingControls();\n        this._updateTabScrollPosition();\n    }\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex() {\n        return this._keyManager ? this._keyManager.activeItemIndex : 0;\n    }\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value) {\n        if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n            return;\n        }\n        this._keyManager.setActiveItem(value);\n    }\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    _isValidIndex(index) {\n        if (!this._items) {\n            return true;\n        }\n        const tab = this._items ? this._items.toArray()[index] : null;\n        return !!tab && !tab.disabled;\n    }\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    _setTabFocus(tabIndex) {\n        if (this._showPaginationControls) {\n            this._scrollToLabel(tabIndex);\n        }\n        if (this._items && this._items.length) {\n            this._items.toArray()[tabIndex].focus();\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this._tabListContainer.nativeElement;\n            const dir = this._getLayoutDirection();\n            if (dir == 'ltr') {\n                containerEl.scrollLeft = 0;\n            }\n            else {\n                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n    /** The layout direction of the containing app. */\n    _getLayoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    _updateTabScrollPosition() {\n        if (this.disablePagination) {\n            return;\n        }\n        const scrollDistance = this.scrollDistance;\n        const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n        // and ripples will exceed the boundaries of the visible tab bar.\n        // See: https://github.com/angular/components/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n        // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n        if (this._platform.TRIDENT || this._platform.EDGE) {\n            this._tabListContainer.nativeElement.scrollLeft = 0;\n        }\n    }\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance() { return this._scrollDistance; }\n    set scrollDistance(value) {\n        this._scrollTo(value);\n    }\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollHeader(direction) {\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n        return this._scrollTo(this._scrollDistance + scrollAmount);\n    }\n    /** Handles click events on the pagination arrows. */\n    _handlePaginatorClick(direction) {\n        this._stopInterval();\n        this._scrollHeader(direction);\n    }\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollToLabel(labelIndex) {\n        if (this.disablePagination) {\n            return;\n        }\n        const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n        if (!selectedLabel) {\n            return;\n        }\n        // The view length is the visible width of the tab labels.\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        const { offsetLeft, offsetWidth } = selectedLabel.elementRef.nativeElement;\n        let labelBeforePos, labelAfterPos;\n        if (this._getLayoutDirection() == 'ltr') {\n            labelBeforePos = offsetLeft;\n            labelAfterPos = labelBeforePos + offsetWidth;\n        }\n        else {\n            labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n            labelBeforePos = labelAfterPos - offsetWidth;\n        }\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        }\n        else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkPaginationEnabled() {\n        if (this.disablePagination) {\n            this._showPaginationControls = false;\n        }\n        else {\n            const isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n            if (!isEnabled) {\n                this.scrollDistance = 0;\n            }\n            if (isEnabled !== this._showPaginationControls) {\n                this._changeDetectorRef.markForCheck();\n            }\n            this._showPaginationControls = isEnabled;\n        }\n    }\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkScrollingControls() {\n        if (this.disablePagination) {\n            this._disableScrollAfter = this._disableScrollBefore = true;\n        }\n        else {\n            // Check if the pagination arrows should be activated.\n            this._disableScrollBefore = this.scrollDistance == 0;\n            this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _getMaxScrollDistance() {\n        const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        return (lengthOfTabList - viewLength) || 0;\n    }\n    /** Tells the ink-bar to align itself to the current label wrapper */\n    _alignInkBarToSelectedTab() {\n        const selectedItem = this._items && this._items.length ?\n            this._items.toArray()[this.selectedIndex] : null;\n        const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n        if (selectedLabelWrapper) {\n            this._inkBar.alignToElement(selectedLabelWrapper);\n        }\n        else {\n            this._inkBar.hide();\n        }\n    }\n    /** Stops the currently-running paginator interval.  */\n    _stopInterval() {\n        this._stopScrolling.next();\n    }\n    /**\n     * Handles the user pressing down on one of the paginators.\n     * Starts scrolling the header after a certain amount of time.\n     * @param direction In which direction the paginator should be scrolled.\n     */\n    _handlePaginatorPress(direction, mouseEvent) {\n        // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n        // null check the `button`, but we do it so we don't break tests that use fake events.\n        if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n            return;\n        }\n        // Avoid overlapping timers.\n        this._stopInterval();\n        // Start a timer after the delay and keep firing based on the interval.\n        timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n            // Keep the timer going until something tells it to stop or the component is destroyed.\n            .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n            .subscribe(() => {\n            const { maxScrollDistance, distance } = this._scrollHeader(direction);\n            // Stop the timer if we've reached the start or the end.\n            if (distance === 0 || distance >= maxScrollDistance) {\n                this._stopInterval();\n            }\n        });\n    }\n    /**\n     * Scrolls the header to a given position.\n     * @param position Position to which to scroll.\n     * @returns Information on the current scroll distance and the maximum.\n     */\n    _scrollTo(position) {\n        if (this.disablePagination) {\n            return { maxScrollDistance: 0, distance: 0 };\n        }\n        const maxScrollDistance = this._getMaxScrollDistance();\n        this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this._scrollDistanceChanged = true;\n        this._checkScrollingControls();\n        return { maxScrollDistance, distance: this._scrollDistance };\n    }\n}\nMatPaginatedTabHeader.decorators = [\n    { type: Directive }\n];\nMatPaginatedTabHeader.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatPaginatedTabHeader.propDecorators = {\n    disablePagination: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class with all of the `MatTabHeader` functionality.\n * @docs-private\n */\nclass _MatTabHeaderBase extends MatPaginatedTabHeader {\n    constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n        this._disableRipple = false;\n    }\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n    _itemSelected(event) {\n        event.preventDefault();\n    }\n}\n_MatTabHeaderBase.decorators = [\n    { type: Directive }\n];\n_MatTabHeaderBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n_MatTabHeaderBase.propDecorators = {\n    disableRipple: [{ type: Input }]\n};\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\nclass MatTabHeader extends _MatTabHeaderBase {\n    constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n    }\n}\nMatTabHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-tab-header',\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\\n<div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    #tabList\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    role=\\\"tablist\\\"\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-labels\\\">\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\",\n                inputs: ['selectedIndex'],\n                outputs: ['selectFocusedIndex', 'indexFocused'],\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                host: {\n                    'class': 'mat-tab-header',\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n                },\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-labels{display:flex}[mat-align-tabs=center]>.mat-tab-header .mat-tab-labels{justify-content:center}[mat-align-tabs=end]>.mat-tab-header .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{min-width:72px}}\\n\"]\n            },] }\n];\nMatTabHeader.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabHeader.propDecorators = {\n    _items: [{ type: ContentChildren, args: [MatTabLabelWrapper, { descendants: false },] }],\n    _inkBar: [{ type: ViewChild, args: [MatInkBar, { static: true },] }],\n    _tabListContainer: [{ type: ViewChild, args: ['tabListContainer', { static: true },] }],\n    _tabList: [{ type: ViewChild, args: ['tabList', { static: true },] }],\n    _nextPaginator: [{ type: ViewChild, args: ['nextPaginator',] }],\n    _previousPaginator: [{ type: ViewChild, args: ['previousPaginator',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class with all of the `MatTabNav` functionality.\n * @docs-private\n */\nclass _MatTabNavBase extends MatPaginatedTabHeader {\n    constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n        this._disableRipple = false;\n        /** Theme color of the nav bar. */\n        this.color = 'primary';\n    }\n    /** Background color of the tab nav. */\n    get backgroundColor() { return this._backgroundColor; }\n    set backgroundColor(value) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-background-${this.backgroundColor}`);\n        if (value) {\n            classList.add(`mat-background-${value}`);\n        }\n        this._backgroundColor = value;\n    }\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n    _itemSelected() {\n        // noop\n    }\n    ngAfterContentInit() {\n        // We need this to run before the `changes` subscription in parent to ensure that the\n        // selectedIndex is up-to-date by the time the super class starts looking for it.\n        this._items.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            this.updateActiveLink();\n        });\n        super.ngAfterContentInit();\n    }\n    /** Notifies the component that the active link has been changed. */\n    updateActiveLink() {\n        if (!this._items) {\n            return;\n        }\n        const items = this._items.toArray();\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].active) {\n                this.selectedIndex = i;\n                this._changeDetectorRef.markForCheck();\n                return;\n            }\n        }\n        // The ink bar should hide itself if no items are active.\n        this.selectedIndex = -1;\n        this._inkBar.hide();\n    }\n}\n_MatTabNavBase.decorators = [\n    { type: Directive }\n];\n_MatTabNavBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n_MatTabNavBase.propDecorators = {\n    backgroundColor: [{ type: Input }],\n    disableRipple: [{ type: Input }],\n    color: [{ type: Input }]\n};\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nclass MatTabNav extends _MatTabNavBase {\n    constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode) {\n        super(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode);\n    }\n}\nMatTabNav.decorators = [\n    { type: Component, args: [{\n                selector: '[mat-tab-nav-bar]',\n                exportAs: 'matTabNavBar, matTabNav',\n                inputs: ['color'],\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\\n<div class=\\\"mat-tab-link-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    #tabList\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-links\\\">\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\",\n                host: {\n                    'class': 'mat-tab-nav-bar mat-tab-header',\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n                    '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-tab-links{display:flex}[mat-align-tabs=center]>.mat-tab-link-container .mat-tab-links{justify-content:center}[mat-align-tabs=end]>.mat-tab-link-container .mat-tab-links{justify-content:flex-end}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:none}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-link:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-link.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-link.mat-tab-disabled{opacity:.5}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-link{opacity:1}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media(max-width: 599px){.mat-tab-link{min-width:72px}}\\n\"]\n            },] }\n];\nMatTabNav.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabNav.propDecorators = {\n    _items: [{ type: ContentChildren, args: [forwardRef(() => MatTabLink), { descendants: true },] }],\n    _inkBar: [{ type: ViewChild, args: [MatInkBar, { static: true },] }],\n    _tabListContainer: [{ type: ViewChild, args: ['tabListContainer', { static: true },] }],\n    _tabList: [{ type: ViewChild, args: ['tabList', { static: true },] }],\n    _nextPaginator: [{ type: ViewChild, args: ['nextPaginator',] }],\n    _previousPaginator: [{ type: ViewChild, args: ['previousPaginator',] }]\n};\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkMixinBase {\n}\nconst _MatTabLinkMixinBase = mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkMixinBase)));\n/** Base class with all of the `MatTabLink` functionality. */\nclass _MatTabLinkBase extends _MatTabLinkMixinBase {\n    constructor(_tabNavBar, \n    /** @docs-private */ elementRef, globalRippleOptions, tabIndex, _focusMonitor, animationMode) {\n        super();\n        this._tabNavBar = _tabNavBar;\n        this.elementRef = elementRef;\n        this._focusMonitor = _focusMonitor;\n        /** Whether the tab link is active or not. */\n        this._isActive = false;\n        this.rippleConfig = globalRippleOptions || {};\n        this.tabIndex = parseInt(tabIndex) || 0;\n        if (animationMode === 'NoopAnimations') {\n            this.rippleConfig.animation = { enterDuration: 0, exitDuration: 0 };\n        }\n    }\n    /** Whether the link is active. */\n    get active() { return this._isActive; }\n    set active(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._isActive) {\n            this._isActive = value;\n            this._tabNavBar.updateActiveLink();\n        }\n    }\n    /**\n     * Whether ripples are disabled on interaction.\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n            !!this.rippleConfig.disabled;\n    }\n    /** Focuses the tab link. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this.elementRef);\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef);\n    }\n}\n_MatTabLinkBase.decorators = [\n    { type: Directive }\n];\n_MatTabLinkBase.ctorParameters = () => [\n    { type: _MatTabNavBase },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n_MatTabLinkBase.propDecorators = {\n    active: [{ type: Input }]\n};\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\nclass MatTabLink extends _MatTabLinkBase {\n    constructor(tabNavBar, elementRef, ngZone, platform, globalRippleOptions, tabIndex, focusMonitor, animationMode) {\n        super(tabNavBar, elementRef, globalRippleOptions, tabIndex, focusMonitor, animationMode);\n        this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n        this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._tabLinkRipple._removeTriggerEvents();\n    }\n}\nMatTabLink.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-tab-link], [matTabLink]',\n                exportAs: 'matTabLink',\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                host: {\n                    'class': 'mat-tab-link mat-focus-indicator',\n                    '[attr.aria-current]': 'active ? \"page\" : null',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.tabIndex]': 'tabIndex',\n                    '[class.mat-tab-disabled]': 'disabled',\n                    '[class.mat-tab-label-active]': 'active',\n                }\n            },] }\n];\nMatTabLink.ctorParameters = () => [\n    { type: MatTabNav },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTabsModule {\n}\nMatTabsModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    PortalModule,\n                    MatRippleModule,\n                    ObserversModule,\n                    A11yModule,\n                ],\n                // Don't export all components because some are only to be used internally.\n                exports: [\n                    MatCommonModule,\n                    MatTabGroup,\n                    MatTabLabel,\n                    MatTab,\n                    MatTabNav,\n                    MatTabLink,\n                    MatTabContent,\n                ],\n                declarations: [\n                    MatTabGroup,\n                    MatTabLabel,\n                    MatTab,\n                    MatInkBar,\n                    MatTabLabelWrapper,\n                    MatTabNav,\n                    MatTabLink,\n                    MatTabBody,\n                    MatTabBodyPortal,\n                    MatTabHeader,\n                    MatTabContent,\n                ],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TABS_CONFIG, MAT_TAB_GROUP, MatInkBar, MatTab, MatTabBody, MatTabBodyPortal, MatTabChangeEvent, MatTabContent, MatTabGroup, MatTabHeader, MatTabLabel, MatTabLabelWrapper, MatTabLink, MatTabNav, MatTabsModule, _MAT_INK_BAR_POSITIONER, _MatTabBodyBase, _MatTabGroupBase, _MatTabHeaderBase, _MatTabLinkBase, _MatTabNavBase, matTabsAnimations, _MAT_INK_BAR_POSITIONER_FACTORY as ɵangular_material_src_material_tabs_tabs_a, MAT_TAB_LABEL as ɵangular_material_src_material_tabs_tabs_b, MAT_TAB_CONTENT as ɵangular_material_src_material_tabs_tabs_c, MatPaginatedTabHeader as ɵangular_material_src_material_tabs_tabs_d };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}